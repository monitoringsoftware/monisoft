/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.jmonitoring.standardPlots.carpetPlot;

import de.jmonitoring.standardPlots.common.ChartDescriber;
import de.jmonitoring.Components.DatePanel;
import de.jmonitoring.DataHandling.Interpolators.Interpolator;
import de.jmonitoring.base.DateEntriesChecker;
import de.jmonitoring.base.DescriberFactory;
import de.jmonitoring.base.MainApplication;
import de.jmonitoring.base.MoniSoftConstants;
import de.jmonitoring.base.sensors.SensorInformation;
import de.jmonitoring.base.sensors.SensorProperties;
import de.jmonitoring.standardPlots.plotTabs.PlotBaseTab;
import de.jmonitoring.utils.ComboBoxModels.Models;
import de.jmonitoring.utils.DeepCopyCollection;
import de.jmonitoring.References.ReferenceValue;
import de.jmonitoring.base.Messages;
import de.jmonitoring.utils.intervals.DateInterval;
import de.jmonitoring.utils.intervals.IntervalSelectorEntry;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author dsl
 */
public class CarpetPlotTab extends PlotBaseTab {

    private ArrayList<CarpetSeriesLooks> CarpetSeriesLooksCollection = new ArrayList<CarpetSeriesLooks>();
    private CarpetSeriesLooks carpetSensorLooks = new CarpetSeriesLooks(0);
    private CarpetSensorChooserPanel cpSensorChooserPanel = new CarpetSensorChooserPanel();
    private final DatePanel cpDateChooserPanel;

    /**
     * Creates new form CarpetPanel
     */
    public CarpetPlotTab(MainApplication gui) {
        super(gui);
        cpDateChooserPanel = new DatePanel(gui(), true);
        initComponents();
        CarpetTab.add(cpDateChooserPanel, 0);
        CarpetTab.add(cpSensorChooserPanel, 1);
    }

    @Override
    protected String getTabName() {
        return "CarpetTab";
    }

    @Override
    public void setIntervalSelector(Models models) {
        cpSensorChooserPanel.getAggregationComboBox().setModel(models.getCarpetAggIntervalComboBoxModel());
        cpSensorChooserPanel.getAggregationComboBox().setSelectedIndex(IntervalSelectorEntry.getIndexOfIntervalSelectorEntry(cpSensorChooserPanel.getAggregationComboBox(), (int) MoniSoftConstants.HOUR_INTERVAL));
    }

    @Override
    public void lockDates(boolean lock) {
        cpDateChooserPanel.getLockToggle().setSelected(lock);
    }

    @Override
    public void clearSelections() {
        cpSensorChooserPanel.getSensorSelector().removeAllItems();
    }

    @Override
    public void setSelectionsFrom(Models models) {
        cpSensorChooserPanel.getSensorSelector().setModel(models.getSensorListComboBoxModel());
    }

    @Override
    public void clearData() {
        // does nothing
    }

    @Override
    public DateInterval getSelectedInterval() {
        return cpDateChooserPanel.getInterval();
    }

    @Override
    public void setSelectedInterval(DateInterval newInterval) {
        cpDateChooserPanel.setInterval(newInterval);
    }

    @Override
    public void resetCollections(int index) {
        // does nothing
    }

    @Override
    public Result fillFrom(ChartDescriber recycledChartDescriber) {
        if (!(recycledChartDescriber instanceof CarpetChartDescriber)) {
            return Result.IGNORED;
        }
        CarpetSeriesLooksCollection = (ArrayList) new DeepCopyCollection().makeDeepCopy(recycledChartDescriber.getchartCollection());
        cpDateChooserPanel.getStartDateChooser().setDate(recycledChartDescriber.getDateInterval().getStartDate());
        cpDateChooserPanel.getEndDateChooser().setDate(recycledChartDescriber.getDateInterval().getEndDate());
        loadCarpetPanelInfo(CarpetSeriesLooksCollection);
        return Result.APPLIED;
    }

    private void loadCarpetPanelInfo(List<CarpetSeriesLooks> collection) {
        carpetSensorLooks = collection.get(0); // nur eine Element in Liste die Carpet-Diagrammen
        cpSensorChooserPanel.getSensorSelector().setSelectedItem(SensorInformation.getSensorProperties(carpetSensorLooks.getSensorID()));
        cpSensorChooserPanel.getScaleMinTextField().setText(Double.toString(carpetSensorLooks.getScaleMin()));
        cpSensorChooserPanel.getScaleMaxTextField().setText(Double.toString(carpetSensorLooks.getScaleMax()));
        cpSensorChooserPanel.setUsePower(carpetSensorLooks.getPowerWanted());
        cpSensorChooserPanel.getAggregationComboBox().setSelectedIndex(IntervalSelectorEntry.getIndexOfIntervalSelectorEntry(cpSensorChooserPanel.getAggregationComboBox(), carpetSensorLooks.getAggregation()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CarpetTab = new javax.swing.JPanel();
        CP_drawChartButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        CarpetTab.setDoubleBuffered(false);
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT);
        flowLayout1.setAlignOnBaseline(true);
        CarpetTab.setLayout(flowLayout1);

        CP_drawChartButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        CP_drawChartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/chart--pencil.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/base/Bundle"); // NOI18N
        CP_drawChartButton.setText(bundle.getString("MoniSoft.CP_drawChartButton.text")); // NOI18N
        CP_drawChartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CP_drawChartButtonActionPerformed(evt);
            }
        });
        CarpetTab.add(CP_drawChartButton);

        add(CarpetTab, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void CP_drawChartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CP_drawChartButtonActionPerformed
        double rangeMax = MoniSoftConstants.RANGE_BOUNDARY;
        double rangeMin = -MoniSoftConstants.RANGE_BOUNDARY;
        String stringValue;

        // Im Moment nur ein Sensor - daher hier manuell in die SeriesLooksCollection schrieben
        SensorProperties selectedSensor = (SensorProperties) cpSensorChooserPanel.getSensorSelector().getSelectedItem();
        //        if (!hasValidEntries(, , list)) {
        //            JOptionPane.showMessageDialog(null, "Sie haben keinen Messpunkt ausgewÃ¤hlt.");
        //            return;
        //        }

        carpetSensorLooks.setSensor(selectedSensor.getSensorName());
        carpetSensorLooks.setLegendString(selectedSensor.getSensorName());
        carpetSensorLooks.setSensorID(selectedSensor.getSensorID());
        carpetSensorLooks.setUnit(selectedSensor.getSensorUnit().getUnit());
        carpetSensorLooks.setPowerWanted(cpSensorChooserPanel.isUsePower());
        carpetSensorLooks.setFactor(selectedSensor.getFactor());
        carpetSensorLooks.setAggregation(((IntervalSelectorEntry) cpSensorChooserPanel.getAggregationComboBox().getSelectedItem()).doubleValue());
        carpetSensorLooks.setReference(cpSensorChooserPanel.getReferenceSelector().getSelectedItem() instanceof ReferenceValue ? (ReferenceValue) cpSensorChooserPanel.getReferenceSelector().getSelectedItem() : null);
        carpetSensorLooks.setTimeReferenceFromString((String) cpSensorChooserPanel.getTimeReferenceSelector().getSelectedItem());
        try {
            if (!cpSensorChooserPanel.getScaleMinTextField().getText().isEmpty()) {
                stringValue = cpSensorChooserPanel.getScaleMinTextField().getText().replace(",", "."); // Kommas in der Eingabe werden durch "." Ersezt -> (float)
                rangeMin = new Double(stringValue);
            }

            if (!cpSensorChooserPanel.getScaleMaxTextField().getText().isEmpty()) {
                stringValue = cpSensorChooserPanel.getScaleMaxTextField().getText().replace(",", ".");
                rangeMax = new Double(stringValue);
            }

        } catch (NumberFormatException ex) {
            Messages.showException(ex);
        }

        carpetSensorLooks.setScaleMin(rangeMin);  // manuelles setzten der Max/Min Werte fuer die series
        carpetSensorLooks.setScaleMax(rangeMax);
        CarpetSeriesLooksCollection.add(carpetSensorLooks);
        if (!new DateEntriesChecker().hasValidEntries(cpDateChooserPanel.getStartDateChooser(), cpDateChooserPanel.getEndDateChooser(), CarpetSeriesLooksCollection)) {
            return;
        }
        CP_drawChartButton.setEnabled(false);
        DateInterval interval = new DateInterval(cpDateChooserPanel.getStartDate(), cpDateChooserPanel.getEndDate());
        gui().drawUsingDescriber(new CarpetChartDescriberFactory(interval, CarpetSeriesLooksCollection), interval, CarpetSeriesLooksCollection);
        CP_drawChartButton.setEnabled(true);
        
        // AZ: nach dem Durchlauf CounterChangeErrorDialog auf false setzen - MONISOFT-8
        Interpolator.saveCancelDecision = false;  
        Interpolator.chartType = Interpolator.CARPET_TAB;
    }//GEN-LAST:event_CP_drawChartButtonActionPerformed

    @Override
    public void fillAnnotationChooser() {
       // do nothing
    }

    private static class CarpetChartDescriberFactory implements DescriberFactory {

        private final DateInterval interval;
        private final ArrayList<CarpetSeriesLooks> looksCollection;

        public CarpetChartDescriberFactory(DateInterval interval, ArrayList<CarpetSeriesLooks> looksCollection) {
            super();
            this.interval = interval;
            this.looksCollection = looksCollection;
        }

        @Override
        public ChartDescriber createChartDescriber() {
            return new CarpetChartDescriber("Carpetplot", interval, looksCollection);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CP_drawChartButton;
    private javax.swing.JPanel CarpetTab;
    // End of variables declaration//GEN-END:variables
}
