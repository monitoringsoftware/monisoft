/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.jmonitoring.standardPlots.maintenancePlot;

import de.jmonitoring.standardPlots.common.ChartDescriber;
import de.jmonitoring.Components.DatePanel;
import de.jmonitoring.Components.SimpleSensorChooserPanel;
import de.jmonitoring.DataHandling.Interpolators.Interpolator;
import de.jmonitoring.base.DateEntriesChecker;
import de.jmonitoring.base.MainGUI;
import de.jmonitoring.base.MainApplication;
import de.jmonitoring.base.sensors.SensorProperties;
import de.jmonitoring.standardPlots.plotTabs.PlotBaseTab;
import de.jmonitoring.utils.ComboBoxModels.Models;
import de.jmonitoring.utils.intervals.DateInterval;
import java.util.ArrayList;

/**
 *
 * @author dsl
 */
public class MaintenancePlotTab extends PlotBaseTab {

    private DatePanel maDateChooserPanel;
    private SimpleSensorChooserPanel maSensorChooserPanel = new SimpleSensorChooserPanel();
    /**
     * Creates new form MaintainancePlot
     */
    public MaintenancePlotTab(MainApplication frame) {
    	super(frame);
    	maDateChooserPanel = new DatePanel(gui(), true);
        initComponents();
    }
    
    @Override
    protected String getTabName() {
    	return "MaintenanceTab";
    }

    @Override
    public DateInterval getSelectedInterval() {
        return maDateChooserPanel.getInterval();
    }

    @Override
    public void setSelectedInterval(DateInterval newInterval) {
        maDateChooserPanel.setInterval(newInterval);
    }

    public void showIn(MainGUI mainFrame, DateInterval interval, int sensorID) {
        MaintenancedrawChartButton.setEnabled(false);
        mainFrame.showMaintenanceChart(interval, sensorID, false);
        MaintenancedrawChartButton.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MaintenanceTab = new javax.swing.JPanel();
        MaintenancedrawChartButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/base/Bundle"); // NOI18N
        MaintenanceTab.setToolTipText(bundle.getString("MoniSoft.MaintenanceTab.toolTipText")); // NOI18N
        MaintenanceTab.setDoubleBuffered(false);
        MaintenanceTab.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        MaintenanceTab.add(maDateChooserPanel);
        MaintenanceTab.add(maSensorChooserPanel);

        MaintenancedrawChartButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        MaintenancedrawChartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/chart--pencil.png"))); // NOI18N
        MaintenancedrawChartButton.setText(bundle.getString("MoniSoft.MaintenancedrawChartButton.text")); // NOI18N
        MaintenancedrawChartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaintenancedrawChartButtonActionPerformed(evt);
            }
        });
        MaintenanceTab.add(MaintenancedrawChartButton);

        add(MaintenanceTab, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void MaintenancedrawChartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaintenancedrawChartButtonActionPerformed
        DateInterval dateInterval = new DateInterval(maDateChooserPanel.getStartDate(), maDateChooserPanel.getEndDate());
        SensorProperties selectedSensor = (SensorProperties) maSensorChooserPanel.getSensorSelector().getSelectedItem();
        ArrayList list = new ArrayList();
        list.add(selectedSensor);

        if (!new DateEntriesChecker().hasValidEntries(maDateChooserPanel.getStartDateChooser(), maDateChooserPanel.getEndDateChooser(), list)) {
            return;
        }

        gui().showMaintenanceChart(dateInterval, selectedSensor.getSensorID(), false);
        
        // AZ: nach dem Durchlauf CounterChangeErrorDialog auf false setzen - MONISOFT-8
        Interpolator.saveCancelDecision = false;
        Interpolator.chartType = Interpolator.MAINTENANCE_TAB;
    }//GEN-LAST:event_MaintenancedrawChartButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MaintenanceTab;
    private static javax.swing.JButton MaintenancedrawChartButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public Result fillFrom(ChartDescriber chartDescriber) {
        return Result.IGNORED;
    }

    @Override
    public void setIntervalSelector(Models models) {
        // does nothing
    }

    @Override
    public void resetCollections(int index) {
        // does nothing
    }

    @Override
    public void lockDates(boolean lock) {
         maDateChooserPanel.getLockToggle().setSelected(lock);
    }

    @Override
    public void clearSelections() {
        maSensorChooserPanel.getSensorSelector().removeAllItems();
    }

    @Override
    public void setSelectionsFrom(Models models) {
        maSensorChooserPanel.getSensorSelector().setModel(models.getSensorListComboBoxModel());
    }

    @Override
    public void clearData() {
        // does nothing
    }

    @Override
    public void fillAnnotationChooser() {
        // do nothing
    }
}
