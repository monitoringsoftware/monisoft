/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.jmonitoring.standardPlots.ogivePlot;

import de.jmonitoring.standardPlots.common.ChartDescriber;
import de.jmonitoring.Components.DatePanel;
import de.jmonitoring.DataHandling.Interpolators.Interpolator;
import de.jmonitoring.base.DateEntriesChecker;
import de.jmonitoring.base.DescriberFactory;
import de.jmonitoring.base.MainApplication;
import de.jmonitoring.base.MoniSoftConstants;
import de.jmonitoring.base.sensors.SensorInformation;
import de.jmonitoring.base.sensors.SensorProperties;
import de.jmonitoring.standardPlots.plotTabs.PlotBaseTab;
import de.jmonitoring.utils.ComboBoxModels.Models;
import de.jmonitoring.utils.DeepCopyCollection;
import de.jmonitoring.utils.intervals.DateInterval;
import java.awt.Color;
import java.util.ArrayList;

/**
 * This is the tabulator shown on the GUI for ogive charts
 *
 * @author togro
 */
public class OgivePlotTab extends PlotBaseTab {

    private ArrayList<OgiveSeriesLooks> OgiveSeriesLooksCollection = new ArrayList<OgiveSeriesLooks>();
    private OgiveSeriesLooks ogiveSensorLooks = new OgiveSeriesLooks(0);
    private Color[] OgiveSeriesColor = new Color[14];
    private OgiveSensorChooserPanel ogSensorChooserPanel = new OgiveSensorChooserPanel();
    private final DatePanel ogDateChooserPanel;

    /**
     * Creates new form OgivePlot
     */
    public OgivePlotTab(MainApplication gui) {
        super(gui);
        ogDateChooserPanel = new DatePanel(gui(), true);
        initComponents();
    }

    @Override
    protected String getTabName() {
        return "OgiveTab";
    }

    @Override
    public void setIntervalSelector(Models models) {
        // does nothing
    }

    @Override
    public void lockDates(boolean lock) {
        ogDateChooserPanel.getLockToggle().setSelected(lock);
    }

    @Override
    public void clearSelections() {
        ogSensorChooserPanel.getSensorSelector().removeAllItems();
    }

    @Override
    public void setSelectionsFrom(Models models) {
        ogSensorChooserPanel.getSensorSelector().setModel(models.getSensorListComboBoxModel());
    }

    @Override
    public void clearData() {
        OgiveSeriesLooksCollection.clear();
    }

    @Override
    public DateInterval getSelectedInterval() {
        return ogDateChooserPanel.getInterval();
    }

    @Override
    public void setSelectedInterval(DateInterval newInterval) {
        ogDateChooserPanel.setInterval(newInterval);
    }

    @Override
    public void resetCollections(int index) {
        OgiveSeriesColor[index] = MoniSoftConstants.ColorTable.get(index);
        OgiveSeriesLooksCollection.add(index, null);
    }

    private void loadOgivePanelInfo(ArrayList<OgiveSeriesLooks> collection) {
        ogiveSensorLooks = collection.get(0); // nur eine Eleemt in Liste die Carpet-Diagrammen
        ogSensorChooserPanel.getSensorSelector().setSelectedItem(SensorInformation.getSensorProperties(ogiveSensorLooks.getSensorID()));
        ogSensorChooserPanel.setUsePower(ogiveSensorLooks.getPowerWanted());
        ogSensorChooserPanel.setFlipAxis(ogiveSensorLooks.getflipAxis());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OgiveTab = new javax.swing.JPanel();
        DL_drawChartButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        OgiveTab.setDoubleBuffered(false);
        OgiveTab.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        OgiveTab.add(ogDateChooserPanel);
        OgiveTab.add(ogSensorChooserPanel);

        DL_drawChartButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        DL_drawChartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/chart--pencil.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/base/Bundle"); // NOI18N
        DL_drawChartButton.setText(bundle.getString("MoniSoft.DL_drawChartButton.text")); // NOI18N
        DL_drawChartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DL_drawChartButtonActionPerformed(evt);
            }
        });
        OgiveTab.add(DL_drawChartButton);

        add(OgiveTab, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void DL_drawChartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DL_drawChartButtonActionPerformed
        OgiveSeriesLooksCollection.set(0, ogiveSensorLooks);

        SensorProperties selectedSensor = (SensorProperties) ogSensorChooserPanel.getSensorSelector().getSelectedItem();
        ogiveSensorLooks.setSensor(selectedSensor.getSensorName());
        ogiveSensorLooks.setLegendString(null);
        ogiveSensorLooks.setSensorID(selectedSensor.getSensorID());
        ogiveSensorLooks.setUnit(selectedSensor.getSensorUnit().getUnit());
        ogiveSensorLooks.setPowerWanted(ogSensorChooserPanel.isUsePower());
        ogiveSensorLooks.setFactor(selectedSensor.getFactor());
        ogiveSensorLooks.setLineColor(Color.RED);
        ogiveSensorLooks.setTimeBase(60);            // TODO Im Moment Stunde fest
        ogiveSensorLooks.setflipAxis(ogSensorChooserPanel.isFlipAxis());
        ogiveSensorLooks.setReverse(ogSensorChooserPanel.isReverse());

        if (!new DateEntriesChecker().hasValidEntries(ogDateChooserPanel.getStartDateChooser(), ogDateChooserPanel.getEndDateChooser(), OgiveSeriesLooksCollection)) {
            return;
        }

        DL_drawChartButton.setEnabled(false);
        // soll ein vorhandener Describer verwendet werden
        DateInterval interval = new DateInterval(ogDateChooserPanel.getStartDate(), ogDateChooserPanel.getEndDate());
        gui().drawUsingDescriber(new OgiveChartDescriberFactory(ogiveSensorLooks, interval, OgiveSeriesLooksCollection), interval, OgiveSeriesLooksCollection);
        DL_drawChartButton.setEnabled(true);
        
        // AZ: nach dem Durchlauf CounterChangeErrorDialog auf false setzen - MONISOFT-8
        Interpolator.saveCancelDecision = false;
        Interpolator.chartType = Interpolator.OGIVE_TAB;
    }//GEN-LAST:event_DL_drawChartButtonActionPerformed

    @Override
    public void fillAnnotationChooser() {
        // do nothing
    }

    private static class OgiveChartDescriberFactory implements DescriberFactory {

        private final DateInterval interval;
        private final ArrayList<OgiveSeriesLooks> looksCollection;
        private final OgiveSeriesLooks ogiveSensorLooks;

        public OgiveChartDescriberFactory(OgiveSeriesLooks ogiveSensorLooks, DateInterval interval, ArrayList<OgiveSeriesLooks> looksCollection) {
            super();
            this.ogiveSensorLooks = ogiveSensorLooks;
            this.interval = interval;
            this.looksCollection = looksCollection;
        }

        @Override
        public ChartDescriber createChartDescriber() {
            return new OgiveChartDescriber("Summenh√§ufigkeit " + SensorInformation.getDisplayName(ogiveSensorLooks.getSensorID()),
                    interval, looksCollection);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DL_drawChartButton;
    private javax.swing.JPanel OgiveTab;
    // End of variables declaration//GEN-END:variables

    @Override
    public Result fillFrom(ChartDescriber chartDescriber) {
        if (!(chartDescriber instanceof OgiveChartDescriber)) {
            return Result.IGNORED;
        }
        OgiveSeriesLooksCollection = (ArrayList) new DeepCopyCollection().makeDeepCopy(chartDescriber.getchartCollection());
        ogDateChooserPanel.getStartDateChooser().setDate(chartDescriber.getDateInterval().getStartDate());
        ogDateChooserPanel.getEndDateChooser().setDate(chartDescriber.getDateInterval().getEndDate());
        loadOgivePanelInfo(OgiveSeriesLooksCollection);
        return Result.APPLIED;
    }
}
