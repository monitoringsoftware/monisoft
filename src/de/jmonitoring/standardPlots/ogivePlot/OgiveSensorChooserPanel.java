package de.jmonitoring.standardPlots.ogivePlot;

import de.jmonitoring.base.MoniSoftConstants;
import de.jmonitoring.base.sensors.SensorProperties;
import de.jmonitoring.utils.DnDListener.SensorSelectorDropListener;
import java.awt.dnd.DropTarget;
import javax.swing.JComboBox;

/**
 * The panel to operate ogive settings in the GUI
 *
 * @author togro
 */
public class OgiveSensorChooserPanel extends javax.swing.JPanel {

    /**
     * Creates new form OgiveSensorChooserPanel
     */
    public OgiveSensorChooserPanel() {
        initComponents();
    }

    public JComboBox getSensorSelector() {
        return sensorSelector;
    }

    public boolean isUsePower() {
        return powerCheck.isSelected();
    }

    public void setUsePower(boolean b) {
        powerCheck.setSelected(b);
    }

    public boolean isFlipAxis() {
        return flipCheck.isSelected();
    }

    public void setFlipAxis(boolean b) {
        flipCheck.setSelected(b);
    }

    public boolean isReverse() {
        return reverseCheck.isSelected();
    }

    public void setReverse(boolean b) {
        reverseCheck.setSelected(b);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel29 = new javax.swing.JLabel();
        flipCheck = new javax.swing.JCheckBox();
        sensorSelector = new javax.swing.JComboBox();
        powerCheck = new javax.swing.JCheckBox();
        reverseCheck = new javax.swing.JCheckBox();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle"); // NOI18N
        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED), bundle.getString("OgiveSensorChooserPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9))); // NOI18N
        setMinimumSize(new java.awt.Dimension(467, 100));
        setPreferredSize(new java.awt.Dimension(467, 100));

        jLabel29.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("de/jmonitoring/standardPlots/ogivePlot/Bundle"); // NOI18N
        jLabel29.setText(bundle1.getString("OgiveSensorChooserPanel.jLabel29.text")); // NOI18N

        flipCheck.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        flipCheck.setText(bundle1.getString("OgiveSensorChooserPanel.flipCheck.text")); // NOI18N
        flipCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        flipCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));

        sensorSelector.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        sensorSelector.setMaximumRowCount(20);
        sensorSelector.setMinimumSize(new java.awt.Dimension(126, 17));
        sensorSelector.setPreferredSize(new java.awt.Dimension(126, 17));
        sensorSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sensorSelectorActionPerformed(evt);
            }
        });

        powerCheck.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        powerCheck.setText(bundle1.getString("OgiveSensorChooserPanel.powerCheck.text")); // NOI18N
        powerCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        powerCheck.setEnabled(false);
        powerCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));

        reverseCheck.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        reverseCheck.setText(bundle1.getString("OgiveSensorChooserPanel.reverseCheck.text")); // NOI18N
        reverseCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        reverseCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));

        new DropTarget(sensorSelector,new SensorSelectorDropListener());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reverseCheck)
                    .addComponent(sensorSelector, 0, 340, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(flipCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                        .addComponent(powerCheck)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(sensorSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(powerCheck)
                    .addComponent(flipCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reverseCheck)
                .addContainerGap(13, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sensorSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorSelectorActionPerformed
        SensorProperties props = (SensorProperties) sensorSelector.getSelectedItem();
        if (props != null && !props.getSensorName().equals(MoniSoftConstants.NO_SENSOR_SELECTED) && (props.isCounter() || props.isUsage())) {
            powerCheck.setEnabled(true);
        } else {
            powerCheck.setEnabled(false);
            powerCheck.setSelected(false);
        }
    }//GEN-LAST:event_sensorSelectorActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox flipCheck;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JCheckBox powerCheck;
    private javax.swing.JCheckBox reverseCheck;
    private javax.swing.JComboBox sensorSelector;
    // End of variables declaration//GEN-END:variables
}
