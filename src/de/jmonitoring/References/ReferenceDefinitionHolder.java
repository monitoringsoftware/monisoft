/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */

/*
 * ConsumtionCategoryItemHolder.java
 *
 * Created on 21.09.2010, 14:41:12
 */
package de.jmonitoring.References;

import java.awt.Component;
import java.util.ArrayList;
import org.jdesktop.swingx.VerticalLayout;

/**
 * This is a panel used to hold multiple {@link ReferenceDefinitionItem}s
 *
 * @author togro
 */
public class ReferenceDefinitionHolder extends javax.swing.JPanel {

    private final ReferenceDefinitionDialog caller;
    private ArrayList<ReferenceDescription> deletedReferences = new ArrayList<ReferenceDescription>();

    /**
     * Creates new form ReferenceItemHolder
     *
     * @param editable Determine if this holder is view only or editable
     * @param caller The calling {@link ReferenceDefinitionDialog}
     */
    public ReferenceDefinitionHolder(boolean editable, ReferenceDefinitionDialog caller) {
        this.caller = caller;
        initComponents();
        setLayout(new VerticalLayout(2));
    }

    /**
     * Adds a new {@link ReferenceDefinitionItem} or edits an existing
     *
     * @param refDef The definition
     */
    public void addReference(ReferenceDescription refDef) {
        for (Component c : getComponents()) {
            if (c instanceof ReferenceDefinitionItem) {
                if (((ReferenceDefinitionItem) c).getReference().getName().equals(refDef.getName())) { // Diese Bezugsgröße existiert schon
                    remove(c); // Dann vor dem hinzufügen die alte entfernen
                    // TODO Abfrage??
                }
            }
        }
        add(new ReferenceDefinitionItem(refDef, this.caller)); // Bezugsgröße hinzufügen
    }

    /**
     * Delete a {@link ReferenceDefinitionItem} from the holder
     *
     * @param item
     */
    public void removeReference(ReferenceDefinitionItem item) {
        deletedReferences.add(item.getReference());
        remove(item);
        this.caller.updateScrollPane(caller.LEAVE);
    }

    /**
     * Return all definitions in the holder
     *
     * @return A list of all {@link ReferenceDescription}s
     */
    public ArrayList<ReferenceDescription> getIncludedReferences() {
        ArrayList<ReferenceDescription> list = new ArrayList<ReferenceDescription>();
        for (Component c : getComponents()) {
            if (c instanceof ReferenceDefinitionItem) {
                list.add(((ReferenceDefinitionItem) c).getReference());
            }
        }
        return list;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 204));
        setMinimumSize(new java.awt.Dimension(400, 150));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
