package de.jmonitoring.ApplicationProperties;

import de.jmonitoring.base.DesktopManager;
import de.jmonitoring.base.MainApplication;
import de.jmonitoring.base.Messages;
import de.jmonitoring.base.MoniSoft;
import de.jmonitoring.base.MoniSoftConstants;
import de.jmonitoring.help.ManualBookmarks;
import de.jmonitoring.help.ManualViewer;
import de.jmonitoring.utils.ApplicationFolderManager;
import de.jmonitoring.utils.filenamefilter.mysqldump_FileFilter;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Locale;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.TimeZone;

import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * This class contains the dialog to setup application properties.<p> It loads
 * the current properties and saves any changes.
 *
 * @author togro
 */
public class AppPrefsDialog extends javax.swing.JDialog {

    private Properties oldProperties = MoniSoft.getInstance().getApplicationProperties();
    private final MainApplication gui;
    private final DesktopManager dm;
    private TimeZone defaultTimezone = TimeZone.getDefault();
    private TimeZone selectedTimezone = TimeZone.getDefault();    

    /**
     * Constructs an new dialog
     *
     * @param gui the main gui
     * @param dm the desktop manager
     */
    public AppPrefsDialog(MainApplication gui, DesktopManager dm) {
        super(gui.getMainFrame(), true);
        this.gui = gui;
        this.dm = dm;
        initComponents();
        loadProperties(oldProperties);
    }

    /**
     * Writes the properies to the preferences file.
     *
     * @param check if true the default folder is valid
     * @param message if true will print a message that the properties were
     * saved
     * @return true if the stroage was sucessfull
     * @throws FileNotFoundException
     * @throws IOException
     */
    public static boolean saveProperties(final boolean check, final boolean message) throws FileNotFoundException, IOException {
        boolean success = true;
        if (check && !isValidFolder()) {
            success = false;
        } else {
            String file = System.getProperty("user.home") + System.getProperty("file.separator") + MoniSoftConstants.userPrefs;
            FileOutputStream out = null;
            try {
                out = new FileOutputStream(file);
                MoniSoft.getInstance().getApplicationProperties().store(out, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("---NUTZERSPEZIFISCHE EINSTELLUNGEN---"));
            } finally {
                try {
                    out.close();
                } catch (IOException ex) {
                    Messages.showException(ex);
                } catch (Exception e) {
                    Messages.showException(e);
                }
            }
            if (message) {
                Messages.showMessage(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("EINSTELLUNGEN GESPEICHERT IN") + "\n", new Object[]{file}), true);
            }
        }
        return success;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel16 = new javax.swing.JPanel();
        savePropsButton = new javax.swing.JButton();
        canclePropsButton = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel10 = new javax.swing.JPanel();
        SaveFolder_Field = new javax.swing.JTextField();
        baseFolderButton = new javax.swing.JButton();
        jLabel51 = new javax.swing.JLabel();
        mysqldumpLocation = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        mySQLDumpButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        FieldComboBox = new javax.swing.JComboBox();
        DecComboBox = new javax.swing.JComboBox();
        jLabel36 = new javax.swing.JLabel();
        NumberFormatComboBox = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        EncodingComboBox = new javax.swing.JComboBox();
        jPanel12 = new javax.swing.JPanel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        defaultUserTextField = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        defaultServerPortTextField = new javax.swing.JTextField();
        defaultDBTextField = new javax.swing.JTextField();
        defaultServerTextField = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        useCoverToleranceCheckbox = new javax.swing.JCheckBox();
        coverToleranceValue = new javax.swing.JTextField();
        jLabel70 = new javax.swing.JLabel();
        useEdgeToleranceCheckbox = new javax.swing.JCheckBox();
        edgeToleranceValue = new javax.swing.JTextField();
        jLabel84 = new javax.swing.JLabel();
        ignoreValueCheckbox = new javax.swing.JCheckBox();
        ignoreValue = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        intervalValues = new javax.swing.JTextField();
        useLeaveEventsCheckbox = new javax.swing.JCheckBox();
        leaveEventsValue = new javax.swing.JTextField();
        jLabel85 = new javax.swing.JLabel();
        automaticCounterChangeCheckBox = new javax.swing.JCheckBox();
        partlyCheckBox = new javax.swing.JCheckBox();
        jPanel25 = new javax.swing.JPanel();
        antiAliasingCheckbox = new javax.swing.JCheckBox();
        dragModeCheckbox = new javax.swing.JCheckBox();
        drawChartStampCheckBox = new javax.swing.JCheckBox();
        useSensorIDCeckBox = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        languageChooser = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        addBuildingnameWithAT = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        zeitzonenCombobox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        useSSHTunnelCheckBox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        SSHServerTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        SSHServerPortTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        SSHTunnelEndpointTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        SSHTunnelEndpointPortTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        SSHLocalPortTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        SSHUserTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        savePropsButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        savePropsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/accept.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/ApplicationProperties/Bundle"); // NOI18N
        savePropsButton.setText(bundle.getString("AppPrefsDialog.savePropsButton.text")); // NOI18N
        savePropsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePropsButtonActionPerformed(evt);
            }
        });

        canclePropsButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        canclePropsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/cancel.png"))); // NOI18N
        canclePropsButton.setText(bundle.getString("AppPrefsDialog.canclePropsButton.text")); // NOI18N
        canclePropsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canclePropsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addContainerGap(399, Short.MAX_VALUE)
                .addComponent(canclePropsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(savePropsButton)
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(savePropsButton)
                    .addComponent(canclePropsButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel16, java.awt.BorderLayout.SOUTH);

        jPanel9.setBackground(new java.awt.Color(0, 102, 204));
        jPanel9.setPreferredSize(new java.awt.Dimension(100, 40));

        jLabel33.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(255, 255, 255));
        jLabel33.setText(bundle.getString("AppPrefsDialog.jLabel33.text")); // NOI18N

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/question-frame.png"))); // NOI18N
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setFocusPainted(false);
        jButton7.setIconTextGap(0);
        jButton7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7help(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 376, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7)
                    .addComponent(jLabel33))
                .addContainerGap())
        );

        getContentPane().add(jPanel9, java.awt.BorderLayout.PAGE_START);

        jTabbedPane2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        baseFolderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/folder.png"))); // NOI18N
        baseFolderButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        baseFolderButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        baseFolderButton.setMinimumSize(new java.awt.Dimension(50, 20));
        baseFolderButton.setPreferredSize(new java.awt.Dimension(25, 20));
        baseFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseFolderButtonActionPerformed(evt);
            }
        });

        jLabel51.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel51.setText(bundle.getString("AppPrefsDialog.jLabel51.text")); // NOI18N

        mysqldumpLocation.setText(bundle.getString("AppPrefsDialog.mysqldumpLocation.text")); // NOI18N
        mysqldumpLocation.setToolTipText(bundle.getString("AppPrefsDialog.mysqldumpLocation.toolTipText")); // NOI18N

        jLabel54.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel54.setText(bundle.getString("AppPrefsDialog.jLabel54.text")); // NOI18N

        mySQLDumpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/folder.png"))); // NOI18N
        mySQLDumpButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mySQLDumpButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mySQLDumpButton.setMinimumSize(new java.awt.Dimension(50, 20));
        mySQLDumpButton.setPreferredSize(new java.awt.Dimension(25, 20));
        mySQLDumpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mySQLDumpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel51)
                    .addComponent(jLabel54))
                .addGap(23, 23, 23)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(SaveFolder_Field, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(baseFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(mysqldumpLocation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mySQLDumpButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel51)
                        .addComponent(SaveFolder_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(baseFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel54)
                        .addComponent(mysqldumpLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mySQLDumpButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(132, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab(bundle.getString("AppPrefsDialog.jPanel10.TabConstraints.tabTitle"), jPanel10); // NOI18N

        jLabel35.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel35.setText(bundle.getString("AppPrefsDialog.jLabel35.text")); // NOI18N

        FieldComboBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        FieldComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Komma", "Semikolon", "Tab", "Leerzeichen" }));
        FieldComboBox.setPreferredSize(new java.awt.Dimension(61, 19));

        DecComboBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        DecComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Punkt", "Komma" }));
        DecComboBox.setPreferredSize(new java.awt.Dimension(61, 19));

        jLabel36.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel36.setText(bundle.getString("AppPrefsDialog.jLabel36.text")); // NOI18N

        NumberFormatComboBox.setText(bundle.getString("AppPrefsDialog.NumberFormatComboBox.text")); // NOI18N

        jLabel48.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel48.setText(bundle.getString("AppPrefsDialog.jLabel48.text")); // NOI18N

        jLabel59.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel59.setText(bundle.getString("AppPrefsDialog.jLabel59.text")); // NOI18N

        EncodingComboBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        EncodingComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ISO-8859-1", "UTF-8" }));
        EncodingComboBox.setPreferredSize(new java.awt.Dimension(61, 19));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel59)
                    .addComponent(jLabel36)
                    .addComponent(jLabel35)
                    .addComponent(jLabel48))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(DecComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 514, Short.MAX_VALUE)
                    .addComponent(FieldComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 514, Short.MAX_VALUE)
                    .addComponent(NumberFormatComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                    .addComponent(EncodingComboBox, 0, 514, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FieldComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(DecComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NumberFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel48))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel59)
                    .addComponent(EncodingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab(bundle.getString("AppPrefsDialog.jPanel11.TabConstraints.tabTitle"), jPanel11); // NOI18N

        jLabel55.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel55.setText(bundle.getString("AppPrefsDialog.jLabel55.text")); // NOI18N

        jLabel56.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel56.setText(bundle.getString("AppPrefsDialog.jLabel56.text")); // NOI18N

        defaultUserTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        jLabel57.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel57.setText(bundle.getString("AppPrefsDialog.jLabel57.text")); // NOI18N

        jLabel58.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel58.setText(bundle.getString("AppPrefsDialog.jLabel58.text")); // NOI18N

        defaultServerPortTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        defaultServerPortTextField.setText(bundle.getString("AppPrefsDialog.defaultServerPortTextField.text")); // NOI18N

        defaultDBTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        defaultServerTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(defaultDBTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(defaultUserTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(defaultServerTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel58)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(defaultServerPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(111, 111, 111))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel56)
                    .addComponent(defaultUserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel55)
                    .addComponent(defaultDBTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel57)
                    .addComponent(defaultServerPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(defaultServerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel58))
                .addContainerGap(104, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab(bundle.getString("AppPrefsDialog.jPanel12.TabConstraints.tabTitle"), jPanel12); // NOI18N

        useCoverToleranceCheckbox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        useCoverToleranceCheckbox.setText(bundle.getString("AppPrefsDialog.useCoverToleranceCheckbox.text")); // NOI18N
        useCoverToleranceCheckbox.setToolTipText(bundle.getString("AppPrefsDialog.useCoverToleranceCheckbox.toolTipText")); // NOI18N

        coverToleranceValue.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        coverToleranceValue.setText(bundle.getString("AppPrefsDialog.coverToleranceValue.text")); // NOI18N

        jLabel70.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel70.setText(bundle.getString("AppPrefsDialog.jLabel70.text")); // NOI18N

        useEdgeToleranceCheckbox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        useEdgeToleranceCheckbox.setText(bundle.getString("AppPrefsDialog.useEdgeToleranceCheckbox.text")); // NOI18N
        useEdgeToleranceCheckbox.setToolTipText(bundle.getString("AppPrefsDialog.useEdgeToleranceCheckbox.toolTipText")); // NOI18N

        edgeToleranceValue.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        edgeToleranceValue.setText(bundle.getString("AppPrefsDialog.edgeToleranceValue.text")); // NOI18N

        jLabel84.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel84.setText(bundle.getString("AppPrefsDialog.jLabel84.text")); // NOI18N

        ignoreValueCheckbox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        ignoreValueCheckbox.setText(bundle.getString("AppPrefsDialog.ignoreValueCheckbox.text")); // NOI18N
        ignoreValueCheckbox.setToolTipText(bundle.getString("AppPrefsDialog.ignoreValueCheckbox.toolTipText")); // NOI18N

        ignoreValue.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        ignoreValue.setText(bundle.getString("AppPrefsDialog.ignoreValue.text")); // NOI18N

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel1.setText(bundle.getString("AppPrefsDialog.jLabel1.text")); // NOI18N

        intervalValues.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        intervalValues.setText(bundle.getString("AppPrefsDialog.intervalValues.text")); // NOI18N

        useLeaveEventsCheckbox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        useLeaveEventsCheckbox.setText(bundle.getString("AppPrefsDialog.useLeaveEventsCheckbox.text")); // NOI18N
        useLeaveEventsCheckbox.setToolTipText(bundle.getString("AppPrefsDialog.useLeaveEventsCheckbox.toolTipText")); // NOI18N

        leaveEventsValue.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        leaveEventsValue.setText(bundle.getString("AppPrefsDialog.leaveEventsValue.text")); // NOI18N

        jLabel85.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel85.setText(bundle.getString("AppPrefsDialog.jLabel85.text")); // NOI18N

        automaticCounterChangeCheckBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        automaticCounterChangeCheckBox.setText(bundle.getString("AppPrefsDialog.automaticCounterChangeCheckBox.text")); // NOI18N
        automaticCounterChangeCheckBox.setToolTipText(bundle.getString("AppPrefsDialog.automaticCounterChangeCheckBox.toolTipText")); // NOI18N

        partlyCheckBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        partlyCheckBox.setText(bundle.getString("AppPrefsDialog.CALC_INCOMPLETE_CONSUMPTION")); // NOI18N
        partlyCheckBox.setToolTipText(bundle.getString("AppPrefsDialog.partlyCheckBox.toolTipText")); // NOI18N

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(partlyCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(useEdgeToleranceCheckbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(useCoverToleranceCheckbox, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(automaticCounterChangeCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(useLeaveEventsCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(ignoreValueCheckbox))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addComponent(edgeToleranceValue, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(jLabel84, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addComponent(leaveEventsValue, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(jLabel85, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ignoreValue, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(intervalValues, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel13Layout.createSequentialGroup()
                                        .addComponent(coverToleranceValue, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(2, 2, 2)
                                        .addComponent(jLabel70, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(useCoverToleranceCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(useEdgeToleranceCheckbox))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel70)
                            .addComponent(coverToleranceValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel84)
                            .addComponent(edgeToleranceValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(automaticCounterChangeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(partlyCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ignoreValueCheckbox)
                    .addComponent(ignoreValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(intervalValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useLeaveEventsCheckbox)
                    .addComponent(jLabel85)
                    .addComponent(leaveEventsValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab(bundle.getString("AppPrefsDialog.jPanel13.TabConstraints.tabTitle"), jPanel13); // NOI18N

        antiAliasingCheckbox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        antiAliasingCheckbox.setText(bundle.getString("AppPrefsDialog.antiAliasingCheckbox.text")); // NOI18N

        dragModeCheckbox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        dragModeCheckbox.setText(bundle.getString("AppPrefsDialog.dragModeCheckbox.text")); // NOI18N

        drawChartStampCheckBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        drawChartStampCheckBox.setText(bundle.getString("AppPrefsDialog.drawChartStampCheckBox.text")); // NOI18N

        useSensorIDCeckBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        useSensorIDCeckBox.setText(bundle.getString("AppPrefsDialog.useSensorIDCeckBox.text")); // NOI18N

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel9.setText(bundle.getString("AppPrefsDialog.jLabel9.text")); // NOI18N

        languageChooser.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        languageChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Deutsch", "English" }));

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel10.setText(bundle.getString("AppPrefsDialog.jLabel10.text")); // NOI18N

        addBuildingnameWithAT.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        addBuildingnameWithAT.setText(bundle.getString("AppPrefsDialog.addBuildingnameWithAT.text")); // NOI18N

        jLabel11.setText(bundle.getString("AppPrefsDialog.jLabel11.text")); // NOI18N

        zeitzonenCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Systemeinstellung", "UTC" }));
        zeitzonenCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeitzonenComboboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(drawChartStampCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(dragModeCheckbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(antiAliasingCheckbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(useSensorIDCeckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addBuildingnameWithAT, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE))
                        .addGap(145, 145, 145))
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11))
                        .addGap(104, 104, 104)
                        .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(languageChooser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zeitzonenCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(antiAliasingCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dragModeCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawChartStampCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useSensorIDCeckBox)
                .addGap(1, 1, 1)
                .addComponent(addBuildingnameWithAT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(languageChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(zeitzonenCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab(bundle.getString("AppPrefsDialog.jPanel25.TabConstraints.tabTitle"), jPanel25); // NOI18N

        useSSHTunnelCheckBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        useSSHTunnelCheckBox.setText(bundle.getString("AppPrefsDialog.useSSHTunnelCheckBox.text")); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel2.setText(bundle.getString("AppPrefsDialog.jLabel2.text")); // NOI18N

        SSHServerTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel3.setText(bundle.getString("AppPrefsDialog.jLabel3.text")); // NOI18N

        SSHServerPortTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        SSHServerPortTextField.setText(bundle.getString("AppPrefsDialog.SSHServerPortTextField.text")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel4.setText(bundle.getString("AppPrefsDialog.jLabel4.text")); // NOI18N

        SSHTunnelEndpointTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel5.setText(bundle.getString("AppPrefsDialog.jLabel5.text")); // NOI18N

        SSHTunnelEndpointPortTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        SSHTunnelEndpointPortTextField.setText(bundle.getString("AppPrefsDialog.SSHTunnelEndpointPortTextField.text")); // NOI18N

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel6.setText(bundle.getString("AppPrefsDialog.jLabel6.text")); // NOI18N

        SSHLocalPortTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        SSHLocalPortTextField.setText(bundle.getString("AppPrefsDialog.SSHLocalPortTextField.text")); // NOI18N

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel7.setText(bundle.getString("AppPrefsDialog.jLabel7.text")); // NOI18N

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel8.setText(bundle.getString("AppPrefsDialog.jLabel8.text")); // NOI18N

        SSHUserTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SSHUserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(73, 73, 73)
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(SSHLocalPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(SSHServerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(SSHTunnelEndpointTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel3))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(SSHTunnelEndpointPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(SSHServerPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(53, 53, 53))))
                .addContainerGap(108, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(SSHServerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(SSHServerPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(SSHTunnelEndpointTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(SSHTunnelEndpointPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel7))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(SSHLocalPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(SSHUserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(useSSHTunnelCheckBox))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useSSHTunnelCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab(bundle.getString("AppPrefsDialog.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        getContentPane().add(jTabbedPane2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void savePropsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePropsButtonActionPerformed
        save();
}//GEN-LAST:event_savePropsButtonActionPerformed

    private void canclePropsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canclePropsButtonActionPerformed
        dispose();
}//GEN-LAST:event_canclePropsButtonActionPerformed

    private void baseFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseFolderButtonActionPerformed
        showFileChooser();
}//GEN-LAST:event_baseFolderButtonActionPerformed

    private void mySQLDumpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mySQLDumpButtonActionPerformed
        showMySQLDumpFileChooser();
    }//GEN-LAST:event_mySQLDumpButtonActionPerformed

    private void jButton7help(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7help
        if (!ManualViewer.isShown) {
            ManualViewer viewer = new ManualViewer();
            viewer.showManual();
        }
        ManualViewer.goToPage(ManualBookmarks.APP_PREFS_DIALOG.getPage());
    }//GEN-LAST:event_jButton7help

    private void zeitzonenComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeitzonenComboboxActionPerformed
                
        System.out.println( "Aktuelle Zeitzone ist: " + TimeZone.getDefault() );
        Messages.showMessage( "Aktuelle Zeitzone ist: " + TimeZone.getDefault().getDisplayName() + "\n", true );
        
        if( zeitzonenCombobox.getSelectedIndex() == 0 )
        {            
            selectedTimezone = defaultTimezone;
            TimeZone.setDefault(defaultTimezone);
            System.out.println( "Setze Zeitzone Systemeinstellung: " + TimeZone.getDefault() );
            Messages.showMessage( "Setze Zeitzone Systemeinstellung\n", true );
        }       
        else if( zeitzonenCombobox.getSelectedIndex() == 1 )
        {            
            selectedTimezone = TimeZone.getTimeZone("UTC");
            TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
            System.out.println( "Setze Zeitzone: " + TimeZone.getDefault() );
            Messages.showMessage( "Setze Zeitzone UTC\n", true );
        }
    }//GEN-LAST:event_zeitzonenComboboxActionPerformed

    /**
     * Initializes the dialog elements according to the given properties
     *
     * @param props the properties to be used
     */
    private void loadProperties(Properties props) {
        SaveFolder_Field.setText(props.getProperty("DefaultSaveFolder"));
        mysqldumpLocation.setText(props.getProperty("MysqldumpLocation"));
        FieldComboBox.setSelectedIndex(Integer.parseInt(props.getProperty("ExportFieldSeparator")));
        DecComboBox.setSelectedIndex(Integer.parseInt(props.getProperty("ExportDecimalSeparator")));
        NumberFormatComboBox.setText(props.getProperty("ExportNumberFormat"));
        defaultUserTextField.setText(props.getProperty("DefaultUser"));
        defaultServerTextField.setText(props.getProperty("DefaultServer"));
        defaultServerPortTextField.setText(props.getProperty("DefaultServerPort"));
        defaultDBTextField.setText(props.getProperty("DefaultDB"));
        coverToleranceValue.setText(props.getProperty("CoverTolerance"));
        edgeToleranceValue.setText(props.getProperty("EdgeTolerance"));
        leaveEventsValue.setText(props.getProperty("LeaveEvents"));
        EncodingComboBox.setSelectedItem(props.getProperty("FileEncoding"));
        intervalValues.setText(props.getProperty("IntervalList"));
        ignoreValue.setText(props.getProperty("IgnoreValue").replace(".", ","));
        if (props.getProperty("UseEdgeTolerance").equals("1")) {
            useEdgeToleranceCheckbox.setSelected(true);
        } else {
            useEdgeToleranceCheckbox.setSelected(false);
        }
        if (props.getProperty("UseCoverTolerance").equals("1")) {
            useCoverToleranceCheckbox.setSelected(true);
        } else {
            useCoverToleranceCheckbox.setSelected(false);
        }
        if (props.getProperty("AutomaticCounterChange").equals("1")) {
            automaticCounterChangeCheckBox.setSelected(true);
        } else {
            automaticCounterChangeCheckBox.setSelected(false);
        }
        if (props.getProperty("CalcPartlyConsumptions").equals("1")) {
            partlyCheckBox.setSelected(true);
        } else {
            partlyCheckBox.setSelected(false);
        }
        if (props.getProperty("UseLeaveEvents").equals("1")) {
            useLeaveEventsCheckbox.setSelected(true);
        } else {
            useLeaveEventsCheckbox.setSelected(false);
        }
        if (props.getProperty("UseAntiAliasing").equals("0")) {
            antiAliasingCheckbox.setSelected(false);
        } else {
            antiAliasingCheckbox.setSelected(true);
        }
        if (props.getProperty("OutlineDragMode").equals("0")) {
            dragModeCheckbox.setSelected(false);
        } else {
            dragModeCheckbox.setSelected(true);
        }
        if (props.getProperty("DrawChartStamp").equals("0")) {
            drawChartStampCheckBox.setSelected(false);
        } else {
            drawChartStampCheckBox.setSelected(true);
        }
        if (props.getProperty("UseSensorIDForDisplay").equals("0")) {
            useSensorIDCeckBox.setSelected(false);
        } else {
            useSensorIDCeckBox.setSelected(true);
        }
        if (props.getProperty("UseIgnoreValue").equals("0")) {
            ignoreValueCheckbox.setSelected(false);
        } else {
            ignoreValueCheckbox.setSelected(true);
        }

        if (props.getProperty("UseSSHTunnel").equals("0")) {
            useSSHTunnelCheckBox.setSelected(false);
        } else {
            useSSHTunnelCheckBox.setSelected(true);
        }
        if (props.getProperty("AddBuildingName").equals("0")) {
            addBuildingnameWithAT.setSelected(false);
        } else {
            addBuildingnameWithAT.setSelected(true);
        }

        SSHServerTextField.setText(props.getProperty("SSHServerIP"));
        SSHServerPortTextField.setText(props.getProperty("SSHServerPort"));
        SSHTunnelEndpointTextField.setText(props.getProperty("SSHTunnelIP"));
        SSHTunnelEndpointPortTextField.setText(props.getProperty("SSHTunnelPort"));
        SSHLocalPortTextField.setText(props.getProperty("SSHLocalPort"));
        SSHUserTextField.setText(props.getProperty("SSHUser"));

        if (props.getProperty("Locale").equals("de_DE")) {
            languageChooser.setSelectedItem("Deutsch");
        } else {
            languageChooser.setSelectedItem("English");
        }
    }

    /**
     * Tests if the base folder in the dialog exists.<p> If not, the user will
     * be asked if it should be created.
     *
     * @return true if the folder exists or was created
     */
    private static boolean isValidFolder() {
        boolean valid = true;
        File f = new File(SaveFolder_Field.getText());
        if (!f.exists()) {
            if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("AppPrefsDialog.FOLDERMISSING") + "\n\n" + f.toString() + "\n\n" + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("AppPrefsDialog.existiert nicht") + "\n\n" + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("AppPrefsDialog.CREATEIT"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("AppPrefsDialog.Ordner_anlegen"), JOptionPane.YES_NO_OPTION)) {
                valid = ApplicationFolderManager.createBaseFolder();
            } else {
                valid = false;
            }
        }
        return valid;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox DecComboBox;
    private javax.swing.JComboBox EncodingComboBox;
    private javax.swing.JComboBox FieldComboBox;
    private javax.swing.JTextField NumberFormatComboBox;
    private javax.swing.JTextField SSHLocalPortTextField;
    private javax.swing.JTextField SSHServerPortTextField;
    private javax.swing.JTextField SSHServerTextField;
    private javax.swing.JTextField SSHTunnelEndpointPortTextField;
    private javax.swing.JTextField SSHTunnelEndpointTextField;
    private javax.swing.JTextField SSHUserTextField;
    private static javax.swing.JTextField SaveFolder_Field;
    private javax.swing.JCheckBox addBuildingnameWithAT;
    private javax.swing.JCheckBox antiAliasingCheckbox;
    protected javax.swing.JCheckBox automaticCounterChangeCheckBox;
    private javax.swing.JButton baseFolderButton;
    private javax.swing.JButton canclePropsButton;
    protected javax.swing.JTextField coverToleranceValue;
    private javax.swing.JTextField defaultDBTextField;
    private javax.swing.JTextField defaultServerPortTextField;
    private javax.swing.JTextField defaultServerTextField;
    private javax.swing.JTextField defaultUserTextField;
    private javax.swing.JCheckBox dragModeCheckbox;
    private javax.swing.JCheckBox drawChartStampCheckBox;
    protected javax.swing.JTextField edgeToleranceValue;
    protected javax.swing.JTextField ignoreValue;
    protected javax.swing.JCheckBox ignoreValueCheckbox;
    protected javax.swing.JTextField intervalValues;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JComboBox languageChooser;
    protected javax.swing.JTextField leaveEventsValue;
    private javax.swing.JButton mySQLDumpButton;
    private javax.swing.JTextField mysqldumpLocation;
    protected javax.swing.JCheckBox partlyCheckBox;
    private javax.swing.JButton savePropsButton;
    protected javax.swing.JCheckBox useCoverToleranceCheckbox;
    protected javax.swing.JCheckBox useEdgeToleranceCheckbox;
    protected javax.swing.JCheckBox useLeaveEventsCheckbox;
    private javax.swing.JCheckBox useSSHTunnelCheckBox;
    private javax.swing.JCheckBox useSensorIDCeckBox;
    private javax.swing.JComboBox zeitzonenCombobox;
    // End of variables declaration//GEN-END:variables

    /**
     * Creates a new {@link Properties} object and populates it with the
     * settings in the dialog elements.<br> After that the global properties are
     * replaced by these new properties. Some GUI elemnts will be updated when
     * chnagess were made in:
     * <ul><li>UseSensorIDForDisplay</li><li>DefaultSaveFolder</li><li>IntervalList</li></ul>
     * After that the properties will be writen to the file. (by calling
     * <code>saveProperties</code>)
     *
     * @throws HeadlessException
     */
    private void save() throws HeadlessException {
        Properties props = new Properties();

        NumberFormat nf = NumberFormat.getInstance(Locale.GERMAN);

        // append folder seperator if not already there
        if (SaveFolder_Field.getText().endsWith(File.separator)) {
            props.setProperty("DefaultSaveFolder", SaveFolder_Field.getText().trim());
        } else {
            props.setProperty("DefaultSaveFolder", SaveFolder_Field.getText().trim() + File.separator);
        }

        props.setProperty("MysqldumpLocation", mysqldumpLocation.getText().trim());
        props.setProperty("ExportFieldSeparator", Integer.toString(FieldComboBox.getSelectedIndex()));
        props.setProperty("ExportDecimalSeparator", Integer.toString(DecComboBox.getSelectedIndex()));
        props.setProperty("ExportNumberFormat", NumberFormatComboBox.getText().trim());
        props.setProperty("DefaultUser", defaultUserTextField.getText().trim());
        props.setProperty("DefaultDB", defaultDBTextField.getText().trim());
        props.setProperty("DefaultServer", defaultServerTextField.getText());
        props.setProperty("DefaultServerPort", defaultServerPortTextField.getText().trim());
        props.setProperty("CoverTolerance", coverToleranceValue.getText().trim());
        props.setProperty("EdgeTolerance", edgeToleranceValue.getText().trim());
        props.setProperty("LeaveEvents", leaveEventsValue.getText().trim());
        props.setProperty("FileEncoding", EncodingComboBox.getSelectedItem().toString());
        props.setProperty("IntervalList", intervalValues.getText().trim());
        props.setProperty("IgnoreValue", ignoreValue.getText() );

        if (useEdgeToleranceCheckbox.isSelected()) {
            props.setProperty("UseEdgeTolerance", "1");
        } else {
            props.setProperty("UseEdgeTolerance", "0");
        }
        if (useCoverToleranceCheckbox.isSelected()) {
            props.setProperty("UseCoverTolerance", "1");
        } else {
            props.setProperty("UseCoverTolerance", "0");
        }
        if (automaticCounterChangeCheckBox.isSelected()) {
            props.setProperty("AutomaticCounterChange", "1");
        } else {
            props.setProperty("AutomaticCounterChange", "0");
        }
        if (partlyCheckBox.isSelected()) {
            props.setProperty("CalcPartlyConsumptions", "1");
        } else {
            props.setProperty("CalcPartlyConsumptions", "0");
        }
        if (useLeaveEventsCheckbox.isSelected()) {
            props.setProperty("UseLeaveEvents", "1");
        } else {
            props.setProperty("UseLeaveEvents", "0");
        }
        if (antiAliasingCheckbox.isSelected()) {
            props.setProperty("UseAntiAliasing", "1");
        } else {
            props.setProperty("UseAntiAliasing", "0");
        }
        if (dragModeCheckbox.isSelected()) {
            props.setProperty("OutlineDragMode", "1");
            this.dm.setDragMode(JDesktopPane.LIVE_DRAG_MODE);
        } else {
            props.setProperty("OutlineDragMode", "0");
            this.dm.setDragMode(JDesktopPane.LIVE_DRAG_MODE);
        }
        if (drawChartStampCheckBox.isSelected()) {
            props.setProperty("DrawChartStamp", "1");
        } else {
            props.setProperty("DrawChartStamp", "0");
        }
        if (useSensorIDCeckBox.isSelected()) {
            props.setProperty("UseSensorIDForDisplay", "1");
        } else {
            props.setProperty("UseSensorIDForDisplay", "0");
        }
        if (addBuildingnameWithAT.isSelected()) {
            props.setProperty("AddBuildingName", "1");
        } else {
            props.setProperty("AddBuildingName", "0");
        }
        if (ignoreValueCheckbox.isSelected()) {
            props.setProperty("UseIgnoreValue", "1");
        } else {
            props.setProperty("UseIgnoreValue", "0");
        }

        if (useSSHTunnelCheckBox.isSelected()) {
            props.setProperty("UseSSHTunnel", "1");
        } else {
            props.setProperty("UseSSHTunnel", "0");
        }
        props.setProperty("SSHServerIP", SSHServerTextField.getText().trim());
        props.setProperty("SSHServerPort", SSHServerPortTextField.getText().trim());
        props.setProperty("SSHTunnelIP", SSHTunnelEndpointTextField.getText().trim());
        props.setProperty("SSHTunnelPort", SSHTunnelEndpointPortTextField.getText().trim());
        props.setProperty("SSHUser", SSHUserTextField.getText().trim());
        props.setProperty("SSHLocalPort", SSHLocalPortTextField.getText().trim());

        if (languageChooser.getSelectedItem().equals("Deutsch")) {
            props.setProperty("Locale", "de_DE");
        } else {
            props.setProperty("Locale", "en_US");
        }

        // setting global props to new props
        MoniSoft.getInstance().setApplicationProperties(props);

        // update some GUI elements wich could be affected by changes
        if (MoniSoft.getInstance().getDBConnector().isConnected()) {
            if (!oldProperties.getProperty("UseSensorIDForDisplay").equals(props.getProperty("UseSensorIDForDisplay")) || !oldProperties.getProperty("AddBuildingName").equals(props.getProperty("AddBuildingName"))) {
                this.gui.updateSensorSelectors(true);
            }
            if (!oldProperties.getProperty("DefaultSaveFolder").equals(props.getProperty("DefaultSaveFolder"))) {
                this.gui.setSavedChartCombobox(true);
            }
            if (!oldProperties.getProperty("IntervalList").equals(props.getProperty("IntervalList"))) {
                this.gui.setIntervalSelectors();
            }
        }

        try {
            if (saveProperties(true, true)) {
                dispose();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this.gui.getMainFrame(), ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("AppPrefsDialog.Die Einstellungen konnten nicht gespeichert werden"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("WARNUNG"), JOptionPane.WARNING_MESSAGE);
            Messages.showException(e);
        }
    }

    /**
     * Open a FileChoser for the base folder
     *
     * @throws HeadlessException
     */
    private void showFileChooser() throws HeadlessException {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setMultiSelectionEnabled(false);
        chooser.showOpenDialog(this.gui.getMainFrame());
        if (chooser.getSelectedFile() != null) {
            SaveFolder_Field.setText(chooser.getSelectedFile().toString() + File.separator);
        }
    }

    /**
     * Open a FileChoser for mysqldump
     *
     * @throws HeadlessException
     */
    private void showMySQLDumpFileChooser() throws HeadlessException {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setMultiSelectionEnabled(false);
        chooser.setFileFilter(new mysqldump_FileFilter());
        chooser.showOpenDialog(this.gui.getMainFrame());
        if (chooser.getSelectedFile() != null) {
            mysqldumpLocation.setText(chooser.getSelectedFile().toString());
        }
    }
}
