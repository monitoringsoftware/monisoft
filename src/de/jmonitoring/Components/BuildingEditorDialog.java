/*
 * SensorEditorDialog.java
 *
 * Created on 4. September 2008, 19:14
 */
package de.jmonitoring.Components;

import de.jmonitoring.References.ReferenceItemHolder;
import de.jmonitoring.References.ReferenceAddPanel;
import de.jmonitoring.SensorCollectionHandling.SensorCollectionHandler;
import de.jmonitoring.base.buildings.BuildingInformation;
import de.jmonitoring.base.buildings.BuildingProperties;
import de.jmonitoring.base.Messages;
import de.jmonitoring.base.sensors.SensorInformation;
import de.jmonitoring.help.ManualBookmarks;
import de.jmonitoring.help.ManualViewer;
import de.jmonitoring.References.ReferenceValue;
import java.awt.BorderLayout;
import java.awt.Component;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Locale;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.SwingUtilities;
import org.jdesktop.swingx.VerticalLayout;

/**
 *
 * @author togro
 */
public class BuildingEditorDialog extends javax.swing.JDialog {

    private BuildingProperties properties = new BuildingProperties();
    private BuildingProperties propertiesWorkon = new BuildingProperties(); // Mit diesen Properties wird gearbeitet und sie werden bei Bedarf am Ende übernommen
    private Component callingPanel;
    private boolean isNewMode;
    private boolean isEditable;
    private ReferenceAddPanel refAddPanel;
    private ReferenceItemHolder refHolder;
    public static final int TOP = 0;
    public static final int BOTTOM = 1;
    public static final int LEAVE = 2;

    /**
     * Creates new form BuildingEditorDialog
     */
    public BuildingEditorDialog(java.awt.Frame parent, boolean modal, Component caller, boolean editable, boolean newBuilding) {
        super(parent, modal);
        initComponents();
        refHolder = new ReferenceItemHolder(isEditable, this);
        refAddPanel = new ReferenceAddPanel(editable, this);
        setModalityType(ModalityType.APPLICATION_MODAL); // sorgt dafür, dass im aufrufenden Code erst fortgefahren wird wenn dieser Dialog beendet ist
        isNewMode = newBuilding;
        isEditable = editable;

        referencePanel.add(refAddPanel, BorderLayout.SOUTH);

        setConsumptioncategories();

//        DefaultListModel dlm = new DefaultListModel();
//        dlm.add(0, "Strom");
//        dlm.add(1, "Wärme");
//        dlm.add(2, "Wasser");
//        jList1.setModel(dlm);

        callingPanel = caller;

        if (!isEditable) {
            commitButton.setEnabled(false);
            activatorPanel.setEnabled(false);
            jButton1.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        BuildingTextField = new javax.swing.JTextField();
        DescriptionTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        StreetTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        CityTextField = new javax.swing.JTextField();
        PLZTextField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        ContactTextField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        PhoneTextField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        NetworkTextField = new javax.swing.JTextField();
        referencePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        consumtionCategoryPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        consumptionCategoryList = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        activatorPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        commitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setResizable(false);

        jPanel3.setBackground(new java.awt.Color(0, 102, 204));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle"); // NOI18N
        jLabel6.setText(bundle.getString("BuildingEditorDialog.jLabel6.text")); // NOI18N

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/question-frame.png"))); // NOI18N
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setFocusPainted(false);
        jButton7.setIconTextGap(0);
        jButton7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7help(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 278, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("BuildingEditorDialog.jPanel4.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9), new java.awt.Color(0, 0, 0))); // NOI18N

        jLabel13.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel13.setText(bundle.getString("BuildingEditorDialog.jLabel13.text")); // NOI18N

        BuildingTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), BuildingTextField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        DescriptionTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), DescriptionTextField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        jLabel14.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel14.setText(bundle.getString("BuildingEditorDialog.jLabel14.text")); // NOI18N

        jLabel15.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel15.setText(bundle.getString("BuildingEditorDialog.jLabel15.text")); // NOI18N

        StreetTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), StreetTextField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        jLabel16.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel16.setText(bundle.getString("BuildingEditorDialog.jLabel16.text")); // NOI18N

        jLabel17.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel17.setText(bundle.getString("BuildingEditorDialog.jLabel17.text")); // NOI18N

        CityTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), CityTextField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        PLZTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), PLZTextField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        jLabel18.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel18.setText(bundle.getString("BuildingEditorDialog.jLabel18.text")); // NOI18N

        ContactTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), ContactTextField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        jLabel19.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel19.setText(bundle.getString("BuildingEditorDialog.jLabel19.text")); // NOI18N

        PhoneTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), PhoneTextField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        jLabel20.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel20.setText(bundle.getString("BuildingEditorDialog.jLabel20.text")); // NOI18N

        NetworkTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), NetworkTextField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addGap(104, 104, 104)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DescriptionTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                            .addComponent(BuildingTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(PLZTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                                .addComponent(jLabel17))
                            .addComponent(jLabel18)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NetworkTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                            .addComponent(PhoneTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                            .addComponent(ContactTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                            .addComponent(CityTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                            .addComponent(StreetTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(BuildingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DescriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(StreetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(CityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PLZTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ContactTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PhoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NetworkTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        referencePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("BuildingEditorDialog.referencePanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9), new java.awt.Color(0, 0, 0))); // NOI18N
        referencePanel.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        referencePanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        consumtionCategoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("BuildingEditorDialog.consumtionCategoryPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9))); // NOI18N

        consumptionCategoryList.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        consumptionCategoryList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(consumptionCategoryList);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/pencil.png"))); // NOI18N
        jButton1.setMaximumSize(new java.awt.Dimension(20, 20));
        jButton1.setMinimumSize(new java.awt.Dimension(20, 20));
        jButton1.setPreferredSize(new java.awt.Dimension(20, 20));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout consumtionCategoryPanelLayout = new javax.swing.GroupLayout(consumtionCategoryPanel);
        consumtionCategoryPanel.setLayout(consumtionCategoryPanelLayout);
        consumtionCategoryPanelLayout.setHorizontalGroup(
            consumtionCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consumtionCategoryPanelLayout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
        );
        consumtionCategoryPanelLayout.setVerticalGroup(
            consumtionCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, consumtionCategoryPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(consumtionCategoryPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(referencePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(referencePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(consumtionCategoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );

        referencePanel.getAccessibleContext().setAccessibleName(bundle.getString("BEZUGSGRÖSSEN")); // NOI18N

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        activatorPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/cancel.png"))); // NOI18N
        cancelButton.setText(bundle.getString("BuildingEditorDialog.cancelButton.text")); // NOI18N
        cancelButton.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        activatorPanel.add(cancelButton);

        commitButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        commitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/accept.png"))); // NOI18N
        commitButton.setText(bundle.getString("BuildingEditorDialog.commitButton.text")); // NOI18N
        commitButton.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        commitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitButtonActionPerformed(evt);
            }
        });
        activatorPanel.add(commitButton);

        getContentPane().add(activatorPanel, java.awt.BorderLayout.PAGE_END);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    this.dispose();
}//GEN-LAST:event_cancelButtonActionPerformed

private void commitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitButtonActionPerformed
    // Wenn neues Gebäude angelegt werden soll oder der Name sich geändert hat: prüfen, ob Name und Schlüssel vorhanden
    if (isNewMode || !BuildingTextField.getText().trim().equals(propertiesWorkon.getBuildingName())) { // Name hat sich geändert
        // check if name is empty
        if (BuildingTextField.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("DER GEBÄUDENAME IST LEER. DIESE ANGABE IST ERFORDERLICH"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("BuildingEditorDialog.HINT"), JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // check if given building exists
        if (BuildingInformation.getBuildingIDFromName(BuildingTextField.getText().trim()) != null) {
            System.out.println(BuildingInformation.getBuildingIDFromName(BuildingTextField.getText().trim()));
            JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("BuildingEditorDialog.BUILDINGNAME") + " '" + BuildingTextField.getText().trim() + "' " + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("BuildingEdiotorDialog.BUILDINGEXISTS"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("BuildingEditorDialog.HINT"), JOptionPane.INFORMATION_MESSAGE);
            return;
        }
    }

    // Daten im Dialogfeld in temporäre Properties schreiben
    propertiesWorkon.setBuildingName(BuildingTextField.getText().trim()); // jeweils die Strings mit trim von evtl. führenden oder nachfolgenden Leerzeichen befreien
    propertiesWorkon.setBuildingDescription(DescriptionTextField.getText().trim());
    propertiesWorkon.setStreet(StreetTextField.getText().trim());
    propertiesWorkon.setCity(CityTextField.getText().trim());
    propertiesWorkon.setContact(ContactTextField.getText().trim());
    propertiesWorkon.setNetworking(NetworkTextField.getText().trim());


    // PLZ  in Editor in eine gültige Zahl verwandeln
    if (!PLZTextField.getText().isEmpty()) { // wenn das Feld gefüllt ist
        NumberFormat nf = NumberFormat.getInstance(Locale.GERMAN);
        try {
            propertiesWorkon.setPlz(nf.parse(PLZTextField.getText()).intValue());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SIE HABEN KEINE GÜLTIGE PLZ ANGEGEBEN."));
            return;
        }
    }

    // Telefon in Editor in eine gültige Zahl verwandeln
    if (!PhoneTextField.getText().isEmpty()) { // wenn das Feld gefüllt ist
        NumberFormat nf = NumberFormat.getInstance(Locale.GERMAN);
        try {
            propertiesWorkon.setPhone(nf.parse(PhoneTextField.getText()).longValue());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("DIE TELEFONNUMMER IST UNGÜLTIG."));
            return;
        }
    }

    Integer id;
    if (!isNewMode) { // es war ein bestehendes gebäude
        id = propertiesWorkon.getBuildingID();
        // Die Bezugsgrößen des Gebäudes aktualisieren, wird dirket in die DB eingetragen
        BuildingInformation.updateBuildingReferences(refHolder.getIncludedReferences(), id);
        if (callingPanel instanceof BuildingTablePanel) {
            ((BuildingTablePanel) callingPanel).replaceBuilding(this.properties, this.propertiesWorkon);
        } else if (callingPanel instanceof BuildingProfile) {
            ((BuildingProfile) callingPanel).replaceBuilding(this.propertiesWorkon);
        }
    } else { // neues Gebäude
        // Gebäude anlegen, wird direkt in die DB eingetragen
        id = BuildingInformation.createNewBuilding(this.propertiesWorkon);
        BuildingInformation.updateBuildingReferences(refHolder.getIncludedReferences(), id);
    }

    this.dispose();
}//GEN-LAST:event_commitButtonActionPerformed

private void jButton7help(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7help
    if (!ManualViewer.isShown) {
        ManualViewer viewer = new ManualViewer();
        viewer.showManual();
    }
    ManualViewer.goToPage(ManualBookmarks.BUILDING_EDITOR.getPage());
}//GEN-LAST:event_jButton7help

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    CompareValueMappingEditor c = new CompareValueMappingEditor(null, isEditable);
    c.setLocationRelativeTo(this);
    c.setVisible(true);
    // c ist APPLICATION_MODAL, es wird hier gewartet bis das Dialogfenster geschlossen ist
    HashSet<String> usageStrings = BuildingInformation.getUsageCategoryNames(propertiesWorkon.getBuildingID());
    ArrayList<Integer> idList = new ArrayList<Integer>();
    for (String usage : usageStrings) {
        idList.add(SensorCollectionHandler.getCollectionID(usage));
    }
//    propertiesWorkon.setSensorCollecions(idList);
    setConsumptioncategories();
}//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Belegt die Element im Dialogfeld
     *
     * @param props
     */
    public void setFields(BuildingProperties props) {
        refHolder.setLayout(new VerticalLayout(2));
        this.properties = props; // Originalprops übernehmen
        this.propertiesWorkon = deepCopy(props); // Arbeitskopie erstellen die im Dialog verändert wird

        if (props != null) {
            BuildingTextField.setText(props.getBuildingName());
            DescriptionTextField.setText(props.getBuildingDescription());
            StreetTextField.setText(props.getStreet());
            CityTextField.setText(props.getCity());
            NetworkTextField.setText(props.getNetworking());
            ContactTextField.setText(props.getContact());

            PLZTextField.setText(String.valueOf(props.getPlz()).replace(".", ",").equals("null") ? "" : String.valueOf(props.getPlz()).replace(".", ","));
            PhoneTextField.setText(String.valueOf(props.getPhone()).replace(".", ",").equals("null") ? "" : String.valueOf(props.getPhone()).replace(".", ","));

            //activeCheckBox.setSelected(props.isActive());

            // Referenzpanel belegen mit den Referenzen für das Gebäude
            if (props.getBuildingID() != 0) {
                for (ReferenceValue ref : BuildingInformation.getBuildingReferences(props.getBuildingID())) {
                    refHolder.addReference(ref);
                }
            }
        }
        jScrollPane1.setViewportView(refHolder);

        setConsumptioncategories();
    }

    public void setRefAddPanel(ReferenceValue ref) {
        refAddPanel.setFields(ref);
    }

    public boolean isEditable() {
        return isEditable;
    }

    public BuildingProperties getCurrentProperties() {
        return propertiesWorkon;
    }

    public ReferenceItemHolder getReferenceItemHolder() {
        return refHolder;
    }

    /**
     * Holt alle Verbrauchskategorien an denen das Gebäude beteiligt ist und
     * bestückt die Jlist
     */
    public void setConsumptioncategories() {
        String virtual = "";
        DefaultListModel model = new DefaultListModel();
        HashSet<String> categorySet = BuildingInformation.getUsageCategoryNames(properties.getBuildingID()); // Holen der UsageCategories aus der DB
        for (String category : categorySet) {
            HashSet<Integer> categorySensors = SensorCollectionHandler.getSensorsForCollection(SensorCollectionHandler.getCollectionID(category));
            for (Integer sensorID : categorySensors) {
                if (SensorInformation.getSensorProperties(sensorID).getBuildingID() == properties.getBuildingID()) {
                    if (SensorInformation.getSensorProperties(sensorID).isVirtual()) {
                        virtual = "<br>(" + SensorInformation.getSensorProperties(sensorID).getVirtualDefinition() + ")";
                    } else {
                        virtual = "";
                    }
                    model.addElement("<html><body><table><tr><td width = 120><b>" + category + ":</b></td><td><b>" + SensorInformation.getDisplayName(sensorID) + " (" + SensorInformation.getSensorProperties(sensorID).getSensorDescription() + ")" + "</b>" + virtual + "</td></tr></table></body></html>");
                }
            }
        }

        consumptionCategoryList.setModel(model);
    }

    /**
     * ReferenceItemHolder aktualisieren und Scrollpane an das Ende oder den
     * Anfang scrollen oder so lassen
     */
    public void updateScrollPane(int l) {
        final int location = l;
        refHolder.revalidate();

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jScrollPane1.getViewport().repaint();

                JScrollBar scrollBar = jScrollPane1.getVerticalScrollBar();
                if (location == BOTTOM) {
                    scrollBar.setValue(scrollBar.getMaximum());
                } else if (location == TOP) {
                    scrollBar.setValue(scrollBar.getMinimum());
                } else if (location == LEAVE) {
                    // Was tun? Lassen?
                }
            }
        });
    }

    /**
     *
     * @param list
     * @return
     */
    private BuildingProperties deepCopy(BuildingProperties list) {

        // serialize ArrayList into byte array
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream(100);
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(list);
            byte buf[] = baos.toByteArray();
            oos.close();

            // deserialize byte array into ArrayList
            ByteArrayInputStream bais = new ByteArrayInputStream(buf);
            ObjectInputStream ois = new ObjectInputStream(bais);
            BuildingProperties newlist = (BuildingProperties) ois.readObject();
            ois.close();

            return newlist;
        } catch (Exception e) {
            Messages.showException(e);
        }
        return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BuildingTextField;
    private javax.swing.JTextField CityTextField;
    private javax.swing.JTextField ContactTextField;
    private javax.swing.JTextField DescriptionTextField;
    private javax.swing.JTextField NetworkTextField;
    private javax.swing.JTextField PLZTextField;
    private javax.swing.JTextField PhoneTextField;
    private javax.swing.JTextField StreetTextField;
    private javax.swing.JPanel activatorPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton commitButton;
    private javax.swing.JList consumptionCategoryList;
    private javax.swing.JPanel consumtionCategoryPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel referencePanel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
