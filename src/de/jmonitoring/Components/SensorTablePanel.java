/*
 * SensorTablePanel.java
 *
 * Created on 3. September 2008, 13:43
 */
package de.jmonitoring.Components;

import de.jmonitoring.TableModels.SensorTableModel;
import de.jmonitoring.base.buildings.BuildingInformation;
import de.jmonitoring.base.buildings.BuildingProperties;
import de.jmonitoring.base.MainApplication;
import de.jmonitoring.base.Messages;
import de.jmonitoring.base.MoniSoft;
import de.jmonitoring.base.sensors.SensorInformation;
import de.jmonitoring.base.sensors.SensorProperties;
import de.jmonitoring.utils.UnitCalulation.UnitInformation;
import de.jmonitoring.help.ManualBookmarks;
import de.jmonitoring.help.ManualViewer;
import de.jmonitoring.utils.MyColumnFactory;
import de.jmonitoring.utils.UnitCalulation.Unit;
import de.jmonitoring.utils.tablecellrenderer.DoubleCellRenderer;
import de.jmonitoring.utils.tablecellrenderer.IntegerCellRenderer;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.print.PrinterException;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import javax.swing.*;
import javax.swing.border.LineBorder;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import org.jdesktop.swingx.decorator.*;
import org.jdesktop.swingx.table.NumberEditorExt;

/**
 *
 * @author togro
 */
public class SensorTablePanel extends javax.swing.JPanel {

    private SensorTableModel model; // = new SensorTableModel();
    private boolean hasChanges = false;
    private ArrayList<SensorProperties> localSensorList;
    private String popObject;  // Objekt auf dem das KontextPopup aufgerufen wurde (String des SensorNamens)
    private HashSet<Integer> changedSensorsIDs = new HashSet<Integer>();
    private HashSet<Integer> deletedSensorsIDs = new HashSet<Integer>();
    private boolean confirmed = false;
    private final MainApplication gui;
//    TableRowSorter<TableModel> sorter;

    /**
     * Creates new form SensorTablePanel
     */
    public SensorTablePanel(MainApplication gui) {
        super();
        this.gui = gui;
        initComponents();
        setFilterSelector();
        setTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPopupMenu1 = new javax.swing.JPopupMenu();
        ShowOrEditMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        confirmDialog = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        changeList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        deleteList = new javax.swing.JList();
        deleteDataCheckBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        FilterPanel = new javax.swing.JPanel();
        TabelFilter = new javax.swing.JTextField();
        TabelFilterButton = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        FilterColumn = new javax.swing.JComboBox();
        jLabel31 = new javax.swing.JLabel();
        revokeButton = new javax.swing.JButton();
        lockToggleButton = new javax.swing.JToggleButton();
        printTableButton = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        tableScrollPane = new javax.swing.JScrollPane();
        table = new org.jdesktop.swingx.JXTable();
        jPanel1 = new javax.swing.JPanel();
        savePropertyTableButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        ShowOrEditMenuItem.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle"); // NOI18N
        ShowOrEditMenuItem.setLabel(bundle.getString("SensorTablePanel.ShowOrEditMenuItem.label")); // NOI18N
        ShowOrEditMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowOrEditMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(ShowOrEditMenuItem);

        deleteMenuItem.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        deleteMenuItem.setText(bundle.getString("SensorTablePanel.deleteMenuItem.text")); // NOI18N
        deleteMenuItem.setEnabled(false);
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(deleteMenuItem);

        confirmDialog.setTitle(bundle.getString("SensorTablePanel.confirmDialog.title")); // NOI18N
        confirmDialog.setAlwaysOnTop(true);
        confirmDialog.setMinimumSize(new java.awt.Dimension(730, 450));
        confirmDialog.setModal(true);
        confirmDialog.setResizable(false);

        changeList.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        changeList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(changeList);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel1.setText(bundle.getString("SensorTablePanel.jLabel1.text")); // NOI18N

        jButton2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/accept.png"))); // NOI18N
        jButton2.setText(bundle.getString("SensorTablePanel.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/cancel.png"))); // NOI18N
        jButton4.setText(bundle.getString("SensorTablePanel.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel2.setText(bundle.getString("SensorTablePanel.jLabel2.text")); // NOI18N

        deleteList.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        deleteList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(deleteList);

        deleteDataCheckBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        deleteDataCheckBox.setText(bundle.getString("SensorTablePanel.deleteDataCheckBox.text")); // NOI18N

        jLabel3.setText(bundle.getString("SensorTablePanel.jLabel3.text")); // NOI18N

        javax.swing.GroupLayout confirmDialogLayout = new javax.swing.GroupLayout(confirmDialog.getContentPane());
        confirmDialog.getContentPane().setLayout(confirmDialogLayout);
        confirmDialogLayout.setHorizontalGroup(
            confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(confirmDialogLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                        .addGap(492, 492, 492))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, confirmDialogLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(211, 211, 211))
                    .addGroup(confirmDialogLayout.createSequentialGroup()
                        .addGroup(confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(confirmDialogLayout.createSequentialGroup()
                        .addComponent(deleteDataCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        confirmDialogLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

        confirmDialogLayout.setVerticalGroup(
            confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2)
                    .addComponent(deleteDataCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        confirmDialogLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

        setLayout(new java.awt.BorderLayout());

        FilterPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        FilterPanel.setMaximumSize(new java.awt.Dimension(32767, 23));
        FilterPanel.setMinimumSize(new java.awt.Dimension(100, 23));

        TabelFilter.setFont(new java.awt.Font("SansSerif", 0, 9)); // NOI18N
        TabelFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TabelFilterActionPerformed(evt);
            }
        });

        TabelFilterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/funnel.png"))); // NOI18N
        TabelFilterButton.setToolTipText(bundle.getString("SensorTablePanel.TabelFilterButton.toolTipText")); // NOI18N
        TabelFilterButton.setMaximumSize(new java.awt.Dimension(20, 20));
        TabelFilterButton.setMinimumSize(new java.awt.Dimension(20, 20));
        TabelFilterButton.setPreferredSize(new java.awt.Dimension(20, 20));
        TabelFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TabelFilterButtonActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel32.setText(bundle.getString("SensorTablePanel.jLabel32.text")); // NOI18N

        FilterColumn.setBackground(new java.awt.Color(255, 255, 255));
        FilterColumn.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        FilterColumn.setMinimumSize(new java.awt.Dimension(61, 20));
        FilterColumn.setPreferredSize(new java.awt.Dimension(61, 20));

        jLabel31.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel31.setText(bundle.getString("SensorTablePanel.jLabel31.text")); // NOI18N

        revokeButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        revokeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/arrow_undo.png"))); // NOI18N
        revokeButton.setText(bundle.getString("SensorTablePanel.revokeButton.text")); // NOI18N
        revokeButton.setToolTipText(bundle.getString("SensorTablePanel.revokeButton.toolTipText")); // NOI18N
        revokeButton.setMaximumSize(new java.awt.Dimension(120, 22));
        revokeButton.setMinimumSize(new java.awt.Dimension(120, 22));
        revokeButton.setPreferredSize(new java.awt.Dimension(120, 22));
        revokeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revokeButtonActionPerformed(evt);
            }
        });

        lockToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/lock.png"))); // NOI18N
        lockToggleButton.setToolTipText(bundle.getString("SensorTablePanel.lockToggleButton.toolTipText")); // NOI18N
        lockToggleButton.setBorder(null);
        lockToggleButton.setBorderPainted(false);
        lockToggleButton.setContentAreaFilled(false);
        lockToggleButton.setFocusPainted(false);
        lockToggleButton.setMaximumSize(new java.awt.Dimension(131, 20));
        lockToggleButton.setMinimumSize(new java.awt.Dimension(131, 20));
        lockToggleButton.setPreferredSize(new java.awt.Dimension(131, 20));
        lockToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/lock-unlock.png"))); // NOI18N
        lockToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockToggleButtonActionPerformed(evt);
            }
        });

        printTableButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/printer.png"))); // NOI18N
        printTableButton.setToolTipText(bundle.getString("SensorTablePanel.printTableButton.toolTipText")); // NOI18N
        printTableButton.setMaximumSize(new java.awt.Dimension(20, 20));
        printTableButton.setMinimumSize(new java.awt.Dimension(20, 20));
        printTableButton.setPreferredSize(new java.awt.Dimension(20, 20));
        printTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printTableButtonActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/question-frame.png"))); // NOI18N
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setFocusPainted(false);
        jButton7.setIconTextGap(0);
        jButton7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7help(evt);
            }
        });

        javax.swing.GroupLayout FilterPanelLayout = new javax.swing.GroupLayout(FilterPanel);
        FilterPanel.setLayout(FilterPanelLayout);
        FilterPanelLayout.setHorizontalGroup(
            FilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FilterPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FilterColumn, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel32)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TabelFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TabelFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(printTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lockToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(revokeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7))
        );
        FilterPanelLayout.setVerticalGroup(
            FilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FilterPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(FilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(FilterColumn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32)
                    .addComponent(TabelFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TabelFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lockToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(revokeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31)
                    .addComponent(printTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        FilterPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {TabelFilterButton, lockToggleButton, revokeButton});

        add(FilterPanel, java.awt.BorderLayout.PAGE_START);

        tableScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        tableScrollPane.setForeground(new java.awt.Color(0, 0, 0));
        tableScrollPane.setMinimumSize(new java.awt.Dimension(500, 500));
        tableScrollPane.setViewportView(table);

        add(tableScrollPane, java.awt.BorderLayout.CENTER);

        jPanel1.setToolTipText(bundle.getString("SensorTablePanel.jPanel1.toolTipText")); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 35));

        savePropertyTableButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        savePropertyTableButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/accept.png"))); // NOI18N
        savePropertyTableButton.setText(bundle.getString("SensorTablePanel.savePropertyTableButton.text")); // NOI18N
        savePropertyTableButton.setToolTipText(bundle.getString("SensorTablePanel.savePropertyTableButton.toolTipText")); // NOI18N
        savePropertyTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePropertyTableButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/cancel.png"))); // NOI18N
        cancelButton.setText(bundle.getString("SensorTablePanel.cancelButton.text")); // NOI18N
        cancelButton.setToolTipText(bundle.getString("SensorTablePanel.cancelButton.toolTipText")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/delete.png"))); // NOI18N
        jButton1.setText(bundle.getString("SensorTablePanel.jButton1.text")); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, lockToggleButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jButton1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/add.png"))); // NOI18N
        jButton3.setText(bundle.getString("SensorTablePanel.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSensorAction(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 254, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addGap(10, 10, 10)
                .addComponent(savePropertyTableButton)
                .addGap(6, 6, 6))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cancelButton)
                        .addComponent(jButton3)
                        .addComponent(jButton1))
                    .addComponent(savePropertyTableButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_END);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

private void TabelFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TabelFilterButtonActionPerformed
    filterTable();
}//GEN-LAST:event_TabelFilterButtonActionPerformed

private void lockToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockToggleButtonActionPerformed
    if (lockToggleButton.isSelected()) {
        setLockTable(false);
    } else {
        setLockTable(true);
    }
}//GEN-LAST:event_lockToggleButtonActionPerformed

    private void filterTable() {
        int matchFlags = java.util.regex.Pattern.CASE_INSENSITIVE + java.util.regex.Pattern.UNICODE_CASE;
        int col = table.getColumn(FilterColumn.getSelectedItem().toString()).getModelIndex();
        table.setFilters(new FilterPipeline(new Filter[]{new PatternFilter(".*" + TabelFilter.getText() + ".*", matchFlags, col)}));
    }

    /**
     * Setzt das {@link SensorTableModel} auf die globale SensorListe zurück und
     * aktualisiert die Tabelle
     */
    private void modelReset() {
        // TODO: Abfrage ob Änderungen verworfen werden sollen
        setTable();
        table.revalidate();
    }

    /**
     * Kopiert die lokale (evtl. geänderte) Kopie der Sensorliste auf die
     * globale Sensorliste.<br> Die aktualisierten Änderungen werden auch in die
     * Datenbank übernommen.
     *
     * @param evt
     */
private void savePropertyTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePropertyTableButtonActionPerformed
    // Schreiben in die DB
    SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
            confirmed = false;
            DefaultListModel deleteModel = new DefaultListModel();
            DefaultListModel changeModel = new DefaultListModel();

            if (!hasChanges) {
                return;
            }

            for (Integer i : deletedSensorsIDs) {
                deleteModel.addElement(i + " " + SensorInformation.getSensorProperties(i).getSensorName() + " " + "(" + SensorInformation.getSensorProperties(i).getSensorDescription() + ")");
            }
            deleteList.setModel(deleteModel);

            for (Integer i : changedSensorsIDs) {
                changeModel.addElement(i + " " + SensorInformation.getSensorProperties(i).getSensorName() + " " + "(" + SensorInformation.getSensorProperties(i).getSensorDescription() + ")");
            }
            changeList.setModel(changeModel);

            confirmDialog.setLocationRelativeTo(table.getParent());
            confirmDialog.setVisible(true);
            confirmDialog.toFront();

            if (!confirmed) { // if not confirmed cancel operation
                setTable(); // reset table
                return;
            }

            // wenn es Messpunkte zum löschen gibt
            HashMap<Integer, Integer> deletedMap;
            if (!deletedSensorsIDs.isEmpty()) {
                for (Integer id : deletedSensorsIDs) {
                    deletedMap = SensorInformation.deleteSensor(id, deleteDataCheckBox.isSelected(), SensorTablePanel.this.gui);
                    if (deletedMap != null) {
                        Messages.showMessage("Lösche Messpunkt (" + SensorInformation.getSensorProperties(id).getSensorID() + ") " + SensorInformation.getSensorProperties(id).getSensorName() + ":\n", true);
                        Messages.showMessage("\t" + deletedMap.get(SensorInformation.NUM_DELETED_DATA) + " " + "Rohdatenpunkte gelöscht" + "\n", true);
                        Messages.showMessage("\t" + deletedMap.get(SensorInformation.NUM_DELETED_MONTHLY) + " " + "Vorkommen in Monatsdaten gelöscht" + "\n", true);
                        Messages.showMessage("\t" + deletedMap.get(SensorInformation.NUM_DELETED_FACTORS) + " " + "Faktoren gelöscht" + "\n", true);
                        if (deletedMap.get(SensorInformation.NUM_DELETED_WEATHER) > 0) {
                            Messages.showMessage("\t" + "Messpunkt aus Wetterzuordnung gelöscht" + "\n", true);
                        }
                        Messages.showMessage("\t" + deletedMap.get(SensorInformation.NUM_DELETED_CHANGES) + " " + "Zählerwechsel gelöscht" + "\n", true);
                        Messages.showMessage("\t" + deletedMap.get(SensorInformation.NUM_DELETED_COLLECTIONS) + " " + "Vorkommen in Messpunktsammlungen gelöscht" + "\n", true);
                    }
                }
                Messages.showMessage(deletedSensorsIDs.size() + " " + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorTablePanel.MESSPUNKT AUS DER DATENBANK GELÖSCHT") + "\n", true);
                deletedSensorsIDs.clear();
            }


            // Globale SensorListe ersetzen
            SensorInformation.setSensorList(deepCopy(localSensorList));
            for (Integer id : changedSensorsIDs) {
                SensorInformation.writeSensorProperty(id);
            }
            changedSensorsIDs.clear();
            gui.updateSensorSelectors(true);  // Alle Auswahllisten mit der neuen Liste aktualisieren
            hasChanges = false; // Änderungsstatus zurücksetzen
        }
    });
    cancelButton.setEnabled(true);
    cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorTablePanel.SCHLIESSEN"));
    savePropertyTableButton.setEnabled(false); // Speichern-Knopf deaktivieren
}//GEN-LAST:event_savePropertyTableButtonActionPerformed

    /**
     * Bricht die Bearbeitung des aktuellen Dialogs ab. Bei veränderter
     * Sensorliste erfolgt eine Abfrage
     */
    private void close() {
        if (hasChanges && JOptionPane.showConfirmDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorTablePanel.CHANGESLOST") + "\n", java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorTablePanel.FRAGE"), JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
            return; // nicht abgebrochen
        } else {
            table = null;
            model = null;
            changedSensorsIDs = null;
            localSensorList = null;
            this.gui.disposeIFrame((JInternalFrame) this.getParent().getParent().getParent().getParent());
        }
    }

    /**
     * Abbrechen-Knopf gedrückt
     *
     * @param evt
     */
private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    close();
}//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Zurücksetzen-Knopf wurde gedrückt
     *
     * @param evt
     */
private void revokeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revokeButtonActionPerformed
    modelReset();
}//GEN-LAST:event_revokeButtonActionPerformed

private void ShowOrEditMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowOrEditMenuItemActionPerformed
    SensorEditorDialog editor = new SensorEditorDialog(this.gui, true, this, lockToggleButton.isSelected(), false);
    editor.setLocationRelativeTo(this);
    editor.setFields(getLocalSensorProperties(popObject));
    editor.setVisible(true);
}//GEN-LAST:event_ShowOrEditMenuItemActionPerformed

private void newSensorAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSensorAction
    SensorEditorDialog dialog = new SensorEditorDialog(this.gui, true, null, true, true);
    dialog.setLocationRelativeTo(this);
    dialog.setVisible(true);
    modelReset();
}//GEN-LAST:event_newSensorAction

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    // Alle gewählten Messpunkte aus den lokalen Props Löschen und Tabelle aktualisieren
    boolean b = false;
    for (int i = 0; i < table.getSelectedRows().length; i++) {
        b = localSensorList.remove(getLocalSensorProperties((String) table.getModel().getValueAt(table.convertRowIndexToModel(table.getSelectedRows()[i]), 1))) || b;
        deletedSensorsIDs.add(SensorInformation.getSensorIDFromNameORKey((String) table.getModel().getValueAt(table.convertRowIndexToModel(table.getSelectedRows()[i]), 1)));
//        System.out.println("delete " + SensorInformation.getSensorIDFromNameORKey((String) table.getModel().getValueAt(table.convertRowIndexToModel(table.getSelectedRows()[i]), 1)));
    }

    updateTable(false, b);
}//GEN-LAST:event_jButton1ActionPerformed

private void printTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printTableButtonActionPerformed
    MessageFormat headerForm = new MessageFormat(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorTablePanel.SENSORLIST") + " " + MoniSoft.getInstance().getDBConnector().getDBName());
    MessageFormat footerForm = new MessageFormat(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorTablePanel.PAGE") + " {0}");
    try {
        table.print(JTable.PrintMode.FIT_WIDTH, headerForm, footerForm, true, null, true);
    } catch (PrinterException ex) {
        Messages.showException(ex);
        Messages.showException(ex);
        Messages.showMessage(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorTablePanel.FEHLER BEIM DRUCKEN. BITTE DRUCKER ÜBERPRÜFEN"), true);
    }
}//GEN-LAST:event_printTableButtonActionPerformed

private void TabelFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TabelFilterActionPerformed
    filterTable();
}//GEN-LAST:event_TabelFilterActionPerformed

private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
    // den gewählten Messpunkt aus den lokalen Props Löschen und Tabelle aktualisieren
    boolean b = localSensorList.remove(getLocalSensorProperties(popObject));
//    System.out.println("delete single sensor " + popObject);
    deletedSensorsIDs.add(SensorInformation.getSensorIDFromNameORKey(popObject));
    updateTable(false, b);
}//GEN-LAST:event_deleteMenuItemActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        confirmDialog.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        confirmed = true;
        confirmDialog.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton7help(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7help
        if (!ManualViewer.isShown) {
            ManualViewer viewer = new ManualViewer();
            viewer.showManual();
        }
        ManualViewer.goToPage(ManualBookmarks.SENSOR_TABLE.getPage());
    }//GEN-LAST:event_jButton7help

    /**
     * Liefert die (lokalen) <link>SensorProperties</link> des übergebenen
     * Messpunkts
     *
     * @param sensor
     */
    public SensorProperties getLocalSensorProperties(String sensor) {
        SensorProperties props = null;
        Iterator it = localSensorList.iterator();
        while (it.hasNext()) {
            props = (SensorProperties) it.next();
            if (props.getSensorName().equals(sensor)) {
                break;
            }
        }
        return props;
    }

    private void setFilterSelector() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement(java.util.ResourceBundle.getBundle("de/jmonitoring/TableModels/Bundle").getString("NAME"));
        model.addElement(java.util.ResourceBundle.getBundle("de/jmonitoring/TableModels/Bundle").getString("DESCRIPTION"));
        model.addElement(java.util.ResourceBundle.getBundle("de/jmonitoring/TableModels/Bundle").getString("KEY"));
        model.addElement(java.util.ResourceBundle.getBundle("de/jmonitoring/TableModels/Bundle").getString("BUILDING"));
        model.addElement(java.util.ResourceBundle.getBundle("de/jmonitoring/TableModels/Bundle").getString("UNIT"));
        model.addElement(java.util.ResourceBundle.getBundle("de/jmonitoring/TableModels/Bundle").getString("FACTOR"));
        model.addElement(java.util.ResourceBundle.getBundle("de/jmonitoring/TableModels/Bundle").getString("MEDIA"));
        
        FilterColumn.setModel(model);
    }

    /**
     * Erstellt ein neues {@link SensorTableModel} für die Anzeige mit JXTable
     * im Editor. Dazu wird die globale Sensorliste auf eine lokale Arbeitskopie
     * kopiert.<p>
     */
    private void setTable() {
        localSensorList = deepCopy(SensorInformation.getSensorList());
        deletedSensorsIDs.clear();
        changedSensorsIDs.clear();
        updateTable(true, false);
    }

    /**
     * Erstellt ein neues {@link SensorTableModel} für die Anzeige mit JXTable
     * im Editor. Dazu wird die globale Sensorliste auf eine lokale Arbeitskopie
     * kopiert.<p>
     *
     */
    private void updateTable(boolean locked, boolean changed) {
        // Lokale Arbeitskopie
        model = new SensorTableModel();
        for (int i = 0; i < localSensorList.size(); i++) {
            model.addSensor(localSensorList.get(i));
        }

        hasChanges = changed;
        savePropertyTableButton.setEnabled(hasChanges);
        cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorTablePanel.SCHLIESSEN"));
        table.setColumnFactory(new MyColumnFactory());
        
        table.setModel(model);

        table.packAll();

        // Setzen der Editoren
        JComboBox unitCombobox = new JComboBox();
        for (Unit u : UnitInformation.getUnitList().values()) {
            unitCombobox.addItem(u.getUnit());
        }

        JComboBox buildingCombobox = new JComboBox();
        for (BuildingProperties building : BuildingInformation.getBuildingList()) {
            buildingCombobox.addItem(building);
        }

        unitCombobox.setFont(new java.awt.Font("Dialog", 0, 10));
        buildingCombobox.setFont(new java.awt.Font("Dialog", 0, 10));
        table.getColumn(2).setCellEditor(new org.jdesktop.swingx.autocomplete.ComboBoxCellEditor(buildingCombobox));
        table.getColumn(3).setCellEditor(new org.jdesktop.swingx.autocomplete.ComboBoxCellEditor(unitCombobox));
        table.getColumn(4).setCellEditor(new NumberEditorExt(new DecimalFormat("0.#############")));
        table.getColumn(4).setCellRenderer(new DoubleCellRenderer(new DecimalFormat("0.############")));
        table.getColumn(9).setCellEditor(new NumberEditorExt(new DecimalFormat("0")));
        table.getColumn(9).setCellRenderer(new IntegerCellRenderer(new DecimalFormat("0")));
        table.getColumn(10).setCellEditor(new NumberEditorExt(new DecimalFormat("0")));
        table.getColumn(10).setCellRenderer(new IntegerCellRenderer(new DecimalFormat("0")));
        table.getColumn(11).setCellEditor(new NumberEditorExt(new DecimalFormat("0")));
        table.getColumn(11).setCellRenderer(new IntegerCellRenderer(new DecimalFormat("0")));
        table.getColumn(12).setCellEditor(new NumberEditorExt(new DecimalFormat("0")));
        table.getColumn(12).setCellRenderer(new IntegerCellRenderer(new DecimalFormat("0")));
        table.getColumn(13).setCellEditor(new NumberEditorExt(new DecimalFormat("0")));
        table.getColumn(13).setCellRenderer(new IntegerCellRenderer(new DecimalFormat("0")));
        table.getColumn(14).setCellEditor(new NumberEditorExt(new DecimalFormat("0")));
        table.getColumn(14).setCellRenderer(new IntegerCellRenderer(new DecimalFormat("0")));
        table.getColumn(15).setCellEditor(new NumberEditorExt(new DecimalFormat("0")));
        table.getColumn(15).setCellRenderer(new IntegerCellRenderer(new DecimalFormat("0")));
        
        table.setFont(new java.awt.Font("Dialog", 0, 9));
        table.setColumnControlVisible(true);
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        table.packAll();
        table.setHighlighters(HighlighterFactory.createSimpleStriping());
        table.addHighlighter(new ColorHighlighter(HighlightPredicate.ROLLOVER_ROW, Color.getHSBColor(60f, 20f, 100f), Color.BLACK));

        setLockTable(locked);
        table.addMouseListener(new PopupListener());

        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                changedSensorsIDs.add((Integer) model.getValueAt(e.getFirstRow(), 0));
                hasChanges = true;
                savePropertyTableButton.setEnabled(true);
                cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorTablePanel.ABBRECHEN"));
            }
        });
    }

    /**
     * Sperrt die Tabelle und ändert Menüeinstellungen je nachdem ob das
     * Dialogfeld gesperrt ist oder nicht
     *
     * @param locked
     */
    private void setLockTable(boolean locked) {
        if (locked) {
            table.setEditable(false);
            lockToggleButton.setSelected(false);
            tableScrollPane.setBorder(null);
            ((JMenuItem) jPopupMenu1.getComponent(0)).setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorTablePanel.ANZEIGEN (GESPERRT)"));
        } else {
            table.setEditable(true);
            lockToggleButton.setSelected(true);
            tableScrollPane.setBorder(new LineBorder(Color.RED, 3));
            ((JMenuItem) jPopupMenu1.getComponent(0)).setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorTablePanel.BEARBEITEN"));
        }
        deleteMenuItem.setEnabled(!locked);
    }

    /**
     * Ersetzt die aktuellen (lokalen) SensorProperties für diesen Messpunkt
     * durch die angegebenen SensorProperties
     *
     * @param oldProperties
     * @param newProperties
     */
    public void replaceSensor(SensorProperties oldProperties, SensorProperties newProperties) {
        int index = localSensorList.indexOf(oldProperties); // welchen index hatten die ursprünglicehn Properties
        localSensorList.set(index, newProperties); // diese in der lokalen Kopie der  Sensorliste ersetzen mit den neuen
        model.replaceSensor(oldProperties, newProperties); // und im TableModel für die Übersicht erneuern
    }

    private ArrayList<SensorProperties> deepCopy(ArrayList list) {

        // serialize ArrayList into byte array
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream(100);
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(list);
            byte buf[] = baos.toByteArray();
            oos.close();

            // deserialize byte array into ArrayList
            ByteArrayInputStream bais = new ByteArrayInputStream(buf);
            ObjectInputStream ois = new ObjectInputStream(bais);
            ArrayList newlist = (ArrayList) ois.readObject();
            ois.close();

            return newlist;
        } catch (Exception e) {
            Messages.showException(e);
        }
        return null;
    }

    class PopupListener implements MouseListener {

        @Override
        public void mousePressed(MouseEvent e) {
            showPopup(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            showPopup(e);
        }

        private void showPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                int row = table.rowAtPoint(e.getPoint());
                if (row >= 0 && row < table.getRowCount()) {
                    FilterPipeline filters = table.getFilters();
                    popObject = (String) filters.getValueAt(row, 1);
//                    System.out.println("Gefiltert: " + " " + row + " " + filters.getValueAt(row, 1));
                    jPopupMenu1.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        }

        @Override
        public void mouseClicked(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox FilterColumn;
    private javax.swing.JPanel FilterPanel;
    private javax.swing.JMenuItem ShowOrEditMenuItem;
    private javax.swing.JTextField TabelFilter;
    private javax.swing.JButton TabelFilterButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JList changeList;
    private javax.swing.JDialog confirmDialog;
    private javax.swing.JCheckBox deleteDataCheckBox;
    private javax.swing.JList deleteList;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToggleButton lockToggleButton;
    private javax.swing.JButton printTableButton;
    private javax.swing.JButton revokeButton;
    private javax.swing.JButton savePropertyTableButton;
    private org.jdesktop.swingx.JXTable table;
    private javax.swing.JScrollPane tableScrollPane;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
