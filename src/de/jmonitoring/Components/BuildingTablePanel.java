/*
 * SensorTablePanel.java
 *
 * Created on 3. September 2008, 13:43
 */
package de.jmonitoring.Components;

import de.jmonitoring.DBOperations.ListFiller;
import de.jmonitoring.base.buildings.BuildingInformation;
import de.jmonitoring.base.buildings.BuildingProperties;
import de.jmonitoring.base.MainApplication;
import de.jmonitoring.base.MoniSoft;
import de.jmonitoring.TableModels.BuildingTableModel;
import de.jmonitoring.base.Messages;
import de.jmonitoring.help.ManualBookmarks;
import de.jmonitoring.help.ManualViewer;
import de.jmonitoring.utils.tablecellrenderer.DoubleCellRenderer;
import de.jmonitoring.utils.tablecellrenderer.IntegerCellRenderer;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.print.PrinterException;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import javax.swing.*;
import javax.swing.border.LineBorder;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import org.jdesktop.swingx.decorator.ColorHighlighter;
import org.jdesktop.swingx.decorator.Filter;
import org.jdesktop.swingx.decorator.FilterPipeline;
import org.jdesktop.swingx.decorator.HighlightPredicate;
import org.jdesktop.swingx.decorator.HighlighterFactory;
import org.jdesktop.swingx.decorator.PatternFilter;
import org.jdesktop.swingx.table.NumberEditorExt;

/**
 *
 * @author togro
 */
public class BuildingTablePanel extends javax.swing.JPanel {

    private BuildingTableModel tableModel = new BuildingTableModel();
    private boolean hasChanges = false;
    private ArrayList<BuildingProperties> localBuildingList;
    private String popObject;
    private HashSet<Integer> changedBuildingIDs = new HashSet<Integer>();
    private HashSet<Integer> deletedBuildingIDs = new HashSet<Integer>();
    private boolean confirmed = false;
    private final MainApplication gui;

    /**
     * Creates new form BuildingTablePanel
     */
    public BuildingTablePanel(MainApplication gui) {
        super();
        this.gui = gui;
        initComponents();
        setFilterSelector();
        setTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        confirmDialog = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        changeList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        deleteList = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        FilterPanel = new javax.swing.JPanel();
        TabelFilter = new javax.swing.JTextField();
        TabelFilterButton = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        FilterColumn = new javax.swing.JComboBox();
        jLabel31 = new javax.swing.JLabel();
        jButton25 = new javax.swing.JButton();
        lockToggleButton = new javax.swing.JToggleButton();
        printTableButton = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        tableScrollPane = new javax.swing.JScrollPane();
        table = new org.jdesktop.swingx.JXTable();
        jPanel1 = new javax.swing.JPanel();
        savePropertyTableButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jMenuItem1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle"); // NOI18N
        jMenuItem1.setLabel(bundle.getString("BuildingTablePanel.jMenuItem1.label")); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jMenuItem2.setText(bundle.getString("BuildingTablePanel.jMenuItem2.text")); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        jMenuItem3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jMenuItem3.setText(bundle.getString("BuildingTablePanel.jMenuItem3.text")); // NOI18N
        jMenuItem3.setEnabled(false);
        jPopupMenu1.add(jMenuItem3);

        confirmDialog.setTitle(bundle.getString("BuildingTablePanel.confirmDialog.title")); // NOI18N
        confirmDialog.setAlwaysOnTop(true);
        confirmDialog.setMinimumSize(new java.awt.Dimension(730, 450));
        confirmDialog.setModal(true);
        confirmDialog.setResizable(false);

        changeList.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        changeList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(changeList);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel1.setText(bundle.getString("BuildingTablePanel.jLabel1.text")); // NOI18N

        jButton2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/accept.png"))); // NOI18N
        jButton2.setText(bundle.getString("BuildingTablePanel.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/cancel.png"))); // NOI18N
        jButton4.setText(bundle.getString("BuildingTablePanel.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel2.setText(bundle.getString("BuildingTablePanel.jLabel2.text")); // NOI18N

        deleteList.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        deleteList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(deleteList);

        jLabel3.setText(bundle.getString("BuildingTablePanel.jLabel3.text")); // NOI18N

        javax.swing.GroupLayout confirmDialogLayout = new javax.swing.GroupLayout(confirmDialog.getContentPane());
        confirmDialog.getContentPane().setLayout(confirmDialogLayout);
        confirmDialogLayout.setHorizontalGroup(
            confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(confirmDialogLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                        .addGap(492, 492, 492))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, confirmDialogLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(211, 211, 211))
                    .addGroup(confirmDialogLayout.createSequentialGroup()
                        .addGroup(confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(confirmDialogLayout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        confirmDialogLayout.setVerticalGroup(
            confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setLayout(new java.awt.BorderLayout());

        FilterPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        FilterPanel.setMaximumSize(new java.awt.Dimension(32767, 23));
        FilterPanel.setMinimumSize(new java.awt.Dimension(100, 23));

        TabelFilter.setFont(new java.awt.Font("SansSerif", 0, 9)); // NOI18N

        TabelFilterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/funnel.png"))); // NOI18N
        TabelFilterButton.setToolTipText(bundle.getString("BuildingTablePanel.TabelFilterButton.toolTipText")); // NOI18N
        TabelFilterButton.setMaximumSize(new java.awt.Dimension(20, 20));
        TabelFilterButton.setMinimumSize(new java.awt.Dimension(20, 20));
        TabelFilterButton.setPreferredSize(new java.awt.Dimension(20, 20));
        TabelFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TabelFilterButtonActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel32.setText(bundle.getString("BuildingTablePanel.jLabel32.text")); // NOI18N

        FilterColumn.setBackground(new java.awt.Color(255, 255, 255));
        FilterColumn.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        FilterColumn.setMinimumSize(new java.awt.Dimension(61, 20));
        FilterColumn.setPreferredSize(new java.awt.Dimension(61, 20));

        jLabel31.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel31.setText(bundle.getString("BuildingTablePanel.jLabel31.text")); // NOI18N

        jButton25.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jButton25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/arrow_undo.png"))); // NOI18N
        jButton25.setText(bundle.getString("BuildingTablePanel.jButton25.text")); // NOI18N
        jButton25.setToolTipText(bundle.getString("BuildingTablePanel.jButton25.toolTipText")); // NOI18N
        jButton25.setMaximumSize(new java.awt.Dimension(120, 22));
        jButton25.setMinimumSize(new java.awt.Dimension(120, 22));
        jButton25.setPreferredSize(new java.awt.Dimension(120, 22));
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        lockToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/lock.png"))); // NOI18N
        lockToggleButton.setToolTipText(bundle.getString("BuildingTablePanel.lockToggleButton.toolTipText")); // NOI18N
        lockToggleButton.setBorder(null);
        lockToggleButton.setBorderPainted(false);
        lockToggleButton.setContentAreaFilled(false);
        lockToggleButton.setFocusPainted(false);
        lockToggleButton.setMaximumSize(new java.awt.Dimension(131, 20));
        lockToggleButton.setMinimumSize(new java.awt.Dimension(131, 20));
        lockToggleButton.setPreferredSize(new java.awt.Dimension(131, 20));
        lockToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/lock-unlock.png"))); // NOI18N
        lockToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockToggleButtonActionPerformed(evt);
            }
        });

        printTableButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/printer.png"))); // NOI18N
        printTableButton.setToolTipText(bundle.getString("BuildingTablePanel.printTableButton.toolTipText")); // NOI18N
        printTableButton.setMaximumSize(new java.awt.Dimension(20, 20));
        printTableButton.setMinimumSize(new java.awt.Dimension(20, 20));
        printTableButton.setPreferredSize(new java.awt.Dimension(20, 20));
        printTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printTableButtonActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/question-frame.png"))); // NOI18N
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setFocusPainted(false);
        jButton7.setIconTextGap(0);
        jButton7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7help(evt);
            }
        });

        javax.swing.GroupLayout FilterPanelLayout = new javax.swing.GroupLayout(FilterPanel);
        FilterPanel.setLayout(FilterPanelLayout);
        FilterPanelLayout.setHorizontalGroup(
            FilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FilterPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FilterColumn, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel32)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TabelFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TabelFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(printTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lockToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7))
        );
        FilterPanelLayout.setVerticalGroup(
            FilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FilterPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(FilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(FilterColumn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32)
                    .addComponent(TabelFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TabelFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lockToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31)
                    .addComponent(printTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        FilterPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {TabelFilterButton, jButton25, lockToggleButton});

        add(FilterPanel, java.awt.BorderLayout.PAGE_START);

        tableScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        tableScrollPane.setForeground(new java.awt.Color(0, 0, 0));
        tableScrollPane.setMinimumSize(new java.awt.Dimension(500, 500));

        table.setModel(tableModel);
        tableScrollPane.setViewportView(table);

        add(tableScrollPane, java.awt.BorderLayout.CENTER);

        jPanel1.setToolTipText(bundle.getString("BuildingTablePanel.jPanel1.toolTipText")); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 35));

        savePropertyTableButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        savePropertyTableButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/accept.png"))); // NOI18N
        savePropertyTableButton.setText(bundle.getString("BuildingTablePanel.savePropertyTableButton.text")); // NOI18N
        savePropertyTableButton.setToolTipText(bundle.getString("BuildingTablePanel.savePropertyTableButton.toolTipText")); // NOI18N
        savePropertyTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePropertyTableButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/cancel.png"))); // NOI18N
        cancelButton.setText(bundle.getString("BuildingTablePanel.cancelButton.text")); // NOI18N
        cancelButton.setToolTipText(bundle.getString("BuildingTablePanel.cancelButton.toolTipText")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/delete.png"))); // NOI18N
        jButton1.setText(bundle.getString("BuildingTablePanel.jButton1.text")); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, lockToggleButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jButton1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/add.png"))); // NOI18N
        jButton3.setText(bundle.getString("BuildingTablePanel.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSensorAction(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 276, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addGap(10, 10, 10)
                .addComponent(savePropertyTableButton)
                .addGap(6, 6, 6))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cancelButton)
                        .addComponent(jButton3)
                        .addComponent(jButton1))
                    .addComponent(savePropertyTableButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_END);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

private void TabelFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TabelFilterButtonActionPerformed
    int col = table.getColumn(FilterColumn.getSelectedItem().toString()).getModelIndex();
    table.getColumn(FilterColumn.getSelectedItem().toString()).getModelIndex();
    table.setFilters(new FilterPipeline(new Filter[]{new PatternFilter(".*" + TabelFilter.getText() + ".*", 0, col)}));
}//GEN-LAST:event_TabelFilterButtonActionPerformed

private void lockToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockToggleButtonActionPerformed
    if (lockToggleButton.isSelected()) {
        setLockTable(false);
    } else {
        setLockTable(true);
    }
}//GEN-LAST:event_lockToggleButtonActionPerformed

    /**
     * Setzt das {@link BuildingTableModel} auf die globale GebäudeListe zurück
     * und aktualisiert die Tabelle
     */
    private void modelReset() {
        // TODO: Abfrage ob Änderungen verworfen werden sollen
        setTable();
        table.revalidate();
    }

    /**
     * Kopiert die lokale (evtl. geänderte) Kopie der Gebäudeliste auf die
     * globale Gebäudeliste.<br> Die aktualisierten Änderungen werden auch in
     * die Datenbank übernommen.
     *
     * @param evt
     */
private void savePropertyTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePropertyTableButtonActionPerformed
    // Schreiben in die DB
    SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
            confirmed = false;
            DefaultListModel deleteModel = new DefaultListModel();
            DefaultListModel changeModel = new DefaultListModel();

            if (!hasChanges) {
                return;
            }

            for (Integer i : deletedBuildingIDs) {
                deleteModel.addElement(i + " " + BuildingInformation.getBuildingProperties(i).getBuildingName() + " " + "(" + BuildingInformation.getBuildingProperties(i).getBuildingDescription() + ")");
            }
            deleteList.setModel(deleteModel);

            for (Integer i : changedBuildingIDs) {
//                System.out.println("Changed building ID: " + i + BuildingInformation.getBuildingProperties(i).getBuildingName() + " " + BuildingInformation.getBuildingProperties(i).getBuildingDescription());
                changeModel.addElement(i + " " + BuildingInformation.getBuildingProperties(i).getBuildingName() + " " + "(" + BuildingInformation.getBuildingProperties(i).getBuildingDescription() + ")");
            }
            changeList.setModel(changeModel);

            confirmDialog.setLocationRelativeTo(table.getParent());
            confirmDialog.setVisible(true);
            confirmDialog.toFront();

            if (!confirmed) { // if not confirmed cancel operation
                setTable(); // reset table
                return;
            }

//            BuildingInformation.setBuildingList(deepCopy(localBuildingList)); // GebäudeListe ersetzen

            // Veränderte (und neue?) Gebäude schreiben
            for (Integer id : changedBuildingIDs) {
                BuildingInformation.writeBuildingProperty(id);
            }

            changedBuildingIDs.clear();

            // wenn es Messpunkte zum löschen gibt
            HashMap<Integer, Integer> deletedMap = null;
            if (!deletedBuildingIDs.isEmpty()) { // wenn es Messpunkte zum löschen gibt
                for (Integer id : deletedBuildingIDs) {
                    deletedMap = BuildingInformation.deleteBuilding(id);
                    Messages.showMessage("Lösche Gebäude" + " (" + id + ") " + BuildingInformation.getBuildingNameFromID(id) + ":\n", true);
                    Messages.showMessage("\t" + deletedMap.get(BuildingInformation.NUM_DELETED_SENSOR_ALLOCATIONS) + " " + "Messpunktzuordnungen gelöscht" + "\n", true);
                    Messages.showMessage("\t" + deletedMap.get(BuildingInformation.NUM_DELETED_REFERENCES) + " " + "Bezugsgrößen gelöscht" + "\n", true);
                    Messages.showMessage("\t" + deletedMap.get(BuildingInformation.NUM_DELETED_COMPARECOLLECTIONS) + " " + "Vorkommen in Vergleichsgrößen gelöscht" + "\n", true);
                    Messages.showMessage("\t" + deletedMap.get(BuildingInformation.NUM_DELETED_CLUSTERS) + " " + "Vorkommen in Clustern gelöscht" + "\n", true);
                }
                Messages.showMessage(deletedBuildingIDs.size() + " " + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("GEBÄUDE AUS DER DATENBANK GELOESCHT") + "\n", true);
                deletedBuildingIDs.clear();
            }

            BuildingInformation.setBuildingList(deepCopy(localBuildingList)); // GebäudeListe ersetzen

            // refresh references
            ListFiller filler = new ListFiller();
            BuildingInformation.setBuildingReferencesMap(filler.readBuildingReferencesMap());

            hasChanges = false;
        }
    });

    cancelButton.setEnabled(true);
    cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SCHLIESSEN"));
    savePropertyTableButton.setEnabled(false); // Speichern-Knopf deaktivieren

}//GEN-LAST:event_savePropertyTableButtonActionPerformed

    /**
     * Bricht die Bearbeitung des aktuellen Dialogs ab. Bei veränderter
     * Sensorliste erfolgt eine Abfrage
     */
    private void close() {
        if (hasChanges && JOptionPane.showConfirmDialog(this.gui.getMainFrame(), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("WENN SIE JETZT ABBRECHEN GEHEN ALLE ÄNDERUNGEN VERLOREN"), null, JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
            return; // nicht abgebrochen
        } else {
            table = null;
            tableModel = null;
            changedBuildingIDs = null;
            localBuildingList = null;
            this.gui.disposeIFrame((JInternalFrame) this.getParent().getParent().getParent().getParent());
        }
    }

    /**
     * Abbrechen-Knopf gedrückt
     *
     * @param evt
     */
private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    close();
}//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Zurücksetzen-Knopf wurde gedrückt
     *
     * @param evt
     */
private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
    modelReset();
}//GEN-LAST:event_jButton25ActionPerformed

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    BuildingEditorDialog editor = new BuildingEditorDialog(this.gui.getMainFrame(), true, this, lockToggleButton.isSelected(), false);
    editor.setLocationRelativeTo(this);
    editor.setFields(getLocalBuildingProperties(popObject));
    editor.setVisible(true);
}//GEN-LAST:event_jMenuItem1ActionPerformed

private void newSensorAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSensorAction
    BuildingEditorDialog editor = new BuildingEditorDialog(this.gui.getMainFrame(), true, this, true, true);
    editor.setLocationRelativeTo(this);
    editor.setFields(new BuildingProperties());
    editor.setVisible(true);
    modelReset();
}//GEN-LAST:event_newSensorAction

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// Alle gewählten Messpunkte aus den lokalen Props Löschen und Tabelle aktualisieren
    boolean b = false;
    for (int i = 0; i < table.getSelectedRows().length; i++) {
        b = localBuildingList.remove(getLocalBuildingProperties((String) table.getModel().getValueAt(table.convertRowIndexToModel(table.getSelectedRows()[i]), 1))) || b;
        deletedBuildingIDs.add(BuildingInformation.getBuildingIDFromName((String) table.getModel().getValueAt(table.convertRowIndexToModel(table.getSelectedRows()[i]), 1)));
    }
    updateTable(false, b);
}//GEN-LAST:event_jButton1ActionPerformed

private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
//    JOptionPane.showConfirmDialog(this, " Soll das Gebäude '" + tableModel.getValueAt(table.getSelectedRow(), 1) + "' wirklich gelöscht werden?\n\nAlle diesem Gebäude zugeordneten Bezugsgrößen werden damit ebenfalls gelöscht.", "Löschen?", JOptionPane.YES_NO_OPTION);
    // das gewählte Gebäude aus den lokalen Props Löschen und Tabelle aktualisieren
    boolean b = localBuildingList.remove(getLocalBuildingProperties(popObject));
    deletedBuildingIDs.add(BuildingInformation.getBuildingIDFromName(popObject));
    updateTable(false, b);
}//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        confirmed = true;
        confirmDialog.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        confirmDialog.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void printTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printTableButtonActionPerformed
        MessageFormat headerForm = new MessageFormat(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("BUILDING_LIST") + " " + MoniSoft.getInstance().getDBConnector().getDBName());
        MessageFormat footerForm = new MessageFormat(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorTablePanel.PAGE") + " {0}");
        try {
            table.print(JTable.PrintMode.FIT_WIDTH, headerForm, footerForm, true, null, true);
        } catch (PrinterException ex) {
            Messages.showException(ex);
            Messages.showException(ex);
            Messages.showMessage(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorTablePanel.FEHLER BEIM DRUCKEN. BITTE DRUCKER ÜBERPRÜFEN"), true);
        }
    }//GEN-LAST:event_printTableButtonActionPerformed

    private void jButton7help(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7help
        if (!ManualViewer.isShown) {
            ManualViewer viewer = new ManualViewer();
            viewer.showManual();
        }
        ManualViewer.goToPage(ManualBookmarks.BUILDING_TABLE.getPage());
    }//GEN-LAST:event_jButton7help

    /**
     * Liefert die (lokalen) <link>BuildingProperties</link> des übergebenen
     * Gebäudes
     *
     * @param sensor
     */
    public BuildingProperties getLocalBuildingProperties(String building) {
        BuildingProperties props = null;
        Iterator it = localBuildingList.iterator();
        while (it.hasNext()) {
            props = (BuildingProperties) it.next();
            if (props.getBuildingName().equals(building)) {
                break;
            }
        }
        return props;
    }

    /**
     * Erstellt ein neues {@link BuildingTableModel} für die Anzeige mit JXTable
     * im Editor. Dazu wird die globale Gebäudeliste auf eine lokale
     * Arbeitskopie kopiert.<p>
     *
     */
    private void setTable() {
        localBuildingList = deepCopy(BuildingInformation.getBuildingList());
        deletedBuildingIDs.clear();
        changedBuildingIDs.clear();
        updateTable(true, false);
    }

    private void updateTable(boolean locked, boolean changed) {
        tableModel = new BuildingTableModel();
        for (int i = 0; i < localBuildingList.size(); i++) {
            tableModel.addBuilding(localBuildingList.get(i));
        }
        hasChanges = changed;
        savePropertyTableButton.setEnabled(hasChanges);
        cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SCHLIESSEN"));
        table.setModel(tableModel);
        table.setFont(new java.awt.Font("Dialog", 0, 9));
        table.setColumnControlVisible(true);
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table.packAll();
        table.setHighlighters(HighlighterFactory.createSimpleStriping());
        table.addHighlighter(new ColorHighlighter(HighlightPredicate.ROLLOVER_ROW, Color.getHSBColor(60f, 20f, 100f), Color.BLACK));


        // Zellrenderer und Editor setzen je nachdem ob es sich um Ganz- oder Dezimalzahlen handelt
        for (int i = 0; i < table.getColumnCount(); i++) {
            if (table.getColumnClass(i) == Integer.class || table.getColumnClass(i) == Long.class) {
                table.getColumn(i).setCellRenderer(new IntegerCellRenderer(new DecimalFormat("0")));
                table.getColumn(i).setCellEditor(new NumberEditorExt(new DecimalFormat("0")));
            }
            if (table.getColumnClass(i) == Float.class || table.getColumnClass(i) == Double.class) {
                table.getColumn(i).setCellRenderer(new DoubleCellRenderer(new DecimalFormat("0.00")));
                table.getColumn(i).setCellEditor(new NumberEditorExt(new DecimalFormat("0.00")));
            }
        }

        setLockTable(locked);


        table.addMouseListener(new PopupListener());

        tableModel.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                changedBuildingIDs.add((Integer) tableModel.getValueAt(e.getFirstRow(), 0));   // TODO Spalte anpassen!!!
                hasChanges = true;
                savePropertyTableButton.setEnabled(true);
                cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("BuildingTablePanel.ABBRECHEN"));
            }
        });
    }

    private void setFilterSelector() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement(java.util.ResourceBundle.getBundle("de/jmonitoring/TableModels/Bundle").getString("NAME"));
        model.addElement(java.util.ResourceBundle.getBundle("de/jmonitoring/TableModels/Bundle").getString("DESCRIPTION"));
        model.addElement(java.util.ResourceBundle.getBundle("de/jmonitoring/TableModels/Bundle").getString("CITY"));
        model.addElement(java.util.ResourceBundle.getBundle("de/jmonitoring/TableModels/Bundle").getString("ZIP"));
        model.addElement(java.util.ResourceBundle.getBundle("de/jmonitoring/TableModels/Bundle").getString("STREET"));
        model.addElement(java.util.ResourceBundle.getBundle("de/jmonitoring/TableModels/Bundle").getString("OBJECT_ID"));

        FilterColumn.setModel(model);
    }

    private void setLockTable(boolean locked) {
        if (locked) {
            table.setEditable(false);
            lockToggleButton.setSelected(false);
            tableScrollPane.setBorder(null);
            ((JMenuItem) jPopupMenu1.getComponent(0)).setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("BuildingTablePanel.ANZEIGEN"));
        } else {
            table.setEditable(true);
            lockToggleButton.setSelected(true);
            tableScrollPane.setBorder(new LineBorder(Color.RED, 3));
            ((JMenuItem) jPopupMenu1.getComponent(0)).setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("BuildingTablePanel.BEARBEITEN"));
        }
        jMenuItem2.setEnabled(!locked);
    }

    /**
     * Ersetzt die aktuellen (lokalen) BuildingProperties für diesen Messpunkt
     * durch die angegebenen BuildingProperties
     *
     * @param oldProperties
     * @param newProperties
     */
    public void replaceBuilding(BuildingProperties oldProperties, BuildingProperties newProperties) {
        int index = localBuildingList.indexOf(oldProperties); // welchen index hatten die ursprünglicehn Properties
        localBuildingList.set(index, newProperties); // diese in der lokalen Kopieder  Sensorliste ersetzen mit den neuen
        tableModel.replaceBuilding(oldProperties, newProperties); // und im TableModel für die Übersicht erneuern
    }

    private ArrayList deepCopy(ArrayList list) {

        // serialize ArrayList into byte array
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream(100);
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(list);
            byte buf[] = baos.toByteArray();
            oos.close();

            // deserialize byte array into ArrayList
            ByteArrayInputStream bais = new ByteArrayInputStream(buf);
            ObjectInputStream ois = new ObjectInputStream(bais);
            ArrayList newlist = (ArrayList) ois.readObject();
            ois.close();

            return newlist;
        } catch (Exception e) {
            Messages.showException(e);
        }
        return null;
    }

    class PopupListener implements MouseListener {

        @Override
        public void mousePressed(MouseEvent e) {
            showPopup(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            showPopup(e);
        }

        private void showPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                int row = table.rowAtPoint(e.getPoint());
                if (row >= 0 && row < table.getRowCount()) {
                    FilterPipeline filters = table.getFilters();
                    popObject = (String) filters.getValueAt(row, 1);
//                    System.out.println("Gefiltert: " + " " + row + " " + filters.getValueAt(row, 1));
                    jPopupMenu1.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        }

        @Override
        public void mouseClicked(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox FilterColumn;
    private javax.swing.JPanel FilterPanel;
    private javax.swing.JTextField TabelFilter;
    private javax.swing.JButton TabelFilterButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JList changeList;
    private javax.swing.JDialog confirmDialog;
    private javax.swing.JList deleteList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToggleButton lockToggleButton;
    private javax.swing.JButton printTableButton;
    private javax.swing.JButton savePropertyTableButton;
    private org.jdesktop.swingx.JXTable table;
    private javax.swing.JScrollPane tableScrollPane;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
