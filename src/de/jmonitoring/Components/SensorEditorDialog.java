/*
 * SensorEditorDialog.java
 *
 * Created on 4. September 2008, 19:14
 */
package de.jmonitoring.Components;

import de.jmonitoring.base.buildings.BuildingInformation;
import de.jmonitoring.base.buildings.BuildingProperties;
import de.jmonitoring.base.MainApplication;
import de.jmonitoring.base.Messages;
import de.jmonitoring.base.MoniSoftConstants;
import de.jmonitoring.base.sensors.SensorInformation;
import de.jmonitoring.base.sensors.SensorProperties;
import de.jmonitoring.utils.UnitCalulation.UnitInformation;
import de.jmonitoring.help.ManualBookmarks;
import de.jmonitoring.help.ManualViewer;
import de.jmonitoring.utils.UnitCalulation.Unit;
import de.jmonitoring.utils.textfields.IntegerTextField;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.JOptionPane;

/**
 *
 * @author togro
 */
public class SensorEditorDialog extends javax.swing.JDialog {

//    SensorTableModel tableModel;
    private SensorProperties properties = new SensorProperties();
    private SensorProperties propertiesWorkon = new SensorProperties();
    private SensorTablePanel callingPanel;
    private boolean isNewMode;
    private boolean isEditable;
    private final MainApplication gui;
    private final String NO_BUILDING = "Keine Gebäudezuordnung";

    /**
     * Creates new form SensorEditorDialog
     */
    public SensorEditorDialog(MainApplication gui, boolean modal, SensorTablePanel caller, boolean editable, boolean newSensor) {
        super(gui.getMainFrame(), modal);
        this.gui = gui;
        initComponents();
        setModalityType(ModalityType.APPLICATION_MODAL); // sorgt dafür, dass im aufrufenden Code erst fortgefahren wird wenn dieser Dialog beendet ist
        isNewMode = newSensor;
        isEditable = editable;

        if (isNewMode) {
            SensorKeyTextField.setEditable(true);
            FactorTextField.setText("1");
        }

        callingPanel = caller;

        UnitComboBox.removeAllItems();
        for (Unit u : UnitInformation.getUnitList().values()) {
            UnitComboBox.addItem(u.getUnit());
        }

        if (!editable) {
            commitButton.setEnabled(false);
            activatorPanel1.setEnabled(false);
        }

        buildingComboBox.removeAllItems();
        buildingComboBox.addItem(NO_BUILDING);
        for (BuildingProperties building : BuildingInformation.getBuildingList()) {
            buildingComboBox.addItem(building);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        TypeButtonGroup = new javax.swing.ButtonGroup();
        AcquireTypeButtonGroup = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        SensorNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        SensorDescTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        UnitComboBox = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        FactorTextField = new de.jmonitoring.utils.textfields.DoubleTextField();
        jLabel5 = new javax.swing.JLabel();
        SensorKeyTextField = new javax.swing.JTextField();
        virtualCheckBox = new javax.swing.JCheckBox();
        virtualDefinitionTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        buildingComboBox = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        ContRadioButton = new javax.swing.JRadioButton();
        CounterRadioButton = new javax.swing.JRadioButton();
        EventRadioButton = new javax.swing.JRadioButton();
        UsageRadioButton = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        intervalRadioButton = new javax.swing.JRadioButton();
        ChangeOnlyRadioButton = new javax.swing.JRadioButton();
        ManualRadioButton = new javax.swing.JRadioButton();
        IntervalTextField = new IntegerTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        minWTTextField = new IntegerTextField();
        minWETextField = new IntegerTextField();
        maxWTTextField = new IntegerTextField();
        maxWETextField = new IntegerTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        minChangeWTTextField = new IntegerTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        minChangeWETextField = new IntegerTextField();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        activatorPanel1 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        commitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(761, 616));
        setModalExclusionType(null);
        setResizable(false);

        jPanel3.setBackground(new java.awt.Color(0, 102, 204));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle"); // NOI18N
        jLabel6.setText(bundle.getString("SensorEditorDialog.jLabel6.text")); // NOI18N

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/question-frame.png"))); // NOI18N
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setFocusPainted(false);
        jButton7.setIconTextGap(0);
        jButton7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7help(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 450, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel2.setMaximumSize(new java.awt.Dimension(761, 520));
        jPanel2.setPreferredSize(new java.awt.Dimension(761, 520));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("SensorEditorDialog.jPanel4.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanel4.setMaximumSize(new java.awt.Dimension(650, 690));
        jPanel4.setPreferredSize(new java.awt.Dimension(650, 690));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel1.setText(bundle.getString("SensorEditorDialog.jLabel1.text")); // NOI18N

        SensorNameTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), SensorNameTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel2.setText(bundle.getString("SensorEditorDialog.jLabel2.text")); // NOI18N

        SensorDescTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), SensorDescTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel3.setText(bundle.getString("SensorEditorDialog.jLabel3.text")); // NOI18N

        UnitComboBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        UnitComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        UnitComboBox.setToolTipText(bundle.getString("SensorEditorDialog.UnitComboBox.toolTipText")); // NOI18N
        UnitComboBox.setMaximumSize(new java.awt.Dimension(32767, 17));
        UnitComboBox.setMinimumSize(new java.awt.Dimension(68, 17));
        UnitComboBox.setPreferredSize(new java.awt.Dimension(68, 17));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), UnitComboBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel25.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel25.setText(bundle.getString("SensorEditorDialog.jLabel25.text")); // NOI18N

        FactorTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        FactorTextField.setToolTipText(bundle.getString("SensorEditorDialog.FactorTextField.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), FactorTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel5.setText(bundle.getString("SensorEditorDialog.jLabel5.text")); // NOI18N

        SensorKeyTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), SensorKeyTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        virtualCheckBox.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        virtualCheckBox.setText(bundle.getString("SensorEditorDialog.virtualCheckBox.text")); // NOI18N
        virtualCheckBox.setToolTipText(bundle.getString("SensorEditorDialog.virtualCheckBox.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), virtualCheckBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        virtualCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                virtualCheckBoxClicked(evt);
            }
        });

        virtualDefinitionTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        virtualDefinitionTextField.setToolTipText(bundle.getString("SensorEditorDialog.virtualDefinitionTextField.toolTipText")); // NOI18N
        virtualDefinitionTextField.setPreferredSize(new java.awt.Dimension(69, 17));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), virtualDefinitionTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel13.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel13.setText(bundle.getString("SensorEditorDialog.jLabel13.text")); // NOI18N

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/question-frame.png"))); // NOI18N
        jButton8.setBorderPainted(false);
        jButton8.setContentAreaFilled(false);
        jButton8.setFocusPainted(false);
        jButton8.setIconTextGap(0);
        jButton8.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8help(evt);
            }
        });

        buildingComboBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        buildingComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        buildingComboBox.setMinimumSize(new java.awt.Dimension(71, 20));
        buildingComboBox.setPreferredSize(new java.awt.Dimension(71, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), buildingComboBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UnitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FactorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(virtualCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(virtualDefinitionTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8))
                    .addComponent(SensorKeyTextField)
                    .addComponent(SensorNameTextField)
                    .addComponent(SensorDescTextField)
                    .addComponent(buildingComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(SensorNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(SensorKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(SensorDescTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buildingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(UnitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel25)
                        .addComponent(FactorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(virtualCheckBox)
                        .addComponent(virtualDefinitionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton8)))
        );

        SensorNameTextField.setEditable(true);
        SensorKeyTextField.setEditable(false);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("SensorEditorDialog.jPanel5.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9), new java.awt.Color(0, 0, 0))); // NOI18N

        TypeButtonGroup.add(ContRadioButton);
        ContRadioButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        ContRadioButton.setSelected(true);
        ContRadioButton.setText(bundle.getString("SensorEditorDialog.ContRadioButton.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), ContRadioButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        TypeButtonGroup.add(CounterRadioButton);
        CounterRadioButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        CounterRadioButton.setText(bundle.getString("SensorEditorDialog.CounterRadioButton.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), CounterRadioButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        TypeButtonGroup.add(EventRadioButton);
        EventRadioButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        EventRadioButton.setText(bundle.getString("SensorEditorDialog.EventRadioButton.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), EventRadioButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        EventRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EventRadioButtonActionPerformed(evt);
            }
        });

        TypeButtonGroup.add(UsageRadioButton);
        UsageRadioButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        UsageRadioButton.setText(bundle.getString("SensorEditorDialog.UsageRadioButton.text")); // NOI18N
        UsageRadioButton.setEnabled(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ContRadioButton)
                    .addComponent(CounterRadioButton)
                    .addComponent(UsageRadioButton)
                    .addComponent(EventRadioButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(ContRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CounterRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UsageRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EventRadioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("SensorEditorDialog.jPanel6.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9), new java.awt.Color(0, 0, 0))); // NOI18N

        AcquireTypeButtonGroup.add(intervalRadioButton);
        intervalRadioButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        intervalRadioButton.setSelected(true);
        intervalRadioButton.setText(bundle.getString("SensorEditorDialog.intervalRadioButton.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), intervalRadioButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        AcquireTypeButtonGroup.add(ChangeOnlyRadioButton);
        ChangeOnlyRadioButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        ChangeOnlyRadioButton.setText(bundle.getString("SensorEditorDialog.ChangeOnlyRadioButton.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), ChangeOnlyRadioButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        AcquireTypeButtonGroup.add(ManualRadioButton);
        ManualRadioButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        ManualRadioButton.setText(bundle.getString("SensorEditorDialog.ManualRadioButton.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), ManualRadioButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        IntervalTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        IntervalTextField.setText(bundle.getString("SensorEditorDialog.IntervalTextField.text")); // NOI18N
        IntervalTextField.setToolTipText(bundle.getString("SensorEditorDialog.IntervalTextField.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), IntervalTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel7.setText(bundle.getString("SensorEditorDialog.jLabel7.text")); // NOI18N

        jLabel14.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel14.setText(bundle.getString("CAN_VARY")); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(intervalRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IntervalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel7)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ChangeOnlyRadioButton)
                            .addComponent(ManualRadioButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(intervalRadioButton)
                    .addComponent(IntervalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ChangeOnlyRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ManualRadioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("SensorEditorDialog.jPanel7.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9), new java.awt.Color(0, 0, 0))); // NOI18N

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel9.setText(bundle.getString("SensorEditorDialog.jLabel9.text")); // NOI18N

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel10.setText(bundle.getString("SensorEditorDialog.jLabel10.text")); // NOI18N

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel11.setText(bundle.getString("SensorEditorDialog.jLabel11.text")); // NOI18N

        jLabel12.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel12.setText(bundle.getString("SensorEditorDialog.jLabel12.text")); // NOI18N

        minWTTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        minWTTextField.setToolTipText(bundle.getString("SensorEditorDialog.minWTTextField.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), minWTTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        minWETextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        minWETextField.setToolTipText(bundle.getString("SensorEditorDialog.minWETextField.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), minWETextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        maxWTTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        maxWTTextField.setToolTipText(bundle.getString("SensorEditorDialog.maxWTTextField.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), maxWTTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        maxWETextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        maxWETextField.setToolTipText(bundle.getString("SensorEditorDialog.maxWETextField.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), maxWETextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        jLabel18.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        jLabel19.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        jLabel20.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        jLabel21.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel21.setText(bundle.getString("SensorEditorDialog.jLabel21.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ChangeOnlyRadioButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel21, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        minChangeWTTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        minChangeWTTextField.setToolTipText(bundle.getString("SensorEditorDialog.minChangeWTTextField.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), minChangeWTTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel22.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel22.setText(bundle.getString("SensorEditorDialog.jLabel22.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ChangeOnlyRadioButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel22, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel23.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel23.setText(bundle.getString("SensorEditorDialog.jLabel23.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ChangeOnlyRadioButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel23, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        minChangeWETextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        minChangeWETextField.setToolTipText(bundle.getString("SensorEditorDialog.minChangeWETextField.toolTipText")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), minChangeWETextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jToggleButton1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jToggleButton1.setText(bundle.getString("SensorEditorDialog.jToggleButton1.text")); // NOI18N
        jToggleButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jToggleButton1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jToggleButton2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jToggleButton2.setText(bundle.getString("SensorEditorDialog.jToggleButton2.text")); // NOI18N
        jToggleButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jToggleButton2, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jToggleButton3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jToggleButton3.setText(bundle.getString("SensorEditorDialog.jToggleButton3.text")); // NOI18N
        jToggleButton3.setMargin(new java.awt.Insets(0, 0, 0, 0));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, activatorPanel1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jToggleButton3, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(maxWTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(minChangeWTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minWTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel21))
                .addGap(3, 3, 3)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel18)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jToggleButton1)
                        .addComponent(jToggleButton2))
                    .addComponent(jToggleButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel10)
                    .addComponent(minWETextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minChangeWETextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxWETextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addComponent(jLabel20)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {maxWETextField, maxWTTextField, minChangeWETextField, minChangeWTTextField, minWETextField, minWTTextField});

        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel11)
                    .addComponent(minWTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jToggleButton1)
                    .addComponent(minWETextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel12)
                    .addComponent(maxWTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jToggleButton2)
                    .addComponent(maxWETextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel21)
                    .addComponent(minChangeWTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(jToggleButton3)
                    .addComponent(minChangeWETextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        activatorPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/cancel.png"))); // NOI18N
        cancelButton.setText(bundle.getString("SensorEditorDialog.cancelButton.text")); // NOI18N
        cancelButton.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        activatorPanel1.add(cancelButton);

        commitButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        commitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/accept.png"))); // NOI18N
        commitButton.setText(bundle.getString("SensorEditorDialog.commitButton.text")); // NOI18N
        commitButton.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        commitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitButtonActionPerformed(evt);
            }
        });
        activatorPanel1.add(commitButton);

        getContentPane().add(activatorPanel1, java.awt.BorderLayout.PAGE_END);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    this.dispose();
}//GEN-LAST:event_cancelButtonActionPerformed

private void commitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitButtonActionPerformed
    // Wenn neuer Messpunkt oder der Name sich geändert hat: prüfen, ob Name und Schlüssel vorhanden
    if (isNewMode || !SensorNameTextField.getText().trim().equals(propertiesWorkon.getSensorName())) {
        // check if sensorname field is empty
        if (SensorNameTextField.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.DER MESSPUNKTNAME IST LEER. DIESE ANGABE IST ERFORDERLICH"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.HINWEIS"), JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        //check if sensorname contains spaces
        if (SensorNameTextField.getText().trim().contains(" ")) {
            JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.DER MESSPUNKTNAME ENTHÄLT LEERZEICHEN"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.HINWEIS"), JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // check if sensorname already exists
        BuildingProperties building;
        if (buildingComboBox.getSelectedItem().equals(NO_BUILDING)) {
            building = null;
        } else {
            building = (BuildingProperties) buildingComboBox.getSelectedItem();
        }
        if (!SensorInformation.sensorNameIsFreeForBuilding(SensorNameTextField.getText().trim(), building)) {
            JOptionPane.showMessageDialog(this, "Dieser Messpunktname ist für das gewählte Gebäude bereits vorhanden", java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.HINWEIS"), JOptionPane.INFORMATION_MESSAGE);
            return;
        }
    }

    // check if sensorkey field is empty
    if (isNewMode || !SensorKeyTextField.getText().trim().equals(propertiesWorkon.getKeyName())) {
        if (SensorKeyTextField.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.DER MESSPUNKTSCHLÜSSEL IST LEER. DIESE ANGABE IST ERFORDERLICH"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.HINWEIS"), JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // check if sensorkey contains spaces
        if (SensorKeyTextField.getText().trim().contains(" ")) {
            JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.DER MESSPUNKTSCHLÜSSEL ENTHÄLT LEERZEICHEN"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.HINWEIS"), JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // check if sensorkey already exists
        BuildingProperties building;
        if (buildingComboBox.getSelectedItem().equals(NO_BUILDING)) {
            building = null;
        } else {
            building = (BuildingProperties) buildingComboBox.getSelectedItem();
        }
        if (!SensorInformation.sensorKeyIsFreeForBuilding(SensorKeyTextField.getText().trim(), building)) {
            JOptionPane.showMessageDialog(this, "Dieser Messpunktschlüssel ist für das gewählte Gebäude bereits vorhanden", java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.HINWEIS"), JOptionPane.INFORMATION_MESSAGE);
            return;
        }
//        if (SensorInformation.getSensorIDFromKey(SensorKeyTextField.getText().trim()) != -1) {
//            JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.SENSORKEY") + " '" + SensorKeyTextField.getText().trim() + "' " + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.KEYEXISTS"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.HINWEIS"), JOptionPane.INFORMATION_MESSAGE);
//            return;
//        }

    }

    propertiesWorkon.setSensorName(SensorNameTextField.getText().trim()); // jeweils die Strings mit trim von evtl. führenden oder nachfolgenden Leerzeichen befreien
    propertiesWorkon.setSensorDescription(SensorDescTextField.getText().trim());
    propertiesWorkon.setSensorUnit(UnitInformation.getUnitFromName((String) UnitComboBox.getSelectedItem()));
    propertiesWorkon.setKeyName(SensorKeyTextField.getText().trim());
    propertiesWorkon.setBuildingName((buildingComboBox.getSelectedItem() == null || buildingComboBox.getSelectedItem().equals(NO_BUILDING)) ? "" : buildingComboBox.getSelectedItem().toString());

    // Faktor-Zahl in Editor in eine gültige Zahl verwandeln (, in .)
    propertiesWorkon.setFactor(Double.parseDouble(FactorTextField.getText()));

    // Messpunktart
    if (ContRadioButton.isSelected()) {
        propertiesWorkon.setEvent(false);
        propertiesWorkon.setCounter(false);
        propertiesWorkon.setUsage(false);
    }
    if (CounterRadioButton.isSelected()) {
        propertiesWorkon.setEvent(false);
        propertiesWorkon.setCounter(true);
        propertiesWorkon.setUsage(false);
    }
    if (UsageRadioButton.isSelected()) {
        propertiesWorkon.setEvent(false);
        propertiesWorkon.setCounter(false);
        propertiesWorkon.setUsage(true);
    }
    if (EventRadioButton.isSelected()) {
        propertiesWorkon.setEvent(true);
        propertiesWorkon.setCounter(false);
        propertiesWorkon.setUsage(false);
    }
    if (virtualCheckBox.isSelected()) {
        // Prüfen ob alle erforderlichen Messpunkte bekannt sind
        if (SensorInformation.getVirtualComponents(virtualDefinitionTextField.getText(), null) != null) {
            propertiesWorkon.setVirtualDefinition(virtualDefinitionTextField.getText());
            SensorInformation.resetFinalDefinition();
        } else {
            SensorInformation.resetFinalDefinition();
            return;
        }
    } else {
        propertiesWorkon.setVirtualDefinition(null);
    }

    // Erfassung
    if (intervalRadioButton.isSelected()) {
        try {
            int interval = Integer.valueOf(IntervalTextField.getText().trim());
            if (interval < 0) {
                JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.BITTE GEBEN SIE EIN INTERVALL"));
                return;
            }
            propertiesWorkon.setInterval(Integer.valueOf(IntervalTextField.getText().trim()));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorEditorDialog.ES WURDE EINE PERIODISCHE ERFASSUNG GEWÄHLT ABER KEIN GÜLTIGES INTERVALL ANGEGEBEN"));
            return;
        }
        propertiesWorkon.setManual(false);
    }
    if (ChangeOnlyRadioButton.isSelected()) {
        propertiesWorkon.setInterval(0);
        propertiesWorkon.setManual(false);
    }
    if (ManualRadioButton.isSelected()) {
        propertiesWorkon.setInterval(0);
        propertiesWorkon.setManual(true);
    }

    // Plausibilität
    propertiesWorkon.setWTLimits(minWTTextField.getText().trim().isEmpty() ? null : Integer.valueOf(minWTTextField.getText().trim()), MoniSoftConstants.MINIMUM);
    propertiesWorkon.setWTLimits(maxWTTextField.getText().trim().isEmpty() ? null : Integer.valueOf(maxWTTextField.getText().trim()), MoniSoftConstants.MAXIMUM);
    propertiesWorkon.setWELimits(minWETextField.getText().trim().isEmpty() ? null : Integer.valueOf(minWETextField.getText().trim()), MoniSoftConstants.MINIMUM);
    propertiesWorkon.setWELimits(maxWETextField.getText().trim().isEmpty() ? null : Integer.valueOf(maxWETextField.getText().trim()), MoniSoftConstants.MAXIMUM);

    if (ChangeOnlyRadioButton.isSelected()) {
        propertiesWorkon.setMaxChangeTimes(minChangeWTTextField.getText().trim().isEmpty() || Long.valueOf(minChangeWTTextField.getText().trim()) <= 0 ? null : Long.valueOf(minChangeWTTextField.getText().trim()), MoniSoftConstants.WORKDAY);
        propertiesWorkon.setMaxChangeTimes(minChangeWETextField.getText().trim().isEmpty() || Long.valueOf(minChangeWETextField.getText().trim()) <= 0 ? null : Long.valueOf(minChangeWETextField.getText().trim()), MoniSoftConstants.WEEKEND);
    } else {
        propertiesWorkon.setMaxChangeTimes(null, MoniSoftConstants.WORKDAY);
        propertiesWorkon.setMaxChangeTimes(null, MoniSoftConstants.WEEKEND);
    }

    if (!isNewMode) {
        callingPanel.replaceSensor(this.properties, this.propertiesWorkon);
    } else {
        // neuen Messpunkt erzeugen, wird direkt in die DB eingetragen
        if (SensorInformation.createNewSensor(this.propertiesWorkon)) {
            this.gui.updateSensorSelectors(true);
        }
    }

    this.dispose();
}//GEN-LAST:event_commitButtonActionPerformed

private void jButton7help(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7help
    if (!ManualViewer.isShown) {
        ManualViewer viewer = new ManualViewer();
        viewer.showManual();
    }
    ManualViewer.goToPage(ManualBookmarks.SENSOR_EDITOR.getPage());
}//GEN-LAST:event_jButton7help

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        if (jToggleButton3.isSelected()) {
            minChangeWETextField.setText(minChangeWTTextField.getText());
            minChangeWETextField.setEnabled(false);
        } else {
            minChangeWETextField.setEnabled(true);
        }
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        if (jToggleButton2.isSelected()) {
            maxWETextField.setText(maxWTTextField.getText());
            maxWETextField.setEnabled(false);
        } else {
            maxWETextField.setEnabled(true);
        }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if (jToggleButton1.isSelected()) {
            minWETextField.setText(minWTTextField.getText());
            minWETextField.setEnabled(false);
        } else {
            minWETextField.setEnabled(true);
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void EventRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EventRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EventRadioButtonActionPerformed

    private void jButton8help(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8help
        if (!ManualViewer.isShown) {
            ManualViewer viewer = new ManualViewer();
            viewer.showManual();
        }
        ManualViewer.goToPage(ManualBookmarks.VIRTUAL_SENSORS.getPage());
    }//GEN-LAST:event_jButton8help

    private void virtualCheckBoxClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_virtualCheckBoxClicked
        if (!isNewMode) {
            SensorKeyTextField.setEditable(virtualCheckBox.isSelected());
        }
    }//GEN-LAST:event_virtualCheckBoxClicked

    /**
     *
     * @param props
     */
    public void setFields(SensorProperties props) {
        this.properties = props;
        this.propertiesWorkon = deepCopy(props);
        SensorNameTextField.setText(props.getSensorName());
        SensorDescTextField.setText(props.getSensorDescription());
        SensorKeyTextField.setText(props.getKeyName());
        UnitComboBox.setSelectedItem(props.getSensorUnit().getUnit());
        virtualDefinitionTextField.setText(props.getVirtualDefinition());
        virtualCheckBox.setSelected(props.isVirtual());
        if (virtualCheckBox.isSelected() && isEditable) {
            SensorKeyTextField.setEditable(true);
        }

        if (props.getBuildingID() != null) {
            buildingComboBox.setSelectedItem(BuildingInformation.getBuildingProperties(props.getBuildingID()));
        } else {
            buildingComboBox.setSelectedItem(NO_BUILDING);
        }

        FactorTextField.setText(String.valueOf(props.getFactor()).replace(".", ","));
        // Messpunktart
        if (props.isCounter()) {
            CounterRadioButton.setSelected(true);
        } else if (props.isUsage()) {
            UsageRadioButton.setSelected(true);
        } else if (props.isEvent()) {
            EventRadioButton.setSelected(true);
        } else {
            ContRadioButton.setSelected(true);
        }
        // Aufzeichnungsintervall
        if (props.isManual()) {
            ManualRadioButton.setSelected(true);
        } else if (props.getInterval() != null && props.getInterval() > 0) { // in regular or desired intervals
            intervalRadioButton.setSelected(true);
        } else {
            ChangeOnlyRadioButton.setSelected(true);
        }
        IntervalTextField.setText(props.getInterval() == null ? "0" : String.valueOf(props.getInterval()));
        minChangeWTTextField.setText(props.getMaxChangeTimes()[0] == null ? "" : String.valueOf(props.getMaxChangeTimes()[0]));
        minChangeWETextField.setText(props.getMaxChangeTimes()[1] == null ? "" : String.valueOf(props.getMaxChangeTimes()[1]));
        minWTTextField.setText(props.getWTLimits()[0] == null ? "" : String.valueOf(props.getWTLimits()[0]));
        maxWTTextField.setText(props.getWTLimits()[1] == null ? "" : String.valueOf(props.getWTLimits()[1]));
        minWETextField.setText(props.getWELimits()[0] == null ? "" : String.valueOf(props.getWELimits()[0]));
        maxWETextField.setText(props.getWELimits()[1] == null ? "" : String.valueOf(props.getWELimits()[1]));
    }

    /**
     *
     * @param list
     * @return
     */
    private SensorProperties deepCopy(SensorProperties list) {

        // serialize ArrayList into byte array
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream(100);
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(list);
            byte buf[] = baos.toByteArray();
            oos.close();

            // deserialize byte array into ArrayList
            ByteArrayInputStream bais = new ByteArrayInputStream(buf);
            ObjectInputStream ois = new ObjectInputStream(bais);
            SensorProperties newlist = (SensorProperties) ois.readObject();
            ois.close();

            return newlist;
        } catch (Exception e) {
            Messages.showException(e);
        }
        return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup AcquireTypeButtonGroup;
    private javax.swing.JRadioButton ChangeOnlyRadioButton;
    private javax.swing.JRadioButton ContRadioButton;
    private javax.swing.JRadioButton CounterRadioButton;
    private javax.swing.JRadioButton EventRadioButton;
    private javax.swing.JTextField FactorTextField;
    private javax.swing.JTextField IntervalTextField;
    private javax.swing.JRadioButton ManualRadioButton;
    private javax.swing.JTextField SensorDescTextField;
    private javax.swing.JTextField SensorKeyTextField;
    private javax.swing.JTextField SensorNameTextField;
    private javax.swing.ButtonGroup TypeButtonGroup;
    private javax.swing.JComboBox UnitComboBox;
    private javax.swing.JRadioButton UsageRadioButton;
    private javax.swing.JPanel activatorPanel1;
    private javax.swing.JComboBox buildingComboBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton commitButton;
    private javax.swing.JRadioButton intervalRadioButton;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JTextField maxWETextField;
    private javax.swing.JTextField maxWTTextField;
    private javax.swing.JTextField minChangeWETextField;
    private javax.swing.JTextField minChangeWTTextField;
    private javax.swing.JTextField minWETextField;
    private javax.swing.JTextField minWTTextField;
    private javax.swing.JCheckBox virtualCheckBox;
    private javax.swing.JTextField virtualDefinitionTextField;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
