/*
 * ManualEntryDialog.java
 *
 * Created on 19. August 2008, 11:34
 */
package de.jmonitoring.Components;

import de.jmonitoring.DataHandling.DataHandler;
import de.jmonitoring.base.MainApplication;
import de.jmonitoring.base.Messages;
import de.jmonitoring.base.MoniSoft;
import de.jmonitoring.base.MoniSoftConstants;
import de.jmonitoring.base.sensors.SensorInformation;
import de.jmonitoring.base.sensors.SensorProperties;
import de.jmonitoring.help.ManualBookmarks;
import de.jmonitoring.help.ManualViewer;
import de.jmonitoring.utils.Measurement;
import java.awt.Color;
import java.awt.Dimension;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import org.jdesktop.swingx.VerticalLayout;

/**
 *
 * @author togro
 */
public class ManualEntryDialog extends javax.swing.JDialog {

    private HashMap<SensorProperties, ArrayList> mapOfPanelList = new HashMap<SensorProperties, ArrayList>();
    private DefaultListModel allModel = new DefaultListModel();
    private DefaultListModel manualModel = new DefaultListModel();
    private int sensorID;

    /**
     * Creates new form ManualEntryDialog
     */
    public ManualEntryDialog(MainApplication gui, boolean modal) {
        super(gui.getMainFrame(), modal);
        initComponents();
        fillSensorList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sensorSelectionList = new javax.swing.JList();
        manualOnlyCheckbox = new javax.swing.JCheckBox();
        SaveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane2.getVerticalScrollBar().setUnitIncrement(80);
        jScrollPane2.getVerticalScrollBar().setBlockIncrement(80);
        entryPanelHolder = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("ManualEntryDialog.jLabel1.text")); // NOI18N

        sensorSelectionList.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        sensorSelectionList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        sensorSelectionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        sensorSelectionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                sensorSelectionListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(sensorSelectionList);

        manualOnlyCheckbox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        manualOnlyCheckbox.setSelected(true);
        manualOnlyCheckbox.setText(bundle.getString("ManualEntryDialog.manualOnlyCheckbox.text")); // NOI18N
        manualOnlyCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualOnlyCheckboxActionPerformed(evt);
            }
        });

        SaveButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        SaveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/accept.png"))); // NOI18N
        SaveButton.setText(bundle.getString("ManualEntryDialog.SaveButton.text")); // NOI18N
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/cancel.png"))); // NOI18N
        cancelButton.setText(bundle.getString("ManualEntryDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setMaximumSize(new java.awt.Dimension(385, 32767));
        jScrollPane2.setMinimumSize(new java.awt.Dimension(385, 7));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(385, 700));

        entryPanelHolder.setBackground(new java.awt.Color(153, 153, 153));
        entryPanelHolder.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        entryPanelHolder.setMinimumSize(new java.awt.Dimension(0, 0));
        entryPanelHolder.setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout entryPanelHolderLayout = new javax.swing.GroupLayout(entryPanelHolder);
        entryPanelHolder.setLayout(entryPanelHolderLayout);
        entryPanelHolderLayout.setHorizontalGroup(
            entryPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 454, Short.MAX_VALUE)
        );
        entryPanelHolderLayout.setVerticalGroup(
            entryPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
        );

        entryPanelHolder.setLayout(new VerticalLayout(3));
        jScrollPane2.setViewportView(entryPanelHolder);

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/add.png"))); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(manualOnlyCheckbox)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addComponent(addButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                                .addComponent(cancelButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SaveButton))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE))))
                .addContainerGap())
        );

        mainPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {SaveButton, cancelButton});

        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manualOnlyCheckbox, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SaveButton)
                        .addComponent(cancelButton)
                        .addComponent(addButton)))
                .addContainerGap())
        );

        SaveButton.setEnabled(!MoniSoft.getInstance().ISTRIAL);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        jPanel14.setBackground(new java.awt.Color(0, 102, 204));
        jPanel14.setPreferredSize(new java.awt.Dimension(100, 40));

        jLabel37.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(255, 255, 255));
        jLabel37.setText(bundle.getString("ManualEntryDialog.jLabel37.text")); // NOI18N

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/question-frame.png"))); // NOI18N
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setFocusPainted(false);
        jButton7.setIconTextGap(0);
        jButton7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7help(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 796, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7)
                    .addComponent(jLabel37))
                .addContainerGap())
        );

        getContentPane().add(jPanel14, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    this.dispose();
}//GEN-LAST:event_cancelButtonActionPerformed

private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
    ArrayList list = new ArrayList();//GEN-LAST:event_SaveButtonActionPerformed
        Iterator<SensorProperties> it = mapOfPanelList.keySet().iterator();
        Iterator arryIt;
        Integer id;
        DataHandler handler;
        while (it.hasNext()) {
            SensorProperties props = it.next();
            id = props.getSensorID();
            handler = new DataHandler(id);
            list = (ArrayList) mapOfPanelList.get(props);
            arryIt = list.iterator();
            while (arryIt.hasNext()) {
                ManualEntryPanel panel = (ManualEntryPanel) arryIt.next();
                Messages.showMessage(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("ManualEntryDialog.VALUEFOR") + " " + id + " " + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("ManualEntryDialog.AT") + " " + new SimpleDateFormat(MoniSoftConstants.HumanDateTimeFormat).format(panel.getDate()), true);
                if (handler.insertManualValue(panel.getDate(), panel.getValue())) {
                    Messages.showMessage(", " + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("ManualEntryDialog.SUCESS") + "\n", true);
                } else {
                    Messages.showMessage(", " + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("ManualEntryDialog.FAILED") + "\n", true);
                }
            }
        }
    }

private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
    // Falls kein Messpunkt gewählt, zurückkehren
    if (sensorSelectionList.getSelectedIndex() == -1) {
        JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("NO_SENSOR_SELECTED"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("HINT"), JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    DecimalFormat df = new DecimalFormat("#.####");

    // MesspunktID des gewählten Messpunkt holen
    sensorID = ((SensorProperties) sensorSelectionList.getSelectedValue()).getSensorID();

    // Neues Panel ertellen
    ManualEntryPanel mPanel = new ManualEntryPanel(sensorID);

    //letzen Wert vor dem aktuellen Datum ermitteln und Panel entsprechend bestücken
    DataHandler dh = new DataHandler(sensorID);
    Measurement prevMeasurment = dh.getPreviousDBEntry(null, new Date());
    Date date;
    if (prevMeasurment == null) {
        mPanel.setInfoLabel(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("ManualEntryDialog.NOVALUE"));
        mPanel.setMinimumValidEntry(0f);
    } else {
        double value = prevMeasurment.getValue();
        date = new Date(prevMeasurment.getTime());
        mPanel.setInfoLabel(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("ManualEntryDialog.LASTVALUEFOR") + " " + new SimpleDateFormat(MoniSoftConstants.HumanDateTimeFormat).format(date) + ": " + df.format(value) + " [" + SensorInformation.getSensorProperties(sensorID).getSensorUnit() + "]");
        mPanel.setMinimumValidEntry(value);
    }

    // neu erzeugtes Panel der Panelliste hinzufügen
    entryPanelHolder.add(mPanel);
    entryPanelHolder.doLayout();
    entryPanelHolder.revalidate();
    entryPanelHolder.setPreferredSize(new Dimension(entryPanelHolder.getWidth(), entryPanelHolder.getComponentCount() * (mPanel.getHeight() + 3)));
    jScrollPane2.revalidate();
    SwingUtilities.invokeLater(new Runnable() {

        @Override
        public void run() {
            jScrollPane2.getVerticalScrollBar().setValue(jScrollPane2.getVerticalScrollBar().getModel().getMaximum());
        }
    });

    // Panel der Panel-Liste für diesen Messpunkt hinzufügen
    addToHashMap((SensorProperties) sensorSelectionList.getSelectedValue(), mPanel);
}//GEN-LAST:event_addButtonActionPerformed

private void sensorSelectionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_sensorSelectionListValueChanged
    SensorProperties props = (SensorProperties) sensorSelectionList.getSelectedValue();
    entryPanelHolder.removeAll();

    ArrayList list = mapOfPanelList.get(props);
    if (list != null) {
        Iterator it = list.iterator();
        while (it.hasNext()) {
            entryPanelHolder.add((JPanel) it.next());
        }
    }
    entryPanelHolder.setForeground(Color.BLUE);
    SwingUtilities.invokeLater(new Runnable() {

        @Override
        public void run() {
            entryPanelHolder.setForeground(Color.BLACK);
            jScrollPane2.revalidate();
            jScrollPane2.getVerticalScrollBar().setValue(0);

        }
    });

}//GEN-LAST:event_sensorSelectionListValueChanged

private void manualOnlyCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualOnlyCheckboxActionPerformed
    if (manualOnlyCheckbox.isSelected()) {
        sensorSelectionList.setModel(manualModel);
    } else {
        sensorSelectionList.setModel(allModel);
    }
}//GEN-LAST:event_manualOnlyCheckboxActionPerformed

    private void jButton7help(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7help
        if (!ManualViewer.isShown) {
            ManualViewer viewer = new ManualViewer();
            viewer.showManual();
        }
        ManualViewer.goToPage(ManualBookmarks.MANUAL_DATA_ENTRY.getPage());
    }//GEN-LAST:event_jButton7help

    private void fillSensorList() {
        SensorProperties props;
        allModel = new DefaultListModel();
        manualModel = new DefaultListModel();
//        String s;
        for (int i = 0; i < SensorInformation.getSensorList().size(); i++) {
            props = (SensorProperties) SensorInformation.getSensorList().get(i);
            if (props.getSensorName().equals(MoniSoftConstants.NO_SENSOR_SELECTED) || !props.isCounter()) {
                continue;
            }
//            s = props.getSensorName() + " " + props.getSensorDescription();
            allModel.addElement(props);      // Liste für alle Messpunkte
            if (props.isManual()) { // Wenn es ein Manueller Messpunkt ist in die manual-Liste aufnehmen
                manualModel.addElement(props);
            }
        }
        if (manualOnlyCheckbox.isSelected()) {
            sensorSelectionList.setModel(manualModel);
        } else {
            sensorSelectionList.setModel(allModel);
        }
    }

    private void addToHashMap(SensorProperties o, ManualEntryPanel panel) {
        ArrayList list = (ArrayList) mapOfPanelList.get(o);
        if (list == null) {
            list = new ArrayList();
        }
        list.add(panel);
        mapOfPanelList.put(o, list);
//        System.out.println("Messpunkt " + o.toString() + " hat " + list.size() + " Einträge");
    }

    public void removeFromHashMap(SensorProperties props, ManualEntryPanel panel) {
        ((ArrayList) mapOfPanelList.get(props)).remove(panel);
//        System.out.println("Messpunkt " + props.toString() + " hat " + ((ArrayList) mapOfPanelList.get(props)).size() + " Einträge");
    }

    public SensorProperties getSelection() {
        return (SensorProperties) sensorSelectionList.getSelectedValue();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SaveButton;
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;

    private javax.swing.JPanel entryPanelHolder;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JCheckBox manualOnlyCheckbox;
    private javax.swing.JList sensorSelectionList;
    // End of variables declaration//GEN-END:variables
}
