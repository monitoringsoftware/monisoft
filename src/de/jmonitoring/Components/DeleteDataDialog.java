/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DeleteDataDialog.java
 *
 * Created on 19.05.2009, 10:16:35
 */
package de.jmonitoring.Components;

import de.jmonitoring.DataHandling.*;
import de.jmonitoring.base.MainApplication;
import de.jmonitoring.base.Messages;
import de.jmonitoring.base.MoniSoft;
import de.jmonitoring.base.MoniSoftConstants;
import de.jmonitoring.base.sensors.SensorInformation;
import de.jmonitoring.base.sensors.SensorProperties;
import de.jmonitoring.help.ManualBookmarks;
import de.jmonitoring.help.ManualViewer;
import de.jmonitoring.utils.StoppableThread;
import de.jmonitoring.utils.intervals.DateInterval;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author togro
 */
public class DeleteDataDialog extends javax.swing.JDialog implements Runnable {

    private ArrayList<SensorProperties> list = new ArrayList<SensorProperties>();
    private Date eDate = null; // null bedeutet: kompletter Zeitraum
    private Date sDate = null;
    private StoppableThread ddT;
    private DateInterval dateinterval;
    private final MainApplication gui;
    public static Integer MODE_DELETE = 1;
    public static Integer MODE_INVALID = 2;
    public static Integer MODE_VALID = 3;
    private Integer mode = 1;

    /**
     * Creates new form DeleteDataDialog
     */
    public DeleteDataDialog(MainApplication gui, boolean modal) {
        super(gui.getMainFrame(), modal);
        initComponents();

        this.gui = gui;
        jDateChooser1.getJCalendar().setTodayButtonVisible(true);
        jDateChooser2.getJCalendar().setTodayButtonVisible(true);

        progressPanel.setVisible(false);
        SensorProperties props;
        // Auswahliste bauen
        DefaultListModel model = (DefaultListModel) deleteDataList.getModel();
        for (int i = 0; i < SensorInformation.getSensorList().size(); i++) {
            props = (SensorProperties) SensorInformation.getSensorList().get(i);
            if (!MoniSoftConstants.NO_SENSOR_SELECTED.equals(props.getSensorName())) { // wenn es nicht der Platzhalter (<keine>) ist...
                model.addElement(props);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel18 = new javax.swing.JPanel();
        jLabel68 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        deleteDataList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jSpinnerFromHours = new javax.swing.JSpinner();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        progressPanel = new javax.swing.JPanel();
        progressIconLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        progressLabel = new javax.swing.JLabel();
        jSpinnerFromMinutes = new javax.swing.JSpinner();
        jSpinnerFromSeconds = new javax.swing.JSpinner();
        jSpinnerToHours = new javax.swing.JSpinner();
        jSpinnerToSeconds = new javax.swing.JSpinner();
        jSpinnerToMinutes = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        invalidButton = new javax.swing.JButton();
        validButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel18.setBackground(new java.awt.Color(0, 102, 204));
        jPanel18.setPreferredSize(new java.awt.Dimension(100, 40));

        jLabel68.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel68.setForeground(new java.awt.Color(255, 255, 255));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle"); // NOI18N
        jLabel68.setText(bundle.getString("DeleteDataDialog.jLabel68.text")); // NOI18N

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/question-frame.png"))); // NOI18N
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setFocusPainted(false);
        jButton7.setIconTextGap(0);
        jButton7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7help(evt);
            }
        });

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 648, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel68, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
        );

        getContentPane().add(jPanel18, java.awt.BorderLayout.PAGE_START);

        deleteDataList.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        deleteDataList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        deleteDataList.setModel(new DefaultListModel());
        deleteDataList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteDataListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(deleteDataList);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel1.setText(bundle.getString("DeleteDataDialog.jLabel1.text")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel2.setText(bundle.getString("DeleteDataDialog.jLabel2.text")); // NOI18N

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jRadioButton1.setSelected(true);
        jRadioButton1.setText(bundle.getString("DeleteDataDialog.jRadioButton1.text")); // NOI18N

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jRadioButton2.setText(bundle.getString("DeleteDataDialog.jRadioButton2.text")); // NOI18N

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        jLabel3.setText(bundle.getString("DeleteDataDialog.jLabel3.text")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        jLabel4.setText(bundle.getString("DeleteDataDialog.jLabel4.text")); // NOI18N

        jDateChooser1.setDateFormatString(bundle.getString("DatePanel.DateFormatString")); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jDateChooser1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jSpinnerFromHours.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jSpinnerFromHours, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jDateChooser2.setDateFormatString(bundle.getString("DatePanel.DateFormatString")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jDateChooser2, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        progressPanel.setBackground(new java.awt.Color(255, 255, 255));
        progressPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0), 2));
        progressPanel.setEnabled(false);

        progressIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/waiting.gif"))); // NOI18N

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        jLabel6.setText(bundle.getString("DeleteDataDialog.jLabel6.text")); // NOI18N

        progressLabel.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        progressLabel.setText(bundle.getString("DeleteDataDialog.progressLabel.text")); // NOI18N

        javax.swing.GroupLayout progressPanelLayout = new javax.swing.GroupLayout(progressPanel);
        progressPanel.setLayout(progressPanelLayout);
        progressPanelLayout.setHorizontalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, progressPanelLayout.createSequentialGroup()
                .addGroup(progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(progressPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(progressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressIconLabel))
        );
        progressPanelLayout.setVerticalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progressIconLabel)
            .addGroup(progressPanelLayout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(progressLabel)
                .addContainerGap())
        );

        jSpinnerFromMinutes.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jSpinnerFromMinutes, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jSpinnerFromSeconds.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jSpinnerFromSeconds, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jSpinnerToHours.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jSpinnerToHours, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jSpinnerToSeconds.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jSpinnerToSeconds, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jSpinnerToMinutes.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jSpinnerToMinutes, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(progressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jSpinnerFromHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSpinnerFromMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSpinnerFromSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jSpinnerToHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSpinnerToMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSpinnerToSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jRadioButton2)
                            .addComponent(jRadioButton1)
                            .addComponent(jLabel1))
                        .addGap(0, 105, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButton1)
                        .addGap(1, 1, 1)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jSpinnerFromHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSpinnerFromMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSpinnerFromSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jSpinnerToHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSpinnerToSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSpinnerToMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                        .addComponent(progressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setMinimumSize(new java.awt.Dimension(100, 20));
        jPanel2.setPreferredSize(new java.awt.Dimension(668, 30));

        okButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/accept.png"))); // NOI18N
        okButton.setText(bundle.getString("DeleteDataDialog.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonPressed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/cancel.png"))); // NOI18N
        cancelButton.setText(bundle.getString("DeleteDataDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonPressed(evt);
            }
        });

        jCheckBox1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jCheckBox1.setText(bundle.getString("DeleteDataDialog.jCheckBox1.text")); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllPressed(evt);
            }
        });

        invalidButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        invalidButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/accept.png"))); // NOI18N
        invalidButton.setText(bundle.getString("DeleteDataDialog.invalidButton.text")); // NOI18N
        invalidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invalidButtonActionPerformed(evt);
            }
        });

        validButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        validButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/accept.png"))); // NOI18N
        validButton.setText(bundle.getString("DeleteDataDialog.validButton.text")); // NOI18N
        validButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addGap(37, 37, 37)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(invalidButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton)
                    .addComponent(jCheckBox1)
                    .addComponent(invalidButton)
                    .addComponent(validButton))
                .addContainerGap(5, Short.MAX_VALUE))
        );

        okButton.setEnabled(!MoniSoft.getInstance().ISTRIAL);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonPressed
        if (ddT != null) {
            ddT.running = false;
        }
        if (ddT == null || !ddT.isAlive()) {
            dispose();
        }
    }//GEN-LAST:event_cancelButtonPressed

    private void deleteButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonPressed
        if (MoniSoft.getInstance().ISTRIAL) {
            Messages.showMessage(MoniSoftConstants.DEMO, true);
            return;
        }
        
        mode = MODE_DELETE;
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle"); // NOI18N
        jLabel6.setText(bundle.getString("DeleteDataDialog.jLabel6.text")); // NOI18N

        SimpleDateFormat humanDateFormat = new SimpleDateFormat(MoniSoftConstants.HumanDateFormat);
        SensorProperties props;
        String span = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("COMPLETE_DEL");
        if (jRadioButton2.isSelected()) { // Falls gewählt, Datum holen, sonst null = kompletter Zeitraum
            sDate = jDateChooser1.getDate();
            
            Calendar calFrom = Calendar.getInstance();
            calFrom.setTime( sDate );
            calFrom.set( Calendar.HOUR_OF_DAY, (Integer) jSpinnerFromHours.getValue() );
            calFrom.set( Calendar.MINUTE, (Integer) jSpinnerFromMinutes.getValue() );
            calFrom.set( Calendar.SECOND, (Integer) jSpinnerFromSeconds.getValue() );
            calFrom.set( Calendar.MILLISECOND, 0 );
            sDate.setTime( calFrom.getTimeInMillis() );

            eDate = jDateChooser2.getDate();
            Calendar calTo = Calendar.getInstance();
            calTo.setTime( eDate );
            calTo.set( Calendar.HOUR_OF_DAY, (Integer) jSpinnerToHours.getValue() );
            calTo.set( Calendar.MINUTE, (Integer) jSpinnerToMinutes.getValue() );
            calTo.set( Calendar.SECOND, (Integer) jSpinnerToSeconds.getValue() );
            calTo.set( Calendar.MILLISECOND, 0 );
            eDate.setTime( calTo.getTimeInMillis() );
            
            span = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("FOR_TIME_RANGE") + " " + humanDateFormat.format(sDate) + " " + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("TO") + " " + humanDateFormat.format(eDate);
        }

        // dateinterval = new DateInterval(sDate, eDate);
        dateinterval = new DateInterval();
        dateinterval.setStartDateComplete(sDate);
        dateinterval.setEndDateComplete(eDate);

        for (Object o : deleteDataList.getSelectedValues()) {
            props = (SensorProperties) o;
            list.add(props);
        }

        if (list.isEmpty()) {
            JOptionPane.showMessageDialog(this.gui.getMainFrame(), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("NO_SENSOR_SELECTED"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("HINT"), JOptionPane.OK_OPTION);
            return;
        }

        int answer = JOptionPane.showConfirmDialog(this.gui.getMainFrame(), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("THE_SELECTED") + " " + list.size() + " " + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("DATA_POINTS_WILL_BE") + " " + span + "\n" + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("DELETED_FROM_DB") + "\n\n" + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("ARE_YOU_SURE"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CONFIRMATION"), JOptionPane.YES_NO_OPTION);

        if (answer == 0) {
            cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CANCEL"));
            progressPanel.setVisible(true);
            ddT = new StoppableThread(this);
            ddT.running = true;
            ddT.start();
        }
    }//GEN-LAST:event_deleteButtonPressed

    private void selectAllPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllPressed
        if (jCheckBox1.isSelected()) {
            deleteDataList.addSelectionInterval(0, deleteDataList.getModel().getSize() - 1);
        } else {
            deleteDataList.removeSelectionInterval(0, deleteDataList.getModel().getSize() - 1);
        }
    }//GEN-LAST:event_selectAllPressed

    private void deleteDataListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteDataListMouseClicked
        jCheckBox1.setSelected(false);
    }//GEN-LAST:event_deleteDataListMouseClicked

    private void jButton7help(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7help
        if (!ManualViewer.isShown) {
            ManualViewer viewer = new ManualViewer();
            viewer.showManual();
        }
        ManualViewer.goToPage(ManualBookmarks.DELETE_DATA_DIALOG.getPage());
    }//GEN-LAST:event_jButton7help

    private void invalidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invalidButtonActionPerformed
        
        if (MoniSoft.getInstance().ISTRIAL) {
            Messages.showMessage(MoniSoftConstants.DEMO, true);
            return;
        }
        
        mode = MODE_INVALID;
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle"); // NOI18N
        jLabel6.setText(bundle.getString("DeleteDataDialog.jLabel6Invalidate.text")); // NOI18N
        
        SimpleDateFormat humanDateFormat = new SimpleDateFormat(MoniSoftConstants.HumanDateFormat);
        SensorProperties props;
        String span = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("COMPLETE_DEL");
        if (jRadioButton2.isSelected()) { // Falls gewählt, Datum holen, sonst null = kompletter Zeitraum
            sDate = jDateChooser1.getDate();
            
            Calendar calFrom = Calendar.getInstance();
            calFrom.setTime( sDate );
            calFrom.set( Calendar.HOUR_OF_DAY, (Integer) jSpinnerFromHours.getValue() );
            calFrom.set( Calendar.MINUTE, (Integer) jSpinnerFromMinutes.getValue() );
            calFrom.set( Calendar.SECOND, (Integer) jSpinnerFromSeconds.getValue() );
            calFrom.set( Calendar.MILLISECOND, 0 );
            sDate.setTime( calFrom.getTimeInMillis() );

            eDate = jDateChooser2.getDate();
            Calendar calTo = Calendar.getInstance();
            calTo.setTime( eDate );
            calTo.set( Calendar.HOUR_OF_DAY, (Integer) jSpinnerToHours.getValue() );
            calTo.set( Calendar.MINUTE, (Integer) jSpinnerToMinutes.getValue() );
            calTo.set( Calendar.SECOND, (Integer) jSpinnerToSeconds.getValue() );
            calTo.set( Calendar.MILLISECOND, 0 );
            eDate.setTime( calTo.getTimeInMillis() );
            
            span = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("FOR_TIME_RANGE") + " " + humanDateFormat.format(sDate) + " " + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("TO") + " " + humanDateFormat.format(eDate);
        }

        // dateinterval = new DateInterval(sDate, eDate);
        dateinterval = new DateInterval();
        dateinterval.setStartDateComplete(sDate);
        dateinterval.setEndDateComplete(eDate);

        for (Object o : deleteDataList.getSelectedValues()) {
            props = (SensorProperties) o;
            list.add(props);
        }

        if (list.isEmpty()) {
            JOptionPane.showMessageDialog(this.gui.getMainFrame(), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("NO_SENSOR_SELECTED"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("HINT"), JOptionPane.OK_OPTION);
            return;
        }

        int answer = JOptionPane.showConfirmDialog(this.gui.getMainFrame(), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("THE_SELECTED") + " " + list.size() + " " + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("DATA_POINTS_WILL_BE") + " " + span + "\n" + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("INVALIDATED_IN_DB") + "\n\n" + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("ARE_YOU_SURE"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CONFIRMATION"), JOptionPane.YES_NO_OPTION);

        if (answer == 0) {
            cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CANCEL"));
            progressPanel.setVisible(true);
            ddT = new StoppableThread(this);
            ddT.running = true;
            ddT.start();
        }
    }//GEN-LAST:event_invalidButtonActionPerformed

    private void validButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validButtonActionPerformed
                
        if (MoniSoft.getInstance().ISTRIAL) {
            Messages.showMessage(MoniSoftConstants.DEMO, true);
            return;
        }
        
        mode = MODE_VALID;
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle"); // NOI18N
        jLabel6.setText(bundle.getString("DeleteDataDialog.jLabel6Validate.text")); // NOI18N
        
        SimpleDateFormat humanDateFormat = new SimpleDateFormat(MoniSoftConstants.HumanDateFormat);
        SensorProperties props;
        String span = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("COMPLETE_DEL");
        if (jRadioButton2.isSelected()) { // Falls gewählt, Datum holen, sonst null = kompletter Zeitraum
            sDate = jDateChooser1.getDate();
            
            Calendar calFrom = Calendar.getInstance();
            calFrom.setTime( sDate );
            calFrom.set( Calendar.HOUR_OF_DAY, (Integer) jSpinnerFromHours.getValue() );
            calFrom.set( Calendar.MINUTE, (Integer) jSpinnerFromMinutes.getValue() );
            calFrom.set( Calendar.SECOND, (Integer) jSpinnerFromSeconds.getValue() );
            calFrom.set( Calendar.MILLISECOND, 0 );
            sDate.setTime( calFrom.getTimeInMillis() );

            eDate = jDateChooser2.getDate();
            Calendar calTo = Calendar.getInstance();
            calTo.setTime( eDate );
            calTo.set( Calendar.HOUR_OF_DAY, (Integer) jSpinnerToHours.getValue() );
            calTo.set( Calendar.MINUTE, (Integer) jSpinnerToMinutes.getValue() );
            calTo.set( Calendar.SECOND, (Integer) jSpinnerToSeconds.getValue() );
            calTo.set( Calendar.MILLISECOND, 0 );
            eDate.setTime( calTo.getTimeInMillis() );
            
            span = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("FOR_TIME_RANGE") + " " + humanDateFormat.format(sDate) + " " + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("TO") + " " + humanDateFormat.format(eDate);
        }

        // dateinterval = new DateInterval(sDate, eDate);
        dateinterval = new DateInterval();
        dateinterval.setStartDateComplete(sDate);
        dateinterval.setEndDateComplete(eDate);

        for (Object o : deleteDataList.getSelectedValues()) {
            props = (SensorProperties) o;
            list.add(props);
        }

        if (list.isEmpty()) {
            JOptionPane.showMessageDialog(this.gui.getMainFrame(), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("NO_SENSOR_SELECTED"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("HINT"), JOptionPane.OK_OPTION);
            return;
        }

        int answer = JOptionPane.showConfirmDialog(this.gui.getMainFrame(), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("THE_SELECTED") + " " + list.size() + " " + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("DATA_POINTS_WILL_BE") + " " + span + "\n" + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("VALIDATED_IN_DB") + "\n\n" + java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("ARE_YOU_SURE"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CONFIRMATION"), JOptionPane.YES_NO_OPTION);

        if (answer == 0) {
            cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CANCEL"));
            progressPanel.setVisible(true);
            ddT = new StoppableThread(this);
            ddT.running = true;
            ddT.start();
        }        
    }//GEN-LAST:event_validButtonActionPerformed

//    class DeleteDataThread extends StoppableThread {
    @Override
    public void run() {
        ddT.running = true;
        progressIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/waiting.gif"))); // NOI18N
        enableComponents(false);

        for (SensorProperties p : list) {
            if (!ddT.running) {
                progressLabel.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CANCELED"));
                cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CLOSE"));
                progressIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/waitEnd.png"))); // NOI18N
                enableComponents(true);
                list.clear();
                return;
            }
            progressLabel.setText(p.getSensorName());
            DataHandler dh = new DataHandler(p.getSensorID());
            
            if( mode == MODE_DELETE )
                dh.deleteValuesForTimeRange(dateinterval);
            else if( mode == MODE_INVALID )
                dh.invalidateValuesForTimeRange(dateinterval, mode);
            else if( mode == MODE_VALID )
                dh.invalidateValuesForTimeRange(dateinterval, mode);
        }
        // Alle Tabellen Optimieren
//            progressLabel.setText("Optimiere Event-Tabelle");
//            DBMaintenance.optimizeEvents();
//            progressLabel.setText("Optimiere Zeiten-Tabelle");
//            DBMaintenance.optimizeDateTimes();
//            progressLabel.setText("Optimiere Daten-Tabelle");
//            DBMaintenance.optimizeHistory();

        progressLabel.setText("Fertig");
        cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CLOSE"));
        progressIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/waitEnd.png"))); // NOI18N
        enableComponents(true);
        list.clear();
    }
//    }

    private void enableComponents(boolean b) {
        okButton.setEnabled(b);
        invalidButton.setEnabled(b);
        validButton.setEnabled(b);        
        deleteDataList.setEnabled(b);
        jCheckBox1.setEnabled(b);
        jRadioButton1.setEnabled(b);
        jRadioButton2.setEnabled(b);

        jPanel1.revalidate();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JList deleteDataList;
    private javax.swing.JButton invalidButton;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBox jCheckBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerFromHours;
    private javax.swing.JSpinner jSpinnerFromMinutes;
    private javax.swing.JSpinner jSpinnerFromSeconds;
    private javax.swing.JSpinner jSpinnerToHours;
    private javax.swing.JSpinner jSpinnerToMinutes;
    private javax.swing.JSpinner jSpinnerToSeconds;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel progressIconLabel;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JPanel progressPanel;
    private javax.swing.JButton validButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
