/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */

/*
 * CSVImportDialog.java
 *
 * Created on 02.02.2009, 17:43:50
 */
package de.jmonitoring.Components;

import de.jmonitoring.ApplicationProperties.AppPrefsDialog;
import de.jmonitoring.DataHandling.CSVDataImporter;
import de.jmonitoring.base.Messages;
import de.jmonitoring.base.MoniSoft;
import de.jmonitoring.base.MoniSoftConstants;
import de.jmonitoring.help.ManualBookmarks;
import de.jmonitoring.help.ManualViewer;
import de.jmonitoring.utils.StoppableThread;
import java.awt.Color;
import java.awt.Component;
import java.io.*;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author togro
 */
public class CSVImportDialog extends javax.swing.JDialog implements Runnable {

    final static int LIMIT = 10;
    private File file;
    final String DATELABEL = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CSVImportDialog.DATUMSFORMAT");
    final String TIMELABEL = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CSVImportDialog.ZEITFORMAT");
    final String DATETIMELABEL = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CSVImportDialog.ZEITPUNKTFORMAT");
    final static String EMPTYLABEL = " ";
    private DefaultComboBoxModel dateTimeCM = new DefaultComboBoxModel();
    private DefaultComboBoxModel dateCM = new DefaultComboBoxModel();
    private DefaultComboBoxModel timeCM = new DefaultComboBoxModel();
    private StoppableThread stoppThread;
    private Vector<String> header = new Vector<String>();
    private static ch.qos.logback.classic.Logger logger = MoniSoft.getInstance().getLogger();

    /**
     * Creates new form CSVImportDialog
     */
    public CSVImportDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setComboBoxes();
        setDateElements();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        headerPanel = new javax.swing.JPanel();
        jLabel68 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        importButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        headerRowTextField = new javax.swing.JTextField();
        importStartTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        dividerComboBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        encodingComboBox = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fileNameTextField = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        seperatedRadioButton = new javax.swing.JRadioButton();
        combinedRadioButton = new javax.swing.JRadioButton();
        upperDateText = new javax.swing.JLabel();
        upperComboBox = new javax.swing.JComboBox();
        lowerDateText = new javax.swing.JLabel();
        lowerComboBox = new javax.swing.JComboBox();
        upperColumn = new javax.swing.JTextField();
        lowerColumn = new javax.swing.JTextField();
        upperColumnLabel = new javax.swing.JLabel();
        lowerColumnLabel = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setModalExclusionType(null);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);

        headerPanel.setBackground(new java.awt.Color(0, 102, 204));
        headerPanel.setPreferredSize(new java.awt.Dimension(100, 40));

        jLabel68.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel68.setForeground(new java.awt.Color(255, 255, 255));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle"); // NOI18N
        jLabel68.setText(bundle.getString("CSVImportDialog.jLabel68.text")); // NOI18N

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/question-frame.png"))); // NOI18N
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setFocusPainted(false);
        jButton7.setIconTextGap(0);
        jButton7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7help(evt);
            }
        });

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 725, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel68, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton7)
                .addContainerGap())
        );

        getContentPane().add(headerPanel, java.awt.BorderLayout.NORTH);

        buttonPanel.setPreferredSize(new java.awt.Dimension(927, 50));

        importButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        importButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/accept.png"))); // NOI18N
        importButton.setText(bundle.getString("CSVImportDialog.importButton.text")); // NOI18N
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/cancel.png"))); // NOI18N
        cancelButton.setText(bundle.getString("CSVImportDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap(694, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(importButton)
                .addContainerGap())
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        importButton.setEnabled(!MoniSoft.getInstance().ISTRIAL);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.PAGE_END);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("CSVImportDialog.jPanel4.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9), new java.awt.Color(102, 102, 102))); // NOI18N
        jPanel4.setForeground(new java.awt.Color(153, 153, 153));

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel2.setText(bundle.getString("CSVImportDialog.jLabel2.text")); // NOI18N

        headerRowTextField.setText(bundle.getString("CSVImportDialog.headerRowTextField.text")); // NOI18N
        headerRowTextField.setToolTipText(bundle.getString("CSVImportDialog.headerRowTextField.toolTipText")); // NOI18N
        headerRowTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headerRowTextFieldActionPerformed(evt);
            }
        });
        headerRowTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                headerRowTextFieldFocusLost(evt);
            }
        });

        importStartTextField.setText(bundle.getString("CSVImportDialog.importStartTextField.text")); // NOI18N
        importStartTextField.setToolTipText(bundle.getString("CSVImportDialog.importStartTextField.toolTipText")); // NOI18N
        importStartTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importStartTextFieldActionPerformed(evt);
            }
        });
        importStartTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                importStartTextFieldFocusLost(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel3.setText(bundle.getString("CSVImportDialog.jLabel3.text")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel4.setText(bundle.getString("CSVImportDialog.jLabel4.text")); // NOI18N

        dividerComboBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        dividerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Komma", "Semikolon", "Tabulator", "Leerzeichen" }));
        dividerComboBox.setToolTipText(bundle.getString("CSVImportDialog.dividerComboBox.toolTipText")); // NOI18N
        dividerComboBox.setMinimumSize(new java.awt.Dimension(68, 21));
        dividerComboBox.setPreferredSize(new java.awt.Dimension(68, 21));
        dividerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dividerComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel6.setText(bundle.getString("CSVImportDialog.jLabel6.text")); // NOI18N

        encodingComboBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        encodingComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "UTF-8", "ISO-8859-1" }));
        encodingComboBox.setMinimumSize(new java.awt.Dimension(84, 21));
        encodingComboBox.setPreferredSize(new java.awt.Dimension(84, 21));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(headerRowTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(importStartTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dividerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encodingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(headerRowTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(importStartTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(dividerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(encodingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("CSVImportDialog.jPanel6.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9), new java.awt.Color(102, 102, 102))); // NOI18N
        jPanel6.setForeground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel1.setText(bundle.getString("CSVImportDialog.jLabel1.text")); // NOI18N

        fileNameTextField.setToolTipText(bundle.getString("CSVImportDialog.fileNameTextField.toolTipText")); // NOI18N
        fileNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNameTextFieldActionPerformed(evt);
            }
        });

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/folder.png"))); // NOI18N
        jButton11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton11.setMinimumSize(new java.awt.Dimension(50, 20));
        jButton11.setPreferredSize(new java.awt.Dimension(25, 20));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(fileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("CSVImportDialog.jPanel3.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9), new java.awt.Color(102, 102, 102))); // NOI18N

        jTable1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10"
            }
        ));
        jTable1.setToolTipText(bundle.getString("CSVImportDialog.jTable1.toolTipText")); // NOI18N
        jTable1.setEnabled(false);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 893, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("CSVImportDialog.jPanel7.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9), new java.awt.Color(102, 102, 102))); // NOI18N

        buttonGroup1.add(seperatedRadioButton);
        seperatedRadioButton.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        seperatedRadioButton.setText(bundle.getString("CSVImportDialog.seperatedRadioButton.text")); // NOI18N
        seperatedRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seperatedRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(combinedRadioButton);
        combinedRadioButton.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        combinedRadioButton.setSelected(true);
        combinedRadioButton.setText(bundle.getString("CSVImportDialog.combinedRadioButton.text")); // NOI18N
        combinedRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combinedRadioButtonActionPerformed(evt);
            }
        });

        upperDateText.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        upperDateText.setText(bundle.getString("CSVImportDialog.upperDateText.text")); // NOI18N
        upperDateText.setMaximumSize(new java.awt.Dimension(80, 19));
        upperDateText.setMinimumSize(new java.awt.Dimension(80, 19));
        upperDateText.setPreferredSize(new java.awt.Dimension(80, 19));

        upperComboBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        upperComboBox.setToolTipText(bundle.getString("CSVImportDialog.upperComboBox.toolTipText")); // NOI18N
        upperComboBox.setMinimumSize(new java.awt.Dimension(68, 19));
        upperComboBox.setPreferredSize(new java.awt.Dimension(68, 19));
        upperComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upperComboBoxActionPerformed(evt);
            }
        });

        lowerDateText.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        lowerDateText.setText(bundle.getString("CSVImportDialog.lowerDateText.text")); // NOI18N
        lowerDateText.setMaximumSize(new java.awt.Dimension(80, 19));
        lowerDateText.setMinimumSize(new java.awt.Dimension(80, 19));
        lowerDateText.setPreferredSize(new java.awt.Dimension(80, 19));

        lowerComboBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        lowerComboBox.setToolTipText(bundle.getString("CSVImportDialog.lowerComboBox.toolTipText")); // NOI18N
        lowerComboBox.setMinimumSize(new java.awt.Dimension(68, 19));
        lowerComboBox.setPreferredSize(new java.awt.Dimension(68, 19));
        lowerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowerComboBoxActionPerformed(evt);
            }
        });

        upperColumn.setText(bundle.getString("CSVImportDialog.upperColumn.text")); // NOI18N
        upperColumn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upperColumnActionPerformed(evt);
            }
        });
        upperColumn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                upperColumnFocusLost(evt);
            }
        });

        lowerColumn.setText(bundle.getString("CSVImportDialog.lowerColumn.text")); // NOI18N
        lowerColumn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowerColumnActionPerformed(evt);
            }
        });
        lowerColumn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                lowerColumnFocusLost(evt);
            }
        });

        upperColumnLabel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        upperColumnLabel.setText(bundle.getString("CSVImportDialog.upperColumnLabel.text")); // NOI18N

        lowerColumnLabel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        lowerColumnLabel.setText(bundle.getString("CSVImportDialog.lowerColumnLabel.text")); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(seperatedRadioButton)
                    .addComponent(combinedRadioButton))
                .addGap(93, 93, 93)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(upperDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(upperComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(lowerDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lowerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(upperColumnLabel)
                    .addComponent(lowerColumnLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(upperColumn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowerColumn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seperatedRadioButton)
                    .addComponent(upperColumn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(upperColumnLabel))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lowerColumn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lowerColumnLabel)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combinedRadioButton)))
                .addContainerGap())
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(upperDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(upperComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lowerDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );

        jProgressBar1.setMinimum(1);
        jProgressBar1.setMaximumSize(new java.awt.Dimension(32767, 20));
        jProgressBar1.setMinimumSize(new java.awt.Dimension(10, 20));
        jProgressBar1.setPreferredSize(new java.awt.Dimension(148, 20));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 903, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        JFileChooser chooser = new JFileChooser();

        // Holen des letzten Ordners in den Anwendungseinstellungen
        if (!MoniSoft.getInstance().getApplicationProperties().getProperty("LastCSVImport").isEmpty()) {
            File folder = new File(MoniSoft.getInstance().getApplicationProperties().getProperty("LastCSVImport"));
            if (folder.exists()) {
                chooser.setCurrentDirectory(folder);
            }
        }

        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.showOpenDialog(this);
        if (chooser.getSelectedFile() != null) {
            fileNameTextField.setText(chooser.getSelectedFile().toString() + File.separator);
            file = chooser.getSelectedFile();

            // Speichern des Ordners in den Anwendungseinstellungen
            MoniSoft.getInstance().getApplicationProperties().setProperty("LastCSVImport", file.getParent());
            try {
                AppPrefsDialog.saveProperties(false, false);
            } catch (Exception ex) {
                Messages.showException(ex);
                Messages.showException(ex);
            }
            updateSample(getDelimiter(), getHeaderRow(), getStartRow());
        }
}//GEN-LAST:event_jButton11ActionPerformed

    private void fileNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNameTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_fileNameTextFieldActionPerformed

    private void headerRowTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headerRowTextFieldActionPerformed
        updateSample(getDelimiter(), getHeaderRow(), getStartRow());
    }//GEN-LAST:event_headerRowTextFieldActionPerformed

    private void importStartTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importStartTextFieldActionPerformed
        updateSample(getDelimiter(), getHeaderRow(), getStartRow());
    }//GEN-LAST:event_importStartTextFieldActionPerformed

    private void upperColumnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upperColumnActionPerformed
        updateSample(getDelimiter(), getHeaderRow(), getStartRow());
    }//GEN-LAST:event_upperColumnActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if (stoppThread != null && stoppThread.running) {
            stoppThread.running = false;
            cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CSVImportDialog.SCHLIESSEN"));
            importButton.setEnabled(true);
        } else {
            dispose();
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void dividerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dividerComboBoxActionPerformed
        updateSample(getDelimiter(), getHeaderRow(), getStartRow());
    }//GEN-LAST:event_dividerComboBoxActionPerformed

    private void combinedRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combinedRadioButtonActionPerformed
        setDateElements();
        updateSample(getDelimiter(), getHeaderRow(), getStartRow());
    }//GEN-LAST:event_combinedRadioButtonActionPerformed

    private void seperatedRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seperatedRadioButtonActionPerformed
        setDateElements();
        updateSample(getDelimiter(), getHeaderRow(), getStartRow());
    }//GEN-LAST:event_seperatedRadioButtonActionPerformed

    private void jButton7help(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7help
        if (!ManualViewer.isShown) {
            ManualViewer viewer = new ManualViewer();
            viewer.showManual();
        }
        ManualViewer.goToPage(ManualBookmarks.CSV_IMPORT.getPage());
}//GEN-LAST:event_jButton7help

    private void lowerColumnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowerColumnActionPerformed
        updateSample(getDelimiter(), getHeaderRow(), getStartRow());
    }//GEN-LAST:event_lowerColumnActionPerformed

    private void upperComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upperComboBoxActionPerformed
        updateSample(getDelimiter(), getHeaderRow(), getStartRow());
    }//GEN-LAST:event_upperComboBoxActionPerformed

    private void lowerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowerComboBoxActionPerformed
        updateSample(getDelimiter(), getHeaderRow(), getStartRow());
    }//GEN-LAST:event_lowerComboBoxActionPerformed

    private void lowerColumnFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lowerColumnFocusLost
        updateSample(getDelimiter(), getHeaderRow(), getStartRow());
    }//GEN-LAST:event_lowerColumnFocusLost

    private void upperColumnFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_upperColumnFocusLost
        updateSample(getDelimiter(), getHeaderRow(), getStartRow());
    }//GEN-LAST:event_upperColumnFocusLost

    private void headerRowTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_headerRowTextFieldFocusLost
        if (getStartRow() <= getHeaderRow()) {
            importStartTextField.setText(String.valueOf(getHeaderRow() + 1));
        }
        updateSample(getDelimiter(), getHeaderRow(), getStartRow());
    }//GEN-LAST:event_headerRowTextFieldFocusLost

    private void importStartTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_importStartTextFieldFocusLost
        if (getStartRow() <= getHeaderRow()) {
            importStartTextField.setText(String.valueOf(getHeaderRow() + 1));
        }
        updateSample(getDelimiter(), getHeaderRow(), getStartRow());
    }//GEN-LAST:event_importStartTextFieldFocusLost

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        if (MoniSoft.getInstance().ISTRIAL) {
            Messages.showMessage(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CSVImportDialog.CSV-IMPORT IN DEMOVERSION DEAKTIVIERT") + "\n", true);
            return;
        }

        importButton.setEnabled(false);
        stoppThread = new StoppableThread(this);
        stoppThread.start();
    }//GEN-LAST:event_importButtonActionPerformed

    private void updateSample(char delimiter, int headerRow, int startRow) {
        String[] rowItems;
        Vector v = new Vector();
        BufferedReader br = null;
        String timeFormat;
        try {
            br = new BufferedReader(new FileReader(file));
            int i;
            // Überschriften stehen in x-ter Zeile, alle Zeilen bis dahin überspringen
            for (i = 1; i < headerRow; i++) {
                br.readLine();
            }

            // Header lesen
            rowItems = parseCSV(br.readLine(), delimiter);
            header = new Vector(Arrays.asList(rowItems));

            // cut header to first 10 columns
            while (header.size() > 10) {
                header.removeElementAt(header.size() - 1);
            }

            i++; // Zeile gelesen

            // Zeilen bis zum Import-Start überspringen
            while (i < startRow) {
                br.readLine();
                i++;
            }

            // so lange lesen bis Dateiende erreicht oder 20 Zeilen gelesen
            while (br.ready() && i <= 20) {
                rowItems = parseCSV(br.readLine(), delimiter);
                v.add(new Vector(Arrays.asList(rowItems)));
                // cut values to first 10 columns
                while (v.size() > 10) {
                    v.removeElementAt(v.size() - 1);
                }
                i++;
            }
            DefaultTableModel model = new DefaultTableModel(v, header);
            jTable1.setModel(model);
            if (combinedRadioButton.isSelected()) {
                timeFormat = null;
            } else {
                timeFormat = lowerComboBox.getSelectedItem().toString();
            }
            jTable1.setDefaultRenderer(Object.class, new CustomTableCellRenderer(upperComboBox.getSelectedItem().toString(), timeFormat, Integer.parseInt(upperColumn.getText()), Integer.parseInt(lowerColumn.getText())));



        } catch (FileNotFoundException e) {
            Messages.showException(e);
        } catch (IOException e) {
            Messages.showException(e);
        } finally {
            try {
                br.close();
            } catch (IOException e) {
                Messages.showException(e);
                Messages.showException(e);
            }
        }
    }

    private String[] parseCSV(String csvLine, char delimiter) {

        Pattern csvPattern = Pattern.compile("\"([^\"]*)\"|(?<=" + delimiter + "|^)([^" + delimiter + "]*)(?:" + delimiter + "|$)");
//        Pattern csvPattern = Pattern.compile("\"([^\"]*)\"|(?<=;|^)([^;]*)(?:;|$)");
        ArrayList<String> allMatches = new ArrayList<String>();
        Matcher matcher = null;
        String match = null;
        matcher = csvPattern.matcher(csvLine);
        int size;

        allMatches.clear();
        while (matcher.find()) {
            match = matcher.group(1);
            if (match != null) {
                allMatches.add(match);
            } else {
                allMatches.add(matcher.group(2));
            }
        }
        size = allMatches.size();
        if (size > 0) {
            return allMatches.toArray(new String[size]);
        } else {
            return new String[0];
        }
    }

    private char getDelimiter() {
        char s = ',';
        int i = dividerComboBox.getSelectedIndex();
        switch (i) {
            case 0:
                s = ',';
                break;
            case 1:
                s = ';';
                break;
            case 2:
                s = '\t';
                break;
            case 3:
                s = ' ';
        }
        return s;
    }

    private int getHeaderRow() {
        Integer row;
        try {
            row = Integer.parseInt(headerRowTextField.getText());
        } catch (NumberFormatException e) {
            row = 1;
        }

        return row;
    }

    private int getStartRow() {
        Integer row;
        try {
            row = Integer.parseInt(importStartTextField.getText());
        } catch (NumberFormatException e) {
            row = 2;
        }

        return row;
    }

    private void setDateElements() {
        if (seperatedRadioButton.isSelected()) {
            upperDateText.setText(DATELABEL);
            lowerDateText.setText(TIMELABEL);
            lowerComboBox.setVisible(true);
            upperComboBox.setModel(dateCM);
            lowerComboBox.setModel(timeCM);
            lowerColumnLabel.setVisible(true);
            lowerColumn.setVisible(true);
        } else {
            lowerComboBox.setVisible(false);
            upperDateText.setText(DATETIMELABEL);
            lowerDateText.setText(EMPTYLABEL);
            upperComboBox.setModel(dateTimeCM);
            lowerColumnLabel.setVisible(false);
            lowerColumn.setVisible(false);
        }
    }

    private void setComboBoxes() {
        dateTimeCM.addElement("dd.MM.yyyy HH:mm:ss");
        dateTimeCM.addElement("dd.MM.yyyy HH:mm");
        dateTimeCM.addElement("dd.MM.yy HH:mm:ss");
        dateTimeCM.addElement("dd.MM.yy HH:mm");
        dateTimeCM.addElement("yyyy-MM-dd HH:mm:ss");
        dateTimeCM.addElement("yyyy-MM-dd HH:mm");
        dateTimeCM.addElement("yy-MM-dd HH:mm:ss");
        dateTimeCM.addElement("yy-MM-dd HH:mm");
        dateTimeCM.addElement("dd/MM/yy HH:mm:ss");
        dateTimeCM.addElement("dd/MM/yy HH:mm");
        dateTimeCM.addElement("dd/MM/yyyy HH:mm:ss");
        dateTimeCM.addElement("dd/MM/yyyy HH:mm");
        dateTimeCM.addElement("yy/MM/dd HH:mm:ss");
        dateTimeCM.addElement("yy/MM/dd HH:mm");
        dateTimeCM.addElement("yyyy/MM/dd HH:mm:ss");
        dateTimeCM.addElement("yyyy/MM/dd HH:mm");
        dateTimeCM.addElement(MoniSoftConstants.UNIXTIMSTAMP);
        dateTimeCM.addElement("dd/MM/yy");
        dateTimeCM.addElement("dd/MM/yyyy");
        dateTimeCM.addElement("yy/MM/dd");
        dateTimeCM.addElement("yyyy/MM/dd");

        dateCM.addElement("dd.MM.yyyy");
        dateCM.addElement("dd.MM.yy");
        dateCM.addElement("yyyy-MM-dd");
        dateCM.addElement("yy-MM-dd");

        timeCM.addElement("HH:mm:ss");
        timeCM.addElement("HH:mm");
    }

    @Override
    public void run() {
        stoppThread.running = true;
        cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CSVImportDialog.ABBRECHEN"));
        String timeFormat;

        if (combinedRadioButton.isSelected()) {
            timeFormat = null;
        } else {
            timeFormat = lowerComboBox.getSelectedItem().toString();
        }

        jProgressBar1.setStringPainted(true);
        CSVDataImporter importer = new CSVDataImporter(jProgressBar1, MoniSoft.getInstance().getDBConnector());
        Integer count = importer.loadCSVFiletoDB(file, Integer.parseInt(headerRowTextField.getText()), Integer.parseInt(importStartTextField.getText()), Integer.parseInt(upperColumn.getText()), Integer.parseInt(lowerColumn.getText()), getDelimiter(), '"', upperComboBox.getSelectedItem().toString(), timeFormat, true);

        for (String failed : importer.getFailed()) {
            Messages.showMessage(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CSVImportDialog.UNKNOWNSENSOR") + " [" + file.getName() + "]: '" + failed + "'\n", true);
            logger.warn(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CSVImportDialog.UNKNOWNSENSOR") + " [" + file.getName() + "]: '" + failed + "'");
        }

        if (count != null) {
            JOptionPane.showMessageDialog(this, java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CSVImportDialog.DATENIMPORT ERFOLGREICH BEENDET"), new Object[]{count}));
            logger.info(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CSVImportDialog.DATENIMPORT ERFOLGREICH BEENDET"));
            stoppThread.running = false;
//           
            cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CSVImportDialog.SCHLIESSEN"));
            importButton.setEnabled(true);
        } else {
            if (stoppThread.running) {
                JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CSVImportDialog.ERROR") + "\n\n" + importer.getErrorReason());
                logger.error(importer.getErrorReason());
                stoppThread.running = false;
            } else {
                JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CSVImportDialog.USERCANCEL") + "  " + importer.getErrorReason());
                logger.warn(importer.getErrorReason());
            }
            cancelButton.setText(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("CSVImportDialog.SCHLIESSEN"));
            importButton.setEnabled(true);
        }
    }

    static class CustomTableCellRenderer extends DefaultTableCellRenderer {

        String dateFormat, timeFormat;
        int dateColumn, timeColumn;

        public CustomTableCellRenderer(String dateF, String timeF, int dcol, int tcol) {
            dateColumn = dcol;
            dateFormat = dateF.equals(MoniSoftConstants.UNIXTIMSTAMP) ? MoniSoftConstants.UNIXTIMEFORMAT : dateF;
            timeColumn = tcol;
            timeFormat = timeF;
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if (value instanceof String) {

                if (timeFormat == null) { // Datum und Zeit in einer Spalte
                    if (column == dateColumn - 1) {  // wenn es die angedeutete Datumsspalte ist
                        if (isDateTime(value)) {
                            cell.setBackground(Color.GREEN);
                        } else {
                            cell.setBackground(Color.RED);
                        }
                    } else {
                        cell.setBackground(Color.WHITE);
                    }
                } else { // Datum und Zeit getrennt
                    if (column == dateColumn - 1) {  // wenn es die angedeutete Datumsspalte ist
                        if (isDate(value)) {
                            cell.setBackground(Color.GREEN);
                        } else {
                            cell.setBackground(Color.RED);
                        }
                    } else if (column == timeColumn - 1) {
                        if (isTime(value)) {
                            cell.setBackground(Color.YELLOW);
                            cell.setBackground(Color.getHSBColor(0.33f, 0.25f, 1.0f));
                        } else {
                            cell.setBackground(Color.RED);
                        }
                    } else {
                        cell.setBackground(Color.WHITE);
                    }
                }
            }
            return cell;
        }

        private boolean isDateTime(Object value) {
            try {
                if (dateFormat.equals(MoniSoftConstants.UNIXTIMEFORMAT)) {
                    DecimalFormat df = new DecimalFormat(MoniSoftConstants.UNIXTIMEFORMAT);
                    df.parse(value.toString());
                } else {
                    SimpleDateFormat df = new SimpleDateFormat(dateFormat);
                    df.parse(value.toString());
                }
                return true;
            } catch (ParseException ex) {
                return false;
            }
        }

        private boolean isTime(Object value) {
            try {
                SimpleDateFormat df = new SimpleDateFormat(timeFormat);
                df.parse(value.toString());
                return true;
            } catch (ParseException ex) {
                return false;
            }
        }

        private boolean isDate(Object value) {
            try {
                SimpleDateFormat df = new SimpleDateFormat(dateFormat);
                df.parse(value.toString());
                return true;
            } catch (ParseException ex) {
                return false;
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton combinedRadioButton;
    private javax.swing.JComboBox dividerComboBox;
    private javax.swing.JComboBox encodingComboBox;
    private javax.swing.JTextField fileNameTextField;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JTextField headerRowTextField;
    private javax.swing.JButton importButton;
    private javax.swing.JTextField importStartTextField;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField lowerColumn;
    private javax.swing.JLabel lowerColumnLabel;
    private javax.swing.JComboBox lowerComboBox;
    private javax.swing.JLabel lowerDateText;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButton seperatedRadioButton;
    private javax.swing.JTextField upperColumn;
    private javax.swing.JLabel upperColumnLabel;
    private javax.swing.JComboBox upperComboBox;
    private javax.swing.JLabel upperDateText;
    // End of variables declaration//GEN-END:variables
}
