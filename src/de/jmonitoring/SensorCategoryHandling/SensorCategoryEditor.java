/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SensorCategoryEditor.java
 *
 * Created on 04.11.2009, 13:20:02
 */
package de.jmonitoring.SensorCategoryHandling;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import de.jmonitoring.base.Messages;
import de.jmonitoring.base.MoniSoft;
import de.jmonitoring.base.MoniSoftConstants;
import de.jmonitoring.base.sensors.SensorInformation;
import de.jmonitoring.base.sensors.SensorProperties;
import de.jmonitoring.help.ManualBookmarks;
import de.jmonitoring.help.ManualViewer;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTree;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.DefaultTreeSelectionModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import net.antonioshome.swing.treewrapper.CustomPopupHandler;
import net.antonioshome.swing.treewrapper.TreeWrapper;

/**
 *
 * @author togro
 */
public class SensorCategoryEditor extends javax.swing.JDialog {

    private final TreeWrapper wrapper;
//    private int lft = 1;
//    private int rgt = 2;
    private JTree treeToActOn;
    private TreeNode nodeToActOn;
    private boolean changed = false;
    private final String changeText = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorCategoryEditor.GEÃ„NDERT");
    private DefaultListModel defaultModel;
    private DefaultListModel sortedModel;

    /**
     * Creates new form SensorCategoryEditor
     */
    public SensorCategoryEditor(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        defaultModel = getDefaultModel();
        sortedModel = getSortedModel();
        fillSelector(defaultModel);

        TreeModel treeModel = new NestedSet().getTreeModelFromNestedSet(NestedSetTransfer.readNestedSetFromDB("KAT"));
        wrapper = new TreeWrapper(tree);

        tree.setModel(treeModel);
        TreeSelectionModel tsm = new DefaultTreeSelectionModel();
        tsm.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        tree.setSelectionModel(tsm);
        tree.setCellRenderer(new SensorTreeCellRenderer());
        wrapper.setCustomPopupHandler(new MyCustomPopupHandler());
        treeModel.addTreeModelListener(new TreeModelListener() {
            @Override
            public void treeNodesChanged(TreeModelEvent e) {
                changed = true;
                changeIndicatorlabel.setText(changeText);
            }

            @Override
            public void treeNodesInserted(TreeModelEvent e) {
                changed = true;
                changeIndicatorlabel.setText(changeText);
            }

            @Override
            public void treeNodesRemoved(TreeModelEvent e) {
                changed = true;
                changeIndicatorlabel.setText(changeText);
            }

            @Override
            public void treeStructureChanged(TreeModelEvent e) {
                changed = true;
                changeIndicatorlabel.setText(changeText);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        catPopupMenu = new javax.swing.JPopupMenu();
        addMenuItem = new javax.swing.JMenuItem();
        removeMenuItem = new javax.swing.JMenuItem();
        renameMenuItem = new javax.swing.JMenuItem();
        sensorPopupMenu = new javax.swing.JPopupMenu();
        removeSensorMenuItem = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jLabel68 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        flyOutAllButton = new javax.swing.JButton();
        unexpandButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tree = new SensorJtree();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        keyEditorSensorSelector = new javax.swing.JList();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        changeIndicatorlabel = new javax.swing.JLabel();

        addMenuItem.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/SensorCategoryHandling/Bundle"); // NOI18N
        addMenuItem.setText(bundle.getString("SensorCategoryEditor.addMenuItem.text")); // NOI18N
        addMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryAction(evt);
            }
        });
        catPopupMenu.add(addMenuItem);

        removeMenuItem.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        removeMenuItem.setText(bundle.getString("SensorCategoryEditor.removeMenuItem.text")); // NOI18N
        removeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCategoryAction(evt);
            }
        });
        catPopupMenu.add(removeMenuItem);

        renameMenuItem.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        renameMenuItem.setText(bundle.getString("SensorCategoryEditor.renameMenuItem.text")); // NOI18N
        renameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameCategoryAction(evt);
            }
        });
        catPopupMenu.add(renameMenuItem);

        removeSensorMenuItem.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        removeSensorMenuItem.setText(bundle.getString("SensorCategoryEditor.removeSensorMenuItem.text")); // NOI18N
        removeSensorMenuItem.setActionCommand(bundle.getString("SensorCategoryEditor.removeSensorMenuItem.actionCommand")); // NOI18N
        removeSensorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSensorMenuItemdeleteAction(evt);
            }
        });
        sensorPopupMenu.add(removeSensorMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);

        jPanel1.setPreferredSize(new java.awt.Dimension(618, 28));

        okButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/accept.png"))); // NOI18N
        okButton.setText(bundle.getString("SensorCategoryEditor.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/cancel.png"))); // NOI18N
        cancelButton.setText(bundle.getString("SensorCategoryEditor.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jButton2.setText(bundle.getString("SensorCategoryEditor.jButton2.text")); // NOI18N
        jButton2.setToolTipText(bundle.getString("SensorCategoryEditor.jButton2.toolTipText")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jButton3.setText(bundle.getString("SensorCategoryEditor.jButton3.text")); // NOI18N
        jButton3.setToolTipText(bundle.getString("SensorCategoryEditor.jButton3.toolTipText")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 566, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel18.setBackground(new java.awt.Color(0, 102, 204));
        jPanel18.setPreferredSize(new java.awt.Dimension(100, 40));

        jLabel68.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel68.setForeground(new java.awt.Color(255, 255, 255));
        jLabel68.setText(bundle.getString("SensorCategoryEditor.jLabel68.text")); // NOI18N

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/question-frame.png"))); // NOI18N
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setFocusPainted(false);
        jButton7.setIconTextGap(0);
        jButton7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                help(evt);
            }
        });

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 611, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel68, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
        );

        getContentPane().add(jPanel18, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setDividerLocation(450);
        jSplitPane1.setDividerSize(8);
        jSplitPane1.setOneTouchExpandable(true);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setMaximumSize(new java.awt.Dimension(32767, 30));
        jPanel4.setMinimumSize(new java.awt.Dimension(100, 30));
        jPanel4.setPreferredSize(new java.awt.Dimension(299, 30));
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        flyOutAllButton.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        flyOutAllButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/expand.png"))); // NOI18N
        flyOutAllButton.setToolTipText(bundle.getString("SensorCategoryEditor.flyOutAllButton.toolTipText")); // NOI18N
        flyOutAllButton.setMaximumSize(new java.awt.Dimension(23, 23));
        flyOutAllButton.setMinimumSize(new java.awt.Dimension(23, 23));
        flyOutAllButton.setPreferredSize(new java.awt.Dimension(23, 23));
        flyOutAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flyOutAllButtonActionPerformed(evt);
            }
        });
        jPanel4.add(flyOutAllButton);

        unexpandButton.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        unexpandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/collapse.png"))); // NOI18N
        unexpandButton.setToolTipText(bundle.getString("SensorCategoryEditor.unexpandButton.toolTipText")); // NOI18N
        unexpandButton.setMaximumSize(new java.awt.Dimension(23, 23));
        unexpandButton.setMinimumSize(new java.awt.Dimension(23, 23));
        unexpandButton.setPreferredSize(new java.awt.Dimension(23, 23));
        unexpandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unexpandButtonActionPerformed(evt);
            }
        });
        jPanel4.add(unexpandButton);

        jPanel5.setMaximumSize(new java.awt.Dimension(20, 20));
        jPanel5.setMinimumSize(new java.awt.Dimension(20, 20));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jPanel4.add(jPanel5);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel3.setText(bundle.getString("SensorCategoryEditor.jLabel3.text")); // NOI18N
        jPanel4.add(jLabel3);

        jComboBox1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "KAT" }));
        jComboBox1.setEnabled(false);
        jComboBox1.setMaximumSize(new java.awt.Dimension(2000, 20));
        jComboBox1.setMinimumSize(new java.awt.Dimension(20, 20));
        jPanel4.add(jComboBox1);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/add.png"))); // NOI18N
        jButton1.setToolTipText(bundle.getString("SensorCategoryEditor.jButton1.toolTipText")); // NOI18N
        jButton1.setEnabled(false);
        jButton1.setMaximumSize(new java.awt.Dimension(20, 20));
        jButton1.setMinimumSize(new java.awt.Dimension(20, 20));
        jButton1.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel4.add(jButton1);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/delete.png"))); // NOI18N
        jButton6.setToolTipText(bundle.getString("SensorCategoryEditor.jButton6.toolTipText")); // NOI18N
        jButton6.setEnabled(false);
        jButton6.setMaximumSize(new java.awt.Dimension(20, 20));
        jButton6.setMinimumSize(new java.awt.Dimension(20, 20));
        jButton6.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel4.add(jButton6);

        jPanel3.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        jScrollPane2.setAutoscrolls(true);

        tree.setEditable(true);
        tree.setScrollsOnExpand(false);
        jScrollPane2.setViewportView(tree);

        jPanel3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel3);

        jPanel6.setLayout(new java.awt.BorderLayout());

        keyEditorSensorSelector.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        keyEditorSensorSelector.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        keyEditorSensorSelector.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        keyEditorSensorSelector.setDragEnabled(true);
        keyEditorSensorSelector.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(keyEditorSensorSelector);

        jPanel6.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel7.setMaximumSize(new java.awt.Dimension(32767, 30));
        jPanel7.setMinimumSize(new java.awt.Dimension(100, 30));
        jPanel7.setPreferredSize(new java.awt.Dimension(829, 30));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        jPanel6.add(jPanel7, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setRightComponent(jPanel6);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel1.setText(bundle.getString("SensorCategoryEditor.jLabel1.text")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel2.setText(bundle.getString("SensorCategoryEditor.jLabel2.text")); // NOI18N

        changeIndicatorlabel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        changeIndicatorlabel.setForeground(new java.awt.Color(255, 0, 0));
        changeIndicatorlabel.setText(bundle.getString("SensorCategoryEditor.changeIndicatorlabel.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(changeIndicatorlabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 764, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 939, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(changeIndicatorlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addCategoryAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoryAction
        if (treeToActOn != null) {
            DefaultTreeModel model = (DefaultTreeModel) treeToActOn.getModel();
            CategoryTreeNode newNode = new CategoryTreeNode(java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorCategoryEditor.NONAME"));
            model.insertNodeInto(newNode, (CategoryTreeNode) nodeToActOn, nodeToActOn.getChildCount());
            treeToActOn.setSelectionPath(getPath(newNode));
            treeToActOn.startEditingAtPath(treeToActOn.getSelectionPath());
            changed = true;
            changeIndicatorlabel.setText(changeText);
        }
}//GEN-LAST:event_addCategoryAction

    private void deleteCategoryAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCategoryAction
        if (treeToActOn != null && nodeToActOn != null) {
            DefaultTreeModel model = (DefaultTreeModel) treeToActOn.getModel();
            model.removeNodeFromParent((CategoryTreeNode) nodeToActOn);
            treeToActOn = null;
            nodeToActOn = null;
            changed = true;
            changeIndicatorlabel.setText(changeText);
        }
}//GEN-LAST:event_deleteCategoryAction

    private void removeSensorMenuItemdeleteAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSensorMenuItemdeleteAction
        if (treeToActOn != null && nodeToActOn != null) {
            DefaultTreeModel model = (DefaultTreeModel) treeToActOn.getModel();
            model.removeNodeFromParent((DefaultMutableTreeNode) nodeToActOn);
            treeToActOn = null;
            nodeToActOn = null;
            changed = true;
            changeIndicatorlabel.setText(changeText);
        }
    }//GEN-LAST:event_removeSensorMenuItemdeleteAction

    private void renameCategoryAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameCategoryAction
        if (treeToActOn != null) {
            treeToActOn.startEditingAtPath(treeToActOn.getSelectionPath());
            changed = true;
            changeIndicatorlabel.setText(changeText);
        }
    }//GEN-LAST:event_renameCategoryAction

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        if (MoniSoft.getInstance().ISTRIAL) {
            Messages.showMessage(MoniSoftConstants.DEMO, true);
            return;
        }
        NestedSetTransfer.writeNestedSetToDB(new NestedSet().getNestedSetFromTreeModel(tree.getModel()), "KAT");
        changed = false;
        changeIndicatorlabel.setText("");
    }//GEN-LAST:event_SaveActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        if (changed) {
            if (JOptionPane.showConfirmDialog(null, java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorCategoryEditor.YOUMADECHANGES"), java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle").getString("SensorCategoryEditor.FRAGE"), JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
                return;
            }
        }
        dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void flyOutAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flyOutAllButtonActionPerformed
        expandAll(tree, new TreePath((TreeNode) tree.getModel().getRoot()), true);
}//GEN-LAST:event_flyOutAllButtonActionPerformed

    private void unexpandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unexpandButtonActionPerformed
        expandAll(tree, new TreePath((TreeNode) tree.getModel().getRoot()), false);
}//GEN-LAST:event_unexpandButtonActionPerformed

    private void help(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_help
        if (!ManualViewer.isShown) {
            ManualViewer viewer = new ManualViewer();
            viewer.showManual();
        }
        ManualViewer.goToPage(ManualBookmarks.SENSOR_CATEGORYS.getPage());
    }//GEN-LAST:event_help

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String xml = CategoryToXML(new NestedSet().getNestedSetFromTreeModel(tree.getModel()));
        writeToFile(xml);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        TreeMap newMap = CategoryFromXML();
        if (newMap != null) {
            TreeModel treeModel = new NestedSet().getTreeModelFromNestedSet(newMap);
            tree.setModel(treeModel);
            tree.revalidate();
            JOptionPane.showMessageDialog(this, "The sensor categories were reset. Remember to save to make changes permanent");
        } else {
            JOptionPane.showMessageDialog(this, "The sensor category file is empty. Catgegories left untouched.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    class MyCustomPopupHandler implements CustomPopupHandler {

        @Override
        public JPopupMenu getMenuAt(JTree aJTree, TreeNode aTreeNode) {
            treeToActOn = null;
            nodeToActOn = null;
            if (!aTreeNode.isLeaf()) { // es ist ein Ordner (Kategorie)
                treeToActOn = aJTree;
                nodeToActOn = aTreeNode;
                return catPopupMenu;
            } else { // es ist ein Blatt (Messpunkt)
                treeToActOn = aJTree;
                nodeToActOn = aTreeNode;
                return sensorPopupMenu;
            }
        }
    }

    public TreePath getPath(TreeNode node) {
        List list = new ArrayList();

        // Add all nodes to list
        while (node != null) {
            list.add(node);
            node = node.getParent();
        }
        Collections.reverse(list);

        // Convert array of nodes to TreePath
        return new TreePath(list.toArray());
    }

    private void expandAll(JTree tree, TreePath parent, boolean expand) {
        // Traverse children
        TreeNode node = (TreeNode) parent.getLastPathComponent();
        if (node.getChildCount() >= 0) {
            for (Enumeration e = node.children(); e.hasMoreElements();) {
                TreeNode n = (TreeNode) e.nextElement();
                TreePath path = parent.pathByAddingChild(n);
                expandAll(tree, path, expand);
            }
        }

        // Expansion or collapse must be done bottom-up
        if (expand) {
            tree.expandPath(parent);
        } else {
            tree.collapsePath(parent);
        }
    }

    private DefaultListModel getDefaultModel() {
        DefaultListModel model = new DefaultListModel();
        ArrayList<SensorProperties> list = SensorInformation.getSensorList();
        for (SensorProperties props : list) {
            if (!MoniSoftConstants.NO_SENSOR_SELECTED.equals(props.getSensorName())) { // wenn es nicht der Platzhalter (<keine>) ist...
                model.addElement(props);
            }
        }
        return model;
    }

    private DefaultListModel getSortedModel() {
        DefaultListModel model = new DefaultListModel();
        TreeMap<String, SensorProperties> set = new TreeMap<String, SensorProperties>();
        for (SensorProperties props : SensorInformation.getSensorList()) {
            set.put(props.getSensorName(), props);
        }
        for (SensorProperties props : set.values()) {
            if (!MoniSoftConstants.NO_SENSOR_SELECTED.equals(props.getSensorName())) { // wenn es nicht der Platzhalter (<keine>) ist...
                model.addElement(props);
            }
        }
        return model;
    }

    /**
     * Serialize this {@link NestedSet} to XML
     *
     * @param set
     * @return
     */
    private String CategoryToXML(TreeMap set) {
        XStream xstream = new XStream();        
//        xstream.alias("AnnotationContainer", AnnotationContainer.class); //NOI18N
//        xstream.alias("AnnotationElement", AnnotationElement.class); //NOI18N
        return xstream.toXML(set);
    }

    /**
     * Deserialize this XML to an {@link TreeMap}
     *
     * @param xml
     * @return the {@link TreeMap} or <code>null</code> if it cannot be built.
     */
    private TreeMap CategoryFromXML() {
        // XStream xstream = new XStream();
        XStream xstream = new XStream(new DomDriver("UTF-8"));
//        xstream.alias("AnnotationContainer", AnnotationContainer.class); //NOI18N
//        xstream.alias("AnnotationElement", AnnotationElement.class); //NOI18N
        String xml = readFromFile();        
        if (!xml.isEmpty()) {
            return (TreeMap) xstream.fromXML(xml);
        } else {
            return null;
        }
    }

    private String readFromFile() {
        StringBuilder builder = new StringBuilder();
        String line;
        String filename = MoniSoft.getInstance().getApplicationProperties().getProperty("DefaultSaveFolder") + System.getProperty("file.separator") + MoniSoft.getInstance().getDBConnector().getDBName() + System.getProperty("file.separator") + "SensorCategories.xml";
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(filename), "UTF-8"));            
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "The category file 'SensorCategories.xml' was not found in the Project folder");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "The category file 'SensorCategories.xml' could not be read");
        }
        return builder.toString();
    }

    private void writeToFile(String xml) {
        String filename = MoniSoft.getInstance().getApplicationProperties().getProperty("DefaultSaveFolder") + System.getProperty("file.separator") + MoniSoft.getInstance().getDBConnector().getDBName() + System.getProperty("file.separator") + "SensorCategories.xml";
        try {
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filename), "UTF-8"));
            out.write(xml);
            out.close();
            Messages.showMessage("Sensor categories written to SensorCategories.xml\n", true);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "The category file 'SensorCategories.xml' was not found in the Project folder");
        } catch (UnsupportedEncodingException ex) {
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "The category file 'SensorCategories.xml' could not be written");
        }
    }

    private void fillSelector(DefaultListModel model) {
        keyEditorSensorSelector.setModel(model);
        keyEditorSensorSelector.revalidate();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addMenuItem;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPopupMenu catPopupMenu;
    private javax.swing.JLabel changeIndicatorlabel;
    private javax.swing.JButton flyOutAllButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JList keyEditorSensorSelector;
    private javax.swing.JButton okButton;
    private javax.swing.JMenuItem removeMenuItem;
    private javax.swing.JMenuItem removeSensorMenuItem;
    private javax.swing.JMenuItem renameMenuItem;
    private javax.swing.JPopupMenu sensorPopupMenu;
    private javax.swing.JTree tree;
    private javax.swing.JButton unexpandButton;
    // End of variables declaration//GEN-END:variables
}
