/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.jmonitoring.Consistency;

import de.jmonitoring.Components.DatePanel;
import de.jmonitoring.Components.MoniSoftProgressBar;
import de.jmonitoring.SensorCollectionHandling.SensorCollectionHandler;
import de.jmonitoring.base.MainApplication;
import de.jmonitoring.base.Messages;
import de.jmonitoring.base.MoniSoftConstants;
import de.jmonitoring.base.sensors.SensorInformation;
import de.jmonitoring.help.ManualBookmarks;
import de.jmonitoring.help.ManualViewer;
import de.jmonitoring.utils.intervals.DateInterval;
import java.awt.BorderLayout;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.lang.String;
import java.util.Date;
import java.util.List;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import javax.swing.AbstractAction;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SwingWorker;

/**
 *
 * @author togro
 */
public class DataCheckFrame extends javax.swing.JInternalFrame {

    final DatePanel datePanel;
    private final MainApplication gui;
    private MoniSoftProgressBar progressBar;
    private final JButton goButton;
    private Worker worker;
    private final JLabel waitLabel = new JLabel(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/waiting.gif")));

    /**
     * Creates new form DataCheckFrame
     */
    public DataCheckFrame(MainApplication gui) {
        initComponents();
        this.gui = gui;
        datePanel = new DatePanel(gui, false);
        operationPanel.add(datePanel, BorderLayout.CENTER);
        goButton = new JButton(new StartAction("Go", new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/tick.png")), "Start processing"));
        operationPanel.add(goButton, BorderLayout.EAST);

        updateSelectionComboBox();
        operationPanel.add(sensorCollectionChooserPanel, BorderLayout.SOUTH);

        final JPopupMenu popup = new JPopupMenu();
        final JMenuItem menuItem = new JMenuItem("Copy");
        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                copyToClipboard(editorPane.getSelectedText());
            }
        });

        popup.add(menuItem);

        editorPane.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt) {
                if (evt.isPopupTrigger()) {
                    if (editorPane.getSelectedText() == null) {
                        return;
                    }
                    popup.show(evt.getComponent(), evt.getX(), evt.getY());
                }
            }

            public void mouseReleased(MouseEvent evt) {
                if (evt.isPopupTrigger()) {
                    if (editorPane.getSelectedText() == null) {
                        return;
                    }
                    popup.show(evt.getComponent(), evt.getX(), evt.getY());
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sensorCollectionChooserPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        savedSetSelector = new javax.swing.JComboBox();
        jButton7 = new javax.swing.JButton();
        operationPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        editorPane = new javax.swing.JEditorPane();

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/jmonitoring/Components/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("CompareTableFrame.jLabel1.text")); // NOI18N

        savedSetSelector.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        savedSetSelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        savedSetSelector.setMinimumSize(new java.awt.Dimension(68, 20));
        savedSetSelector.setPreferredSize(new java.awt.Dimension(350, 20));

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/jmonitoring/icons/question-frame.png"))); // NOI18N
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setFocusPainted(false);
        jButton7.setIconTextGap(0);
        jButton7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7help(evt);
            }
        });

        javax.swing.GroupLayout sensorCollectionChooserPanelLayout = new javax.swing.GroupLayout(sensorCollectionChooserPanel);
        sensorCollectionChooserPanel.setLayout(sensorCollectionChooserPanelLayout);
        sensorCollectionChooserPanelLayout.setHorizontalGroup(
            sensorCollectionChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sensorCollectionChooserPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addComponent(savedSetSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
        );
        sensorCollectionChooserPanelLayout.setVerticalGroup(
            sensorCollectionChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sensorCollectionChooserPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1))
            .addGroup(sensorCollectionChooserPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(savedSetSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(sensorCollectionChooserPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jButton7))
        );

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("de/jmonitoring/base/Bundle"); // NOI18N
        setTitle(bundle1.getString("INTEGRITY")); // NOI18N
        setMinimumSize(new java.awt.Dimension(550, 500));
        setPreferredSize(new java.awt.Dimension(650, 500));

        operationPanel.setLayout(new java.awt.BorderLayout());
        getContentPane().add(operationPanel, java.awt.BorderLayout.PAGE_START);

        editorPane.setEditable(false);
        editorPane.setContentType("text/html"); // NOI18N
        editorPane.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        editorPane.setDragEnabled(true);
        editorPane.setPreferredSize(new java.awt.Dimension(300, 400));
        jScrollPane1.setViewportView(editorPane);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton7help(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7help
        if (!ManualViewer.isShown) {
            ManualViewer viewer = new ManualViewer();
            viewer.showManual();
        }
        ManualViewer.goToPage(ManualBookmarks.DATA_CHECK.getPage());
    }//GEN-LAST:event_jButton7help

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane editorPane;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel operationPanel;
    private javax.swing.JComboBox savedSetSelector;
    private javax.swing.JPanel sensorCollectionChooserPanel;
    // End of variables declaration//GEN-END:variables

    private class StartAction extends AbstractAction {

        public StartAction(String name, Icon icon, String toolTip) {
            super(name, icon);
            putValue(SHORT_DESCRIPTION, toolTip);
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            progressBar = gui.getProgressBarpanel().addProgressBar("DataCheck");
            progressBar.addProgressCancelButtonActionListener(action);
            progressBar.setMinMax(0, SensorInformation.getSensorList().size());
            progressBar.setText("Checking data");
            progressBar.setValue(0);
            goButton.setEnabled(false);
            editorPane.setText("");
            remove(jScrollPane1);
            add(waitLabel, BorderLayout.CENTER);
            revalidate();
            doLayout();
            Point p = getLocation();
            setLocation((int) p.getX(), (int) p.getY() + 1);
            setLocation((int) p.getX(), (int) p.getY());
            setClosable(false);
            worker = new Worker();
            worker.execute();
        }
    }
    private ActionListener action = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            worker.cancel(true);
        }
    };

    public class Worker extends SwingWorker<String, Integer> {

        public Worker() {
        }

        @Override
        protected String doInBackground() throws Exception {

            ValueTests tests = new ValueTests(this);
            Date start = datePanel.getStartDate();
            Date end = datePanel.getEndDate();
            String s;
            if (savedSetSelector.getSelectedItem().toString().equals(MoniSoftConstants.ALL)) {
                s = tests.checkAllRegularity(new DateInterval(start, end));
            } else {
                s = tests.checkRegularityOf(new DateInterval(start, end), savedSetSelector.getSelectedItem().toString());
            }

            return s;
        }

        //Expose a method to publish results
        public void publishValue(int i) {
            publish(i);
        }

        @Override
        protected void process(List<Integer> chunks) {
            for (Integer i : chunks) {
                progressBar.setValue(i);
            }

        }

        @Override
        protected void done() {
            try {
                String s = get();
                s = "<html><body>" + s + "</body></html>";
                editorPane.setText(s);
            } catch (InterruptedException ex) {
                Messages.showException(ex);
                reset();
            } catch (ExecutionException ex) {
                Messages.showException(ex);
                reset();
            } catch (CancellationException e) {
                Messages.showException(e);
                reset();
            } catch (Exception e) {
                Messages.showException(e);
            }
            reset();
        }

        private void reset() {
            setClosable(true);
            progressBar.remove();
            goButton.setEnabled(true);
            remove(waitLabel);
            add(jScrollPane1, BorderLayout.CENTER);
            jScrollPane1.doLayout();
            jScrollPane1.revalidate();
            Point p = getLocation();
            setLocation((int) p.getX(), (int) p.getY() + 1);
            setLocation((int) p.getX(), (int) p.getY());
            revalidate();
            doLayout();
        }
    }

    private void copyToClipboard(String text) {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Clipboard clipboard = toolkit.getSystemClipboard();
        StringSelection strSel = new StringSelection(text);
        clipboard.setContents(strSel, null);
    }

    private void updateSelectionComboBox() {
        savedSetSelector.setModel(SensorCollectionHandler.getSensorCollectionNamesAsComboBoxModel(SensorCollectionHandler.SIMPLE_COLLECTION, false, true));
        savedSetSelector.setSelectedIndex(0);
    }
}
